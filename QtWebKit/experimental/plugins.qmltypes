import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate QtWebKit.experimental 1.0'

Module {
    Component {
        name: "QQuickNetworkReply"
        prototype: "QObject"
        exports: ["QtWebKit.experimental/NetworkReply 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "contentType"; type: "string" }
        Property { name: "data"; type: "QVariant" }
        Method { name: "send" }
    }
    Component {
        name: "QQuickNetworkRequest"
        prototype: "QObject"
        exports: ["QtWebKit.experimental/NetworkRequest 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "QUrl"; isReadonly: true }
    }
    Component {
        name: "QQuickUrlSchemeDelegate"
        prototype: "QObject"
        exports: ["QtWebKit.experimental/UrlSchemeDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "scheme"; type: "string" }
        Property { name: "request"; type: "QQuickNetworkRequest"; isReadonly: true; isPointer: true }
        Property { name: "reply"; type: "QQuickNetworkReply"; isReadonly: true; isPointer: true }
        Signal { name: "receivedRequest" }
    }
    Component {
        name: "QQuickWebView"
        defaultProperty: "flickableData"
        prototype: "QQuickFlickable"
        Enum {
            name: "NavigationRequestAction"
            values: {
                "AcceptRequest": 0,
                "IgnoreRequest": 255
            }
        }
        Enum {
            name: "LoadStatus"
            values: {
                "LoadStartedStatus": 0,
                "LoadStoppedStatus": 1,
                "LoadSucceededStatus": 2,
                "LoadFailedStatus": 3
            }
        }
        Enum {
            name: "ErrorDomain"
            values: {
                "NoErrorDomain": 0,
                "InternalErrorDomain": 1,
                "NetworkErrorDomain": 2,
                "HttpErrorDomain": 3,
                "DownloadErrorDomain": 4
            }
        }
        Enum {
            name: "NavigationType"
            values: {
                "LinkClickedNavigation": 0,
                "FormSubmittedNavigation": 1,
                "BackForwardNavigation": 2,
                "ReloadNavigation": 3,
                "FormResubmittedNavigation": 4,
                "OtherNavigation": 5
            }
        }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "url"; type: "QUrl" }
        Property { name: "icon"; type: "QUrl"; isReadonly: true }
        Property { name: "canGoBack"; type: "bool"; isReadonly: true }
        Property { name: "canGoForward"; type: "bool"; isReadonly: true }
        Property { name: "loading"; type: "bool"; isReadonly: true }
        Property { name: "loadProgress"; type: "int"; isReadonly: true }
        Signal { name: "navigationHistoryChanged" }
        Signal {
            name: "loadingChanged"
            Parameter { name: "loadRequest"; type: "QWebLoadRequest"; isPointer: true }
        }
        Signal {
            name: "linkHovered"
            Parameter { name: "hoveredUrl"; type: "QUrl" }
            Parameter { name: "hoveredTitle"; type: "string" }
        }
        Signal {
            name: "navigationRequested"
            Parameter { name: "request"; type: "QWebNavigationRequest"; isPointer: true }
        }
        Method {
            name: "loadHtml"
            Parameter { name: "html"; type: "string" }
            Parameter { name: "baseUrl"; type: "QUrl" }
            Parameter { name: "unreachableUrl"; type: "QUrl" }
        }
        Method {
            name: "loadHtml"
            Parameter { name: "html"; type: "string" }
            Parameter { name: "baseUrl"; type: "QUrl" }
        }
        Method {
            name: "loadHtml"
            Parameter { name: "html"; type: "string" }
        }
        Method { name: "goBack" }
        Method { name: "goForward" }
        Method { name: "stop" }
        Method { name: "reload" }
    }
    Component {
        name: "QQuickWebViewAttached"
        prototype: "QObject"
        Property { name: "view"; type: "QQuickWebView"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "QQuickWebViewExperimental"
        prototype: "QObject"
        exports: ["QtWebKit.experimental/WebViewExperimental 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "NavigationRequestActionExperimental"
            values: {
                "DownloadRequest": 254
            }
        }
        Enum {
            name: "FindFlags"
            values: {
                "FindCaseSensitively": 1,
                "FindBackward": 2,
                "FindWrapsAroundDocument": 4,
                "FindHighlightAllOccurrences": 8
            }
        }
        Property { name: "page"; type: "QQuickWebPage"; isReadonly: true; isPointer: true }
        Property { name: "transparentBackground"; type: "bool" }
        Property { name: "useDefaultContentItemSize"; type: "bool" }
        Property { name: "preferredMinimumContentsWidth"; type: "int" }
        Property { name: "deviceWidth"; type: "int" }
        Property { name: "deviceHeight"; type: "int" }
        Property { name: "customLayoutWidth"; type: "int" }
        Property { name: "overview"; type: "bool" }
        Property { name: "pinching"; type: "bool"; isReadonly: true }
        Property { name: "autoCorrect"; type: "bool" }
        Property { name: "temporaryCookies"; type: "bool" }
        Property { name: "offline"; type: "bool" }
        Property {
            name: "navigationHistory"
            type: "QWebNavigationHistory"
            isReadonly: true
            isPointer: true
        }
        Property { name: "alertDialog"; type: "QQmlComponent"; isPointer: true }
        Property { name: "confirmDialog"; type: "QQmlComponent"; isPointer: true }
        Property { name: "promptDialog"; type: "QQmlComponent"; isPointer: true }
        Property { name: "authenticationDialog"; type: "QQmlComponent"; isPointer: true }
        Property { name: "proxyAuthenticationDialog"; type: "QQmlComponent"; isPointer: true }
        Property { name: "certificateVerificationDialog"; type: "QQmlComponent"; isPointer: true }
        Property { name: "itemSelector"; type: "QQmlComponent"; isPointer: true }
        Property { name: "filePicker"; type: "QQmlComponent"; isPointer: true }
        Property { name: "databaseQuotaDialog"; type: "QQmlComponent"; isPointer: true }
        Property { name: "colorChooser"; type: "QQmlComponent"; isPointer: true }
        Property { name: "header"; type: "QQmlComponent"; isPointer: true }
        Property { name: "headerItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "preferences"; type: "QWebPreferences"; isReadonly: true; isPointer: true }
        Property { name: "test"; type: "QWebKitTest"; isReadonly: true; isPointer: true }
        Property {
            name: "urlSchemeDelegates"
            type: "QQuickUrlSchemeDelegate"
            isList: true
            isReadonly: true
        }
        Property { name: "userAgent"; type: "string" }
        Property { name: "userScripts"; type: "QList<QUrl>" }
        Property { name: "userStyleSheet"; type: "QUrl" }
        Property { name: "remoteInspectorUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "enableInputFieldAnimation"; type: "bool" }
        Property { name: "enableResizeContent"; type: "bool" }
        Signal { name: "loadVisuallyCommitted" }
        Signal {
            name: "downloadRequested"
            Parameter { name: "downloadItem"; type: "QWebDownloadItem"; isPointer: true }
        }
        Signal {
            name: "permissionRequested"
            Parameter { name: "permission"; type: "QWebPermissionRequest"; isPointer: true }
        }
        Signal {
            name: "messageReceived"
            Parameter { name: "message"; type: "QVariantMap" }
        }
        Signal { name: "enterFullScreenRequested" }
        Signal { name: "exitFullScreenRequested" }
        Signal {
            name: "textFound"
            Parameter { name: "matchCount"; type: "int" }
        }
        Signal { name: "processDidCrash" }
        Signal { name: "didRelaunchProcess" }
        Signal { name: "processDidBecomeUnresponsive" }
        Signal { name: "processDidBecomeResponsive" }
        Signal { name: "networkRequestIgnored" }
        Method {
            name: "goBackTo"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "goForwardTo"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "postMessage"
            Parameter { type: "string" }
        }
        Method {
            name: "evaluateJavaScript"
            Parameter { name: "script"; type: "string" }
            Parameter { name: "value"; type: "QJSValue" }
        }
        Method {
            name: "evaluateJavaScript"
            Parameter { name: "script"; type: "string" }
        }
        Method {
            name: "deleteCookiesForHostname"
            Parameter { type: "string" }
        }
        Method { name: "deleteAllCookies" }
        Method {
            name: "findText"
            Parameter { name: "string"; type: "string" }
            Parameter { name: "options"; type: "FindFlags" }
        }
        Method {
            name: "findText"
            Parameter { name: "string"; type: "string" }
        }
        Method { name: "animateInputFieldVisible" }
    }
    Component {
        name: "QQuickWebViewExperimentalExtension"
        defaultProperty: "flickableData"
        prototype: "QQuickWebView"
        exports: ["QtWebKit.experimental/WebView 1.0"]
        exportMetaObjectRevisions: [0]
        attachedType: "QQuickWebViewAttached"
        Property {
            name: "experimental"
            type: "QQuickWebViewExperimental"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QWebDownloadItem"
        prototype: "QObject"
        exports: ["QtWebKit.experimental/DownloadItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DownloadError"
            values: {
                "Aborted": 0,
                "CannotWriteToFile": 1,
                "CannotOpenFile": 2,
                "DestinationAlreadyExists": 3,
                "Cancelled": 4,
                "CannotDetermineFilename": 5,
                "NetworkFailure": 6
            }
        }
        Property { name: "expectedContentLength"; type: "qulonglong"; isReadonly: true }
        Property { name: "destinationPath"; type: "string" }
        Property { name: "suggestedFilename"; type: "string"; isReadonly: true }
        Property { name: "totalBytesReceived"; type: "qulonglong"; isReadonly: true }
        Property { name: "url"; type: "QUrl"; isReadonly: true }
        Signal {
            name: "destinationFileCreated"
            Parameter { name: "destinationPath"; type: "string" }
        }
        Signal {
            name: "totalBytesReceivedChanged"
            Parameter { name: "bytesReceived"; type: "qulonglong" }
        }
        Signal { name: "succeeded" }
        Signal {
            name: "failed"
            Parameter { name: "error"; type: "QWebDownloadItem::DownloadError" }
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "description"; type: "string" }
        }
        Method { name: "start" }
        Method { name: "cancel" }
    }
    Component {
        name: "QWebKitTest"
        prototype: "QObject"
        exports: ["QtWebKit.experimental/QWebKitTest 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "contentsSize"; type: "QSize"; isReadonly: true }
        Property { name: "contentsScale"; type: "QVariant"; isReadonly: true }
        Property { name: "devicePixelRatio"; type: "QVariant"; isReadonly: true }
        Property { name: "viewport"; type: "QJsonObject"; isReadonly: true }
        Signal { name: "contentsScaleCommitted" }
        Method {
            name: "touchTap"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "delay"; type: "int" }
        }
        Method {
            name: "touchTap"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "touchDoubleTap"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "delay"; type: "int" }
        }
        Method {
            name: "touchDoubleTap"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Method {
            name: "wheelEvent"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "delta"; type: "int" }
            Parameter { name: "orient"; type: "Qt::Orientation" }
        }
        Method {
            name: "wheelEvent"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
            Parameter { name: "delta"; type: "int" }
        }
    }
    Component {
        name: "QWebNavigationHistory"
        prototype: "QObject"
        exports: ["QtWebKit.experimental/NavigationHistory 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "backItems"; type: "QWebNavigationListModel"; isReadonly: true; isPointer: true }
        Property {
            name: "forwardItems"
            type: "QWebNavigationListModel"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "QWebNavigationListModel"
        prototype: "QAbstractListModel"
        exports: ["QtWebKit.experimental/NavigationListModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "QWebPermissionRequest"
        prototype: "QObject"
        exports: ["QtWebKit.experimental/PermissionRequest 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "RequestType"
            values: {
                "Geolocation": 0,
                "Notification": 1
            }
        }
        Property { name: "allow"; type: "bool" }
        Property { name: "type"; type: "RequestType"; isReadonly: true }
        Property { name: "origin"; type: "QtWebSecurityOrigin"; isReadonly: true; isPointer: true }
        Method {
            name: "setAllow"
            Parameter { type: "bool" }
        }
        Method { name: "securityOrigin"; type: "QtWebSecurityOrigin*" }
    }
    Component {
        name: "QWebPreferences"
        prototype: "QObject"
        exports: ["QtWebKit.experimental/WebPreferences 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "autoLoadImages"; type: "bool" }
        Property { name: "fullScreenEnabled"; type: "bool" }
        Property { name: "javascriptEnabled"; type: "bool" }
        Property { name: "pluginsEnabled"; type: "bool" }
        Property { name: "offlineWebApplicationCacheEnabled"; type: "bool" }
        Property { name: "localStorageEnabled"; type: "bool" }
        Property { name: "xssAuditingEnabled"; type: "bool" }
        Property { name: "privateBrowsingEnabled"; type: "bool" }
        Property { name: "dnsPrefetchEnabled"; type: "bool" }
        Property { name: "navigatorQtObjectEnabled"; type: "bool" }
        Property { name: "frameFlatteningEnabled"; type: "bool" }
        Property { name: "developerExtrasEnabled"; type: "bool" }
        Property { name: "webGLEnabled"; type: "bool" }
        Property { name: "webAudioEnabled"; type: "bool" }
        Property { name: "caretBrowsingEnabled"; type: "bool" }
        Property { name: "notificationsEnabled"; type: "bool" }
        Property { name: "cookiesEnabled"; type: "bool" }
        Property { name: "universalAccessFromFileURLsAllowed"; type: "bool" }
        Property { name: "fileAccessFromFileURLsAllowed"; type: "bool" }
        Property { name: "standardFontFamily"; type: "string" }
        Property { name: "fixedFontFamily"; type: "string" }
        Property { name: "serifFontFamily"; type: "string" }
        Property { name: "sansSerifFontFamily"; type: "string" }
        Property { name: "cursiveFontFamily"; type: "string" }
        Property { name: "fantasyFontFamily"; type: "string" }
        Property { name: "minimumFontSize"; type: "uint" }
        Property { name: "defaultFontSize"; type: "uint" }
        Property { name: "defaultFixedFontSize"; type: "uint" }
    }
    Component {
        name: "QtWebSecurityOrigin"
        prototype: "QObject"
        exports: ["QtWebKit.experimental/SecurityOrigin 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "scheme"; type: "string"; isReadonly: true }
        Property { name: "host"; type: "string"; isReadonly: true }
        Property { name: "port"; type: "int"; isReadonly: true }
        Property { name: "path"; type: "string"; isReadonly: true }
    }
}
