import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies /home/nemo/qmlexport/empty.json Sailfish.Secrets.Ui 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "CollectionKeysModel"
        prototype: "GadgetListModelBase"
        exports: ["Sailfish.Secrets.Ui/CollectionKeysModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "CollectionRoles"
            values: {
                "NameRole": 257,
                "CollectionNameRole": 258
            }
        }
        Enum {
            name: "Status"
            values: {
                "Unknown": 0,
                "Fetching": 1,
                "Ready": 2,
                "Error": 3
            }
        }
        Property { name: "cryptoManager"; type: "Sailfish::Crypto::CryptoManager"; isPointer: true }
        Property { name: "storagePluginName"; type: "string" }
        Property { name: "collectionName"; type: "string" }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Signal {
            name: "requestKeysFromCollectionCompleted"
            Parameter { name: "errorCode"; type: "int" }
        }
        Signal {
            name: "error"
            Parameter { name: "errorCode"; type: "int" }
        }
        Signal {
            name: "storageError"
            Parameter { name: "error"; type: "StorageError::Error" }
        }
        Method { name: "requestKeysFromCollection" }
        Method { name: "refreshModelData" }
        Method {
            name: "removeAt"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "CollectionsModel"
        prototype: "SimpleModel"
        exports: ["Sailfish.Secrets.Ui/CollectionsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "CollectionRoles"
            values: {
                "CollectionNameRole": 257,
                "IsCollectionLockedRole": 258
            }
        }
        Property { name: "storagePluginName"; type: "string" }
        Property { name: "secretManager"; type: "Sailfish::Secrets::SecretManager"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Signal { name: "collectionsChanged" }
        Method { name: "refreshModelData" }
    }
    Component {
        name: "GadgetListModelBase"
        prototype: "QAbstractListModel"
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "KeyManager"
        prototype: "QObject"
        exports: ["Sailfish.Secrets.Ui/KeyManager 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Unknown": 0,
                "Generating": 1,
                "Importing": 2,
                "Ready": 3,
                "Error": 4
            }
        }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "collectionName"; type: "string" }
        Property { name: "pluginName"; type: "string" }
        Property { name: "cryptoManager"; type: "CryptoManager"; isPointer: true }
        Property { name: "secretManager"; type: "SecretManager"; isPointer: true }
        Signal { name: "populatedChanged" }
        Signal {
            name: "error"
            Parameter { name: "errorCode"; type: "int" }
        }
        Signal {
            name: "storageError"
            Parameter { name: "error"; type: "StorageError::Error" }
        }
        Signal { name: "imported" }
        Signal {
            name: "generated"
            Parameter { name: "key"; type: "QVariant" }
        }
        Method {
            name: "importKey"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "source"; type: "string" }
        }
        Method {
            name: "generateKey"
            Parameter { name: "keyTemplate"; type: "QVariant" }
            Parameter { name: "keyPairGenerationParameters"; type: "QVariant" }
        }
        Method {
            name: "errorString"
            type: "string"
            Parameter { name: "error"; type: "StorageError::Error" }
        }
    }
    Component {
        name: "SecretPluginsModel"
        prototype: "GadgetListModelBase"
        exports: ["Sailfish.Secrets.Ui/SecretPluginsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Filter"
            values: {
                "Authentication": 1,
                "Encryption": 2,
                "Storage": 4,
                "EncryptedStorage": 8,
                "All": 15
            }
        }
        Enum {
            name: "Filters"
            values: {
                "Authentication": 1,
                "Encryption": 2,
                "Storage": 4,
                "EncryptedStorage": 8,
                "All": 15
            }
        }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Property { name: "masterLocked"; type: "bool"; isReadonly: true }
        Property { name: "filters"; type: "Filters" }
        Property { name: "secretManager"; type: "SecretManager"; isPointer: true }
        Signal {
            name: "error"
            Parameter { name: "error"; type: "int" }
        }
        Method {
            name: "setFilters"
            Parameter { name: "filters"; type: "Filters" }
        }
        Method {
            name: "masterLockCodeRequest"
            Parameter { name: "requestType"; type: "int" }
        }
        Method {
            name: "pluginLockCodeRequest"
            Parameter { name: "pluginName"; type: "string" }
            Parameter { name: "requestType"; type: "int" }
        }
    }
    Component {
        name: "SecretsResetter"
        prototype: "QObject"
        exports: ["Sailfish.Secrets.Ui/SecretsResetter 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Signal { name: "success" }
        Signal { name: "error" }
        Method { name: "resetSecretsData" }
    }
    Component {
        name: "Signer"
        prototype: "QObject"
        exports: ["Sailfish.Secrets.Ui/Signer 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SigningError"
            values: {
                "SigningErrorFileDoesntExist": 1,
                "SigningErrorCantOpenFile": 2,
                "SigningErrorFileTooBig": 3,
                "SigningErrorInvalidKey": 4,
                "SigningErrorApiFailure": 5,
                "SigningErrorCantCreateSignatureFile": 6,
                "SigningErrorCantWriteSignatureFile": 7,
                "SigningErrorCantReadFile": 8
            }
        }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Property { name: "collectionName"; type: "string" }
        Property { name: "cryptoManager"; type: "CryptoManager"; isPointer: true }
        Property { name: "totalBytesToProcess"; type: "qlonglong"; isReadonly: true }
        Property { name: "processedBytes"; type: "qlonglong"; isReadonly: true }
        Signal { name: "signingDone" }
        Signal {
            name: "signingError"
            Parameter { name: "error"; type: "SigningError" }
        }
        Method {
            name: "sign"
            Parameter { name: "filePath"; type: "string" }
            Parameter { name: "key"; type: "QVariant" }
            Parameter { name: "digestFunction"; type: "int" }
        }
        Method {
            name: "errorString"
            type: "string"
            Parameter { name: "error"; type: "SigningError" }
        }
        Method {
            name: "getSignaturePath"
            type: "string"
            Parameter { name: "filePath"; type: "string" }
        }
    }
    Component {
        name: "SimpleModel"
        prototype: "QAbstractListModel"
        Property { name: "values"; type: "QVariantList" }
        Method { name: "refreshModelData" }
    }
    Component {
        name: "StorageError"
        prototype: "QObject"
        exports: ["Sailfish.Secrets.Ui/StorageError 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Error"
            values: {
                "ErrorApiFailure": 1,
                "ErrorCollectionNameMismatch": 2,
                "ErrorKeyDeletionFailed": 3,
                "ErrorKeyImportFailed": 4,
                "ErrorKeyAlreadyExists": 5
            }
        }
    }
}
