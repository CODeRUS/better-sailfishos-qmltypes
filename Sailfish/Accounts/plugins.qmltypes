import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies dependencies/empty.json Sailfish.Accounts 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "Account"
        prototype: "QObject"
        exports: ["Sailfish.Accounts/Account 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Initialized": 0,
                "Initializing": 1,
                "Synced": 2,
                "SyncInProgress": 3,
                "Modified": 4,
                "SigningIn": 5,
                "Error": 6,
                "Invalid": 7
            }
        }
        Enum {
            name: "ErrorType"
            values: {
                "NoError": 0,
                "UnknownError": 1,
                "DatabaseError": 2,
                "DeletedError": 3,
                "DatabaseLockedError": 4,
                "AccountNotFoundError": 5,
                "InitializationFailedError": 6,
                "SignInUnknownError": 7,
                "SignInInvalidStatusError": 8,
                "SignInInvalidCredentialsError": 9,
                "SignInCredentialsExpiredError": 10,
                "SignInNetworkError": 11,
                "SignInMissingDataError": 12,
                "SignInPermissionDeniedError": 13,
                "SignInOperationCanceledError": 14
            }
        }
        Property { name: "enabled"; type: "bool" }
        Property { name: "identifier"; type: "int" }
        Property { name: "providerName"; type: "string"; isReadonly: true }
        Property { name: "displayName"; type: "string" }
        Property { name: "defaultCredentialsUserName"; type: "string"; isReadonly: true }
        Property { name: "provisioned"; type: "bool"; isReadonly: true }
        Property { name: "readonly"; type: "bool"; isReadonly: true }
        Property { name: "limited"; type: "bool"; isReadonly: true }
        Property { name: "supportedServiceNames"; type: "QStringList"; isReadonly: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "error"; type: "ErrorType"; isReadonly: true }
        Property { name: "errorMessage"; type: "string"; isReadonly: true }
        Signal {
            name: "enabledWithServiceChanged"
            Parameter { name: "serviceName"; type: "string" }
        }
        Signal {
            name: "signInCredentialsCreated"
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Signal {
            name: "signInCredentialsUpdated"
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Signal {
            name: "signInResponse"
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Signal {
            name: "signInError"
            Parameter { name: "message"; type: "string" }
            Parameter { name: "errorType"; type: "int" }
        }
        Method { name: "cancelSignInOperation" }
        Method { name: "sync" }
        Method { name: "blockingSync" }
        Method { name: "remove" }
        Method {
            name: "configurationValues"
            type: "QVariantMap"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "configurationValue"
            type: "QVariant"
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "setConfigurationValue"
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "removeConfigurationValue"
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "isEnabledWithService"
            type: "bool"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "enableWithService"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "disableWithService"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "signInParameters"
            type: "SignInParameters*"
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "username"; type: "string" }
            Parameter { name: "password"; type: "string" }
        }
        Method {
            name: "signInParameters"
            type: "SignInParameters*"
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "username"; type: "string" }
        }
        Method {
            name: "signInParameters"
            type: "SignInParameters*"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "hasSignInCredentials"
            type: "bool"
            Parameter { name: "applicationName"; type: "string" }
            Parameter { name: "credentialsName"; type: "string" }
        }
        Method {
            name: "createSignInCredentials"
            Parameter { name: "applicationName"; type: "string" }
            Parameter { name: "credentialsName"; type: "string" }
            Parameter { name: "parameters"; type: "SignInParameters"; isPointer: true }
            Parameter { name: "symmetricKey"; type: "string" }
        }
        Method {
            name: "createSignInCredentials"
            Parameter { name: "applicationName"; type: "string" }
            Parameter { name: "credentialsName"; type: "string" }
            Parameter { name: "parameters"; type: "SignInParameters"; isPointer: true }
        }
        Method {
            name: "updateSignInCredentials"
            Parameter { name: "applicationName"; type: "string" }
            Parameter { name: "credentialsName"; type: "string" }
            Parameter { name: "parameters"; type: "SignInParameters"; isPointer: true }
            Parameter { name: "symmetricKey"; type: "string" }
        }
        Method {
            name: "updateSignInCredentials"
            Parameter { name: "applicationName"; type: "string" }
            Parameter { name: "credentialsName"; type: "string" }
            Parameter { name: "parameters"; type: "SignInParameters"; isPointer: true }
        }
        Method {
            name: "removeSignInCredentials"
            Parameter { name: "applicationName"; type: "string" }
            Parameter { name: "credentialsName"; type: "string" }
        }
        Method {
            name: "signIn"
            Parameter { name: "applicationName"; type: "string" }
            Parameter { name: "credentialsName"; type: "string" }
            Parameter { name: "parameters"; type: "SignInParameters"; isPointer: true }
            Parameter { name: "symmetricKey"; type: "string" }
        }
        Method {
            name: "signIn"
            Parameter { name: "applicationName"; type: "string" }
            Parameter { name: "credentialsName"; type: "string" }
            Parameter { name: "parameters"; type: "SignInParameters"; isPointer: true }
        }
        Method {
            name: "signOut"
            Parameter { name: "applicationName"; type: "string" }
            Parameter { name: "credentialsName"; type: "string" }
        }
    }
    Component {
        name: "AccountAuthenticator"
        prototype: "QObject"
        exports: ["Sailfish.Accounts/AccountAuthenticator 1.0"]
        exportMetaObjectRevisions: [0]
        Signal {
            name: "signInCompleted"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "credentials"; type: "AccountAuthenticatorCredentials" }
        }
        Signal {
            name: "signInError"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "errorString"; type: "string" }
        }
        Signal {
            name: "authenticatedRequestFinished"
            Parameter { name: "success"; type: "bool" }
            Parameter { name: "errorString"; type: "string" }
        }
        Signal {
            name: "ocsUserRequestFinished"
            Parameter { name: "success"; type: "bool" }
            Parameter { name: "errorString"; type: "string" }
        }
        Method {
            name: "signIn"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "sendAuthenticatedRequest"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "credentials"; type: "AccountAuthenticatorCredentials" }
            Parameter { name: "ignoreSslErrors"; type: "bool" }
        }
        Method {
            name: "sendOcsUserRequest"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "credentials"; type: "AccountAuthenticatorCredentials" }
            Parameter { name: "ignoreSslErrors"; type: "bool" }
        }
        Method {
            name: "setCredentialsNeedUpdate"
            type: "bool"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
        }
    }
    Component {
        name: "AccountAuthenticatorCredentials"
        exports: ["Sailfish.Accounts/AccountAuthenticatorCredentials 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "username"; type: "string" }
        Property { name: "password"; type: "string" }
        Property { name: "accessToken"; type: "string" }
        Property { name: "serviceSettings"; type: "QVariantMap" }
    }
    Component {
        name: "AccountManager"
        prototype: "QObject"
        exports: ["Sailfish.Accounts/AccountManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "serviceTypeNames"; type: "QStringList"; isReadonly: true }
        Property { name: "providerNames"; type: "QStringList"; isReadonly: true }
        Property { name: "serviceNames"; type: "QStringList"; isReadonly: true }
        Property { name: "accountIdentifiers"; type: "QList<int>"; isReadonly: true }
        Signal {
            name: "accountCreated"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "providerName"; type: "string" }
        }
        Signal {
            name: "accountCreationFailed"
            Parameter { name: "message"; type: "string" }
            Parameter { name: "providerName"; type: "string" }
        }
        Method {
            name: "providerAccountIdentifiers"
            type: "QList<int>"
            Parameter { name: "providerName"; type: "string" }
        }
        Method {
            name: "createAccount"
            type: "bool"
            Parameter { name: "providerName"; type: "string" }
        }
        Method {
            name: "serviceType"
            type: "ServiceType*"
            Parameter { name: "serviceTypeName"; type: "string" }
        }
        Method {
            name: "service"
            type: "Service*"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "provider"
            type: "Provider*"
            Parameter { name: "providerName"; type: "string" }
        }
        Method {
            name: "providerForAccount"
            type: "Provider*"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "account"
            type: "Account*"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "credentialsNeedUpdate"
            type: "bool"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "enabledAccounts"
            type: "QList<int>"
            Parameter { name: "providerName"; type: "string" }
            Parameter { name: "serviceName"; type: "string" }
        }
    }
    Component {
        name: "AccountModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Accounts/AccountModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FilterType"
            values: {
                "NoFilter": 0,
                "ProviderFilter": 1,
                "ServiceFilter": 2,
                "ServiceTypeFilter": 3,
                "ProvisionedFilter": 4
            }
        }
        Enum {
            name: "AccountError"
            values: {
                "NoAccountError": 0,
                "AccountNotSignedInError": 1,
                "UnknownAccountError": 100
            }
        }
        Property { name: "filterType"; type: "FilterType" }
        Property { name: "filter"; type: "string" }
        Property { name: "filterByEnabled"; type: "bool" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "setAccountEnabled"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "getByAccount"
            type: "QVariantMap"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "accountHasServiceOfTypeEnabled"
            type: "bool"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceTypeName"; type: "string" }
        }
    }
    Component {
        name: "AccountSyncManager"
        prototype: "QObject"
        exports: ["Sailfish.Accounts/AccountSyncManager 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SyncStatus"
            values: {
                "UnknownSyncStatus": 0,
                "SyncStarted": 1,
                "SyncFinished": 2,
                "SyncAborted": 3,
                "SyncError": 4
            }
        }
        Enum {
            name: "BackupOperationType"
            values: {
                "InvalidOperation": 0,
                "Backup": 1,
                "BackupQuery": 2,
                "BackupRestore": 3
            }
        }
        Signal {
            name: "profileCreated"
            Parameter { name: "profileId"; type: "string" }
        }
        Signal {
            name: "profileCreationError"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "errorString"; type: "string" }
        }
        Signal {
            name: "profileUpdated"
            Parameter { name: "profileId"; type: "string" }
        }
        Signal {
            name: "profileUpdateError"
            Parameter { name: "profileId"; type: "string" }
            Parameter { name: "errorString"; type: "string" }
        }
        Signal {
            name: "profileSyncStatusChanged"
            Parameter { name: "profileId"; type: "string" }
            Parameter { name: "status"; type: "int" }
            Parameter { name: "errorString"; type: "string" }
        }
        Signal {
            name: "allProfilesCreated"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "profileIds"; type: "QStringList" }
        }
        Signal {
            name: "allProfileCreationError"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "errorString"; type: "string" }
        }
        Method {
            name: "createProfile"
            Parameter { name: "templateProfileName"; type: "string" }
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "updateProfile"
            Parameter { name: "profileId"; type: "string" }
            Parameter { name: "properties"; type: "QVariantMap" }
            Parameter { name: "options"; type: "AccountSyncOptions"; isPointer: true }
        }
        Method {
            name: "syncProfile"
            Parameter { name: "profileId"; type: "string" }
        }
        Method {
            name: "abortProfileSync"
            Parameter { name: "profileId"; type: "string" }
        }
        Method {
            name: "createAllProfiles"
            type: "int"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "profileIds"
            type: "QStringList"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "profileIds"
            type: "QStringList"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "accountSyncOptions"
            type: "AccountSyncOptions*"
            Parameter { name: "profileId"; type: "string" }
        }
        Method {
            name: "nextSyncTime"
            type: "QDateTime"
            Parameter { name: "profileId"; type: "string" }
        }
        Method {
            name: "lastSyncTime"
            type: "QDateTime"
            Parameter { name: "profileId"; type: "string" }
        }
        Method {
            name: "lastSuccessfulSyncTime"
            type: "QDateTime"
            Parameter { name: "profileId"; type: "string" }
        }
        Method {
            name: "templateProfilesAvailable"
            type: "bool"
            Parameter { name: "templateProfiles"; type: "QStringList" }
        }
        Method {
            name: "defaultTemplateProfiles"
            type: "QStringList"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "profileProperties"
            type: "QVariantMap"
            Parameter { name: "profileId"; type: "string" }
        }
        Method {
            name: "findBackupOperationProfile"
            type: "string"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "operation"; type: "BackupOperationType" }
        }
    }
    Component {
        name: "AccountSyncOptions"
        prototype: "QObject"
        exports: ["Sailfish.Accounts/AccountSyncOptions 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PastSyncPeriod"
            values: {
                "OneDayAgo": 0,
                "ThreeDaysAgo": 1,
                "OneWeekAgo": 2,
                "TwoWeeksAgo": 3,
                "OneMonthAgo": 4
            }
        }
        Enum {
            name: "Direction"
            values: {
                "OneWayToDevice": 0,
                "OneWayFromDevice": 1,
                "TwoWaySync": 2
            }
        }
        Enum {
            name: "NetworkConnection"
            values: {
                "Ethernet": 1,
                "Wlan": 2,
                "Cellular": 4,
                "Bluetooth": 8
            }
        }
        Property { name: "automaticSyncEnabled"; type: "bool" }
        Property { name: "syncExternallyEnabled"; type: "bool" }
        Property { name: "pastSyncPeriod"; type: "PastSyncPeriod" }
        Property { name: "direction"; type: "Direction" }
        Property { name: "allowedConnectionTypes"; type: "int" }
        Property { name: "schedule"; type: "AccountSyncSchedule"; isPointer: true }
        Property { name: "modified"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "AccountSyncSchedule"
        prototype: "QObject"
        exports: ["Sailfish.Accounts/AccountSyncSchedule 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Interval"
            values: {
                "Every15Minutes": 0,
                "Every30Minutes": 1,
                "EveryHour": 2,
                "TwiceDailyInterval": 3,
                "Every5Minutes": 4,
                "NoInterval": 100
            }
        }
        Enum {
            name: "LongInterval"
            values: {
                "MonthLongInterval": 0,
                "FirstDayOfMonthInterval": 1,
                "LastDayOfMonthInterval": 2,
                "NoLongInterval": 100
            }
        }
        Enum {
            name: "Day"
            values: {
                "Monday": 1,
                "Tuesday": 2,
                "Wednesday": 4,
                "Thursday": 8,
                "Friday": 16,
                "Saturday": 32,
                "Sunday": 64,
                "WeekDays": 31,
                "WeekendDays": 96,
                "EveryDay": 127
            }
        }
        Property { name: "enabled"; type: "bool" }
        Property { name: "days"; type: "int"; isReadonly: true }
        Property { name: "dailySyncTime"; type: "QTime"; isReadonly: true }
        Property { name: "interval"; type: "Interval"; isReadonly: true }
        Property { name: "longInterval"; type: "LongInterval"; isReadonly: true }
        Property { name: "peakScheduleEnabled"; type: "bool" }
        Property { name: "syncExternallyDuringPeak"; type: "bool" }
        Property { name: "peakStartTime"; type: "QTime"; isReadonly: true }
        Property { name: "peakEndTime"; type: "QTime"; isReadonly: true }
        Property { name: "peakInterval"; type: "Interval"; isReadonly: true }
        Property { name: "peakDays"; type: "int"; isReadonly: true }
        Property { name: "modified"; type: "bool"; isReadonly: true }
        Method {
            name: "setDailySyncMode"
            Parameter { name: "time"; type: "QTime" }
            Parameter { name: "days"; type: "int" }
        }
        Method {
            name: "setDailySyncMode"
            Parameter { name: "time"; type: "QTime" }
        }
        Method {
            name: "setIntervalSyncMode"
            Parameter { name: "interval"; type: "Interval" }
            Parameter { name: "days"; type: "int" }
        }
        Method {
            name: "setIntervalSyncMode"
            Parameter { name: "interval"; type: "Interval" }
        }
        Method {
            name: "setLongIntervalSyncMode"
            Parameter { name: "interval"; type: "LongInterval" }
            Parameter { name: "time"; type: "QTime" }
        }
        Method {
            name: "setPeakSchedule"
            Parameter { name: "peakStart"; type: "QTime" }
            Parameter { name: "peakEnd"; type: "QTime" }
            Parameter { name: "peakInterval"; type: "Interval" }
            Parameter { name: "peakDays"; type: "int" }
        }
        Method { name: "setDefaultPeakSchedule" }
    }
    Component {
        name: "AccountValue"
        prototype: "QObject"
        exports: ["Sailfish.Accounts/AccountValue 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "account"; type: "Account"; isPointer: true }
        Property { name: "service"; type: "string" }
        Property { name: "key"; type: "string" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "conflict"; type: "bool"; isReadonly: true }
        Property { name: "remoteValue"; type: "QVariant"; isReadonly: true }
        Method { name: "clearLocalChanged" }
    }
    Component {
        name: "Provider"
        prototype: "QObject"
        exports: ["Sailfish.Accounts/Provider 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "iconName"; type: "string"; isReadonly: true }
        Property { name: "serviceNames"; type: "QStringList"; isReadonly: true }
        Property { name: "singleAccount"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "ProviderModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Accounts/ProviderModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "providerNames"; type: "QStringList"; isReadonly: true }
        Property { name: "serviceFilter"; type: "QStringList" }
        Property { name: "providerFilter"; type: "QStringList" }
        Property { name: "excludeProvidersForUncreatableAccounts"; type: "bool" }
        Property { name: "otherExcludedProviders"; type: "QStringList" }
        Signal { name: "rowCountChanged" }
    }
    Component {
        name: "Service"
        prototype: "QObject"
        exports: ["Sailfish.Accounts/Service 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "serviceType"; type: "string"; isReadonly: true }
        Property { name: "providerName"; type: "string"; isReadonly: true }
        Property { name: "iconName"; type: "string"; isReadonly: true }
        Property { name: "tags"; type: "QStringList"; isReadonly: true }
    }
    Component {
        name: "ServiceModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Accounts/ServiceModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "serviceTypeFilter"; type: "string" }
    }
    Component {
        name: "ServiceType"
        prototype: "QObject"
        exports: ["Sailfish.Accounts/ServiceType 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "iconName"; type: "string"; isReadonly: true }
        Property { name: "tags"; type: "QStringList"; isReadonly: true }
    }
    Component {
        name: "SignInParameters"
        prototype: "QObject"
        exports: ["Sailfish.Accounts/SignInParameters 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "UiPolicy"
            values: {
                "DefaultPolicy": 0,
                "RequestPasswordPolicy": 1,
                "NoUserInteractionPolicy": 2,
                "ValidationPolicy": 3
            }
        }
        Enum {
            name: "CredentialsPolicy"
            values: {
                "UseCachedCredentialsPolicy": 0,
                "RefreshCredentialsPolicy": 1
            }
        }
        Property { name: "serviceName"; type: "string"; isReadonly: true }
        Property { name: "method"; type: "string"; isReadonly: true }
        Property { name: "mechanism"; type: "string"; isReadonly: true }
        Property { name: "parameters"; type: "QVariantMap"; isReadonly: true }
        Property { name: "username"; type: "string"; isReadonly: true }
        Property { name: "password"; type: "string"; isReadonly: true }
        Method {
            name: "setParameters"
            Parameter { name: "parameters"; type: "QVariantMap" }
        }
        Method {
            name: "setParameter"
            Parameter { name: "parameterName"; type: "string" }
            Parameter { name: "parameterValue"; type: "QVariant" }
        }
        Method {
            name: "setParameter"
            Parameter { name: "parameterName"; type: "string" }
            Parameter { name: "parameterValue"; type: "string" }
        }
        Method {
            name: "setParameter"
            Parameter { name: "parameterName"; type: "string" }
            Parameter { name: "parameterValue"; type: "QStringList" }
        }
        Method {
            name: "setParameter"
            Parameter { name: "parameterName"; type: "string" }
            Parameter { name: "parameterValue"; type: "QUrl" }
        }
        Method {
            name: "setParameter"
            Parameter { name: "parameterName"; type: "string" }
            Parameter { name: "parameterValue"; type: "int" }
        }
        Method {
            name: "setParameter"
            Parameter { name: "parameterName"; type: "string" }
            Parameter { name: "parameterValue"; type: "bool" }
        }
        Method {
            name: "removeParameter"
            Parameter { name: "parameterName"; type: "string" }
        }
    }
}
