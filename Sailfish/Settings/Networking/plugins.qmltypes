import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies /home/nemo/qmlexport/empty.json Sailfish.Settings.Networking 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "AddNetworkHelper"
        prototype: "QObject"
        exports: ["Sailfish.Settings.Networking/AddNetworkHelper 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "writeSettings"
            Parameter { name: "value"; type: "QJSValue" }
        }
        Method { name: "readSettings"; type: "QJSValue" }
    }
    Component {
        name: "CertHelper"
        prototype: "QObject"
        exports: ["Sailfish.Settings.Networking/CertHelper 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "readCert"
            type: "string"
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "ClockModel"
        prototype: "QObject"
        exports: ["MeeGo.Connman/ClockModel 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "timezone"; type: "string" }
        Property { name: "timezoneUpdates"; type: "string" }
        Property { name: "timeUpdates"; type: "string" }
        Property { name: "timeservers"; type: "QStringList" }
        Method { name: "timezone"; type: "string" }
        Method {
            name: "setTimezone"
            Parameter { name: "val"; type: "string" }
        }
        Method { name: "timezoneUpdates"; type: "string" }
        Method {
            name: "setTimezoneUpdates"
            Parameter { name: "val"; type: "string" }
        }
        Method { name: "timeUpdates"; type: "string" }
        Method {
            name: "setTimeUpdates"
            Parameter { name: "val"; type: "string" }
        }
        Method { name: "timeservers"; type: "QStringList" }
        Method {
            name: "setTimeservers"
            Parameter { name: "val"; type: "QStringList" }
        }
        Method {
            name: "setDate"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "setTime"
            Parameter { name: "time"; type: "QTime" }
        }
    }
    Component {
        name: "Counter"
        prototype: "QObject"
        exports: ["MeeGo.Connman/NetworkCounter 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "bytesReceived"; type: "qulonglong"; isReadonly: true }
        Property { name: "bytesTransmitted"; type: "qulonglong"; isReadonly: true }
        Property { name: "secondsOnline"; type: "uint"; isReadonly: true }
        Property { name: "roaming"; type: "bool"; isReadonly: true }
        Property { name: "accuracy"; type: "uint" }
        Property { name: "interval"; type: "uint" }
        Property { name: "running"; type: "bool" }
        Signal {
            name: "counterChanged"
            Parameter { name: "servicePath"; type: "string" }
            Parameter { name: "counters"; type: "QVariantMap" }
            Parameter { name: "roaming"; type: "bool" }
        }
        Signal {
            name: "bytesReceivedChanged"
            Parameter { name: "bytesRx"; type: "qulonglong" }
        }
        Signal {
            name: "bytesTransmittedChanged"
            Parameter { name: "bytesTx"; type: "qulonglong" }
        }
        Signal {
            name: "secondsOnlineChanged"
            Parameter { name: "seconds"; type: "uint" }
        }
        Signal {
            name: "roamingChanged"
            Parameter { name: "roaming"; type: "bool" }
        }
        Signal {
            name: "accuracyChanged"
            Parameter { name: "accuracy"; type: "uint" }
        }
        Signal {
            name: "intervalChanged"
            Parameter { name: "interval"; type: "uint" }
        }
        Signal {
            name: "runningChanged"
            Parameter { name: "running"; type: "bool" }
        }
    }
    Component {
        name: "NetProxyConfig"
        prototype: "QObject"
        exports: ["Sailfish.Settings.Networking/NetProxyConfig 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "proxyActive"; type: "bool" }
        Property { name: "proxyConfig"; type: "QVariantMap" }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Property { name: "busyInterval"; type: "int" }
    }
    Component {
        name: "NetworkManager"
        prototype: "QObject"
        exports: ["MeeGo.Connman/NetworkManager 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property { name: "state"; type: "string"; isReadonly: true }
        Property { name: "offlineMode"; type: "bool" }
        Property { name: "defaultRoute"; type: "NetworkService"; isReadonly: true; isPointer: true }
        Property { name: "connectedWifi"; type: "NetworkService"; isReadonly: true; isPointer: true }
        Property { name: "sessionMode"; type: "bool" }
        Property { name: "inputRequestTimeout"; type: "uint"; isReadonly: true }
        Property { name: "servicesEnabled"; type: "bool" }
        Property { name: "technologiesEnabled"; type: "bool" }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "connecting"; type: "bool"; isReadonly: true }
        Property { name: "WifiTechnology"; type: "string"; isReadonly: true }
        Property { name: "CellularTechnology"; type: "string"; isReadonly: true }
        Property { name: "BluetoothTechnology"; type: "string"; isReadonly: true }
        Property { name: "GpsTechnology"; type: "string"; isReadonly: true }
        Signal {
            name: "availabilityChanged"
            Parameter { name: "available"; type: "bool" }
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "string" }
        }
        Signal {
            name: "offlineModeChanged"
            Parameter { name: "offlineMode"; type: "bool" }
        }
        Signal { name: "technologiesChanged" }
        Signal { name: "servicesChanged" }
        Signal { name: "savedServicesChanged" }
        Signal { name: "wifiServicesChanged" }
        Signal { name: "cellularServicesChanged" }
        Signal { name: "availableServicesChanged" }
        Signal {
            name: "defaultRouteChanged"
            Parameter { name: "defaultRoute"; type: "NetworkService"; isPointer: true }
        }
        Signal {
            name: "sessionModeChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "servicesListChanged"
            Parameter { name: "list"; type: "QStringList" }
        }
        Signal {
            name: "serviceAdded"
            Parameter { name: "servicePath"; type: "string" }
        }
        Signal {
            name: "serviceRemoved"
            Parameter { name: "servicePath"; type: "string" }
        }
        Signal {
            name: "serviceCreated"
            Parameter { name: "servicePath"; type: "string" }
        }
        Signal {
            name: "serviceCreationFailed"
            Parameter { name: "error"; type: "string" }
        }
        Method {
            name: "setOfflineMode"
            Parameter { name: "offlineMode"; type: "bool" }
        }
        Method {
            name: "registerAgent"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "unregisterAgent"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "registerCounter"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "accuracy"; type: "uint" }
            Parameter { name: "period"; type: "uint" }
        }
        Method {
            name: "unregisterCounter"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "createSession"
            type: "QDBusObjectPath"
            Parameter { name: "settings"; type: "QVariantMap" }
            Parameter { name: "sessionNotifierPath"; type: "string" }
        }
        Method {
            name: "destroySession"
            Parameter { name: "sessionAgentPath"; type: "string" }
        }
        Method {
            name: "createService"
            type: "bool"
            Parameter { name: "settings"; type: "QVariantMap" }
            Parameter { name: "tech"; type: "string" }
            Parameter { name: "service"; type: "string" }
            Parameter { name: "device"; type: "string" }
        }
        Method {
            name: "createService"
            type: "bool"
            Parameter { name: "settings"; type: "QVariantMap" }
            Parameter { name: "tech"; type: "string" }
            Parameter { name: "service"; type: "string" }
        }
        Method {
            name: "createService"
            type: "bool"
            Parameter { name: "settings"; type: "QVariantMap" }
            Parameter { name: "tech"; type: "string" }
        }
        Method {
            name: "createService"
            type: "bool"
            Parameter { name: "settings"; type: "QVariantMap" }
        }
        Method {
            name: "createServiceSync"
            type: "string"
            Parameter { name: "settings"; type: "QVariantMap" }
            Parameter { name: "tech"; type: "string" }
            Parameter { name: "service"; type: "string" }
            Parameter { name: "device"; type: "string" }
        }
        Method {
            name: "createServiceSync"
            type: "string"
            Parameter { name: "settings"; type: "QVariantMap" }
            Parameter { name: "tech"; type: "string" }
            Parameter { name: "service"; type: "string" }
        }
        Method {
            name: "createServiceSync"
            type: "string"
            Parameter { name: "settings"; type: "QVariantMap" }
            Parameter { name: "tech"; type: "string" }
        }
        Method {
            name: "createServiceSync"
            type: "string"
            Parameter { name: "settings"; type: "QVariantMap" }
        }
        Method {
            name: "setSessionMode"
            Parameter { name: "sessionMode"; type: "bool" }
        }
        Method {
            name: "getTechnology"
            type: "NetworkTechnology*"
            Parameter { name: "type"; type: "string" }
        }
        Method {
            name: "servicesList"
            type: "QStringList"
            Parameter { name: "tech"; type: "string" }
        }
        Method {
            name: "savedServicesList"
            type: "QStringList"
            Parameter { name: "tech"; type: "string" }
        }
        Method { name: "savedServicesList"; type: "QStringList" }
        Method {
            name: "availableServices"
            type: "QStringList"
            Parameter { name: "tech"; type: "string" }
        }
        Method { name: "availableServices"; type: "QStringList" }
        Method { name: "technologiesList"; type: "QStringList" }
        Method {
            name: "technologyPathForService"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "technologyPathForType"
            type: "string"
            Parameter { name: "type"; type: "string" }
        }
        Method {
            name: "resetCountersForType"
            Parameter { name: "type"; type: "string" }
        }
    }
    Component {
        name: "NetworkManagerFactory"
        prototype: "QObject"
        exports: ["MeeGo.Connman/NetworkManagerFactory 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "instance"; type: "NetworkManager"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "NetworkService"
        prototype: "QObject"
        exports: ["MeeGo.Connman/NetworkService 0.2"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SecurityType"
            values: {
                "SecurityUnknown": 0,
                "SecurityNone": 1,
                "SecurityWEP": 2,
                "SecurityPSK": 3,
                "SecurityIEEE802": 4
            }
        }
        Enum {
            name: "EapMethod"
            values: {
                "EapNone": 0,
                "EapPEAP": 1,
                "EapTTLS": 2,
                "EapTLS": 3
            }
        }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "state"; type: "string"; isReadonly: true }
        Property { name: "type"; type: "string"; isReadonly: true }
        Property { name: "error"; type: "string"; isReadonly: true }
        Property { name: "security"; type: "QStringList"; isReadonly: true }
        Property { name: "securityType"; type: "SecurityType"; isReadonly: true }
        Property { name: "strength"; type: "uint"; isReadonly: true }
        Property { name: "favorite"; type: "bool"; isReadonly: true }
        Property { name: "autoConnect"; type: "bool" }
        Property { name: "path"; type: "string" }
        Property { name: "ipv4"; type: "QVariantMap"; isReadonly: true }
        Property { name: "ipv4Config"; type: "QVariantMap" }
        Property { name: "ipv6"; type: "QVariantMap"; isReadonly: true }
        Property { name: "ipv6Config"; type: "QVariantMap" }
        Property { name: "nameservers"; type: "QStringList"; isReadonly: true }
        Property { name: "nameserversConfig"; type: "QStringList" }
        Property { name: "domains"; type: "QStringList"; isReadonly: true }
        Property { name: "domainsConfig"; type: "QStringList" }
        Property { name: "proxy"; type: "QVariantMap"; isReadonly: true }
        Property { name: "proxyConfig"; type: "QVariantMap" }
        Property { name: "ethernet"; type: "QVariantMap"; isReadonly: true }
        Property { name: "roaming"; type: "bool"; isReadonly: true }
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "timeservers"; type: "QStringList"; isReadonly: true }
        Property { name: "timeserversConfig"; type: "QStringList" }
        Property { name: "eapMethod"; type: "EapMethod" }
        Property { name: "peapVersion"; type: "int" }
        Property { name: "identity"; type: "string" }
        Property { name: "passphrase"; type: "string" }
        Property { name: "eapMethodAvailable"; type: "bool"; isReadonly: true }
        Property { name: "identityAvailable"; type: "bool"; isReadonly: true }
        Property { name: "passphraseAvailable"; type: "bool"; isReadonly: true }
        Property { name: "phase2Available"; type: "bool"; isReadonly: true }
        Property { name: "caCertAvailable"; type: "bool"; isReadonly: true }
        Property { name: "caCertFileAvailable"; type: "bool"; isReadonly: true }
        Property { name: "domainSuffixMatchAvailable"; type: "bool"; isReadonly: true }
        Property { name: "privateKeyAvailable"; type: "bool"; isReadonly: true }
        Property { name: "privateKeyFileAvailable"; type: "bool"; isReadonly: true }
        Property { name: "privateKeyPassphraseAvailable"; type: "bool"; isReadonly: true }
        Property { name: "bssid"; type: "string"; isReadonly: true }
        Property { name: "maxRate"; type: "uint"; isReadonly: true }
        Property { name: "frequency"; type: "ushort"; isReadonly: true }
        Property { name: "encryptionMode"; type: "string"; isReadonly: true }
        Property { name: "hidden"; type: "bool"; isReadonly: true }
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property { name: "managed"; type: "bool"; isReadonly: true }
        Property { name: "saved"; type: "bool"; isReadonly: true }
        Property { name: "connecting"; type: "bool"; isReadonly: true }
        Property { name: "lastConnectError"; type: "string"; isReadonly: true }
        Property { name: "caCert"; type: "string" }
        Property { name: "caCertFile"; type: "string" }
        Property { name: "clientCert"; type: "string" }
        Property { name: "clientCertFile"; type: "string" }
        Property { name: "privateKey"; type: "string" }
        Property { name: "privateKeyFile"; type: "string" }
        Property { name: "privateKeyPassphrase"; type: "string" }
        Property { name: "domainSuffixMatch"; type: "string" }
        Property { name: "phase2"; type: "string" }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "string" }
        }
        Signal {
            name: "errorChanged"
            Parameter { name: "error"; type: "string" }
        }
        Signal {
            name: "securityChanged"
            Parameter { name: "security"; type: "QStringList" }
        }
        Signal {
            name: "strengthChanged"
            Parameter { name: "strength"; type: "uint" }
        }
        Signal {
            name: "favoriteChanged"
            Parameter { name: "favorite"; type: "bool" }
        }
        Signal {
            name: "autoConnectChanged"
            Parameter { name: "autoconnect"; type: "bool" }
        }
        Signal {
            name: "pathChanged"
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "ipv4Changed"
            Parameter { name: "ipv4"; type: "QVariantMap" }
        }
        Signal {
            name: "ipv4ConfigChanged"
            Parameter { name: "ipv4"; type: "QVariantMap" }
        }
        Signal {
            name: "ipv6Changed"
            Parameter { name: "ipv6"; type: "QVariantMap" }
        }
        Signal {
            name: "ipv6ConfigChanged"
            Parameter { name: "ipv6"; type: "QVariantMap" }
        }
        Signal {
            name: "nameserversChanged"
            Parameter { name: "nameservers"; type: "QStringList" }
        }
        Signal {
            name: "nameserversConfigChanged"
            Parameter { name: "nameservers"; type: "QStringList" }
        }
        Signal {
            name: "domainsChanged"
            Parameter { name: "domains"; type: "QStringList" }
        }
        Signal {
            name: "domainsConfigChanged"
            Parameter { name: "domains"; type: "QStringList" }
        }
        Signal {
            name: "proxyChanged"
            Parameter { name: "proxy"; type: "QVariantMap" }
        }
        Signal {
            name: "proxyConfigChanged"
            Parameter { name: "proxy"; type: "QVariantMap" }
        }
        Signal {
            name: "caCertChanged"
            Parameter { name: "caCert"; type: "string" }
        }
        Signal {
            name: "caCertFileChanged"
            Parameter { name: "caCertFile"; type: "string" }
        }
        Signal {
            name: "clientCertChanged"
            Parameter { name: "clientCert"; type: "string" }
        }
        Signal {
            name: "clientCertFileChanged"
            Parameter { name: "clientCertFile"; type: "string" }
        }
        Signal {
            name: "privateKeyChanged"
            Parameter { name: "privateKey"; type: "string" }
        }
        Signal {
            name: "privateKeyFileChanged"
            Parameter { name: "privateKeyFile"; type: "string" }
        }
        Signal {
            name: "privateKeyPassphraseChanged"
            Parameter { name: "privateKeyFile"; type: "string" }
        }
        Signal {
            name: "domainSuffixMatchChanged"
            Parameter { name: "domainSuffixMatch"; type: "string" }
        }
        Signal {
            name: "phase2Changed"
            Parameter { name: "phase2"; type: "string" }
        }
        Signal {
            name: "ethernetChanged"
            Parameter { name: "ethernet"; type: "QVariantMap" }
        }
        Signal {
            name: "connectRequestFailed"
            Parameter { name: "error"; type: "string" }
        }
        Signal {
            name: "typeChanged"
            Parameter { name: "type"; type: "string" }
        }
        Signal {
            name: "roamingChanged"
            Parameter { name: "roaming"; type: "bool" }
        }
        Signal {
            name: "timeserversChanged"
            Parameter { name: "timeservers"; type: "QStringList" }
        }
        Signal {
            name: "timeserversConfigChanged"
            Parameter { name: "timeservers"; type: "QStringList" }
        }
        Signal { name: "serviceConnectionStarted" }
        Signal { name: "serviceDisconnectionStarted" }
        Signal {
            name: "connectedChanged"
            Parameter { name: "connected"; type: "bool" }
        }
        Signal { name: "propertiesReady" }
        Signal {
            name: "bssidChanged"
            Parameter { name: "bssid"; type: "string" }
        }
        Signal {
            name: "maxRateChanged"
            Parameter { name: "rate"; type: "uint" }
        }
        Signal {
            name: "frequencyChanged"
            Parameter { name: "frequency"; type: "ushort" }
        }
        Signal {
            name: "encryptionModeChanged"
            Parameter { name: "mode"; type: "string" }
        }
        Signal {
            name: "hiddenChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "passphraseChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "identityChanged"
            Parameter { type: "string" }
        }
        Method { name: "requestConnect" }
        Method { name: "requestDisconnect" }
        Method { name: "remove" }
        Method {
            name: "setAutoConnect"
            Parameter { name: "autoconnect"; type: "bool" }
        }
        Method {
            name: "setIpv4Config"
            Parameter { name: "ipv4"; type: "QVariantMap" }
        }
        Method {
            name: "setIpv6Config"
            Parameter { name: "ipv6"; type: "QVariantMap" }
        }
        Method {
            name: "setNameserversConfig"
            Parameter { name: "nameservers"; type: "QStringList" }
        }
        Method {
            name: "setDomainsConfig"
            Parameter { name: "domains"; type: "QStringList" }
        }
        Method {
            name: "setProxyConfig"
            Parameter { name: "proxy"; type: "QVariantMap" }
        }
        Method {
            name: "setCACert"
            Parameter { name: "caCert"; type: "string" }
        }
        Method {
            name: "setCACertFile"
            Parameter { name: "caCertFile"; type: "string" }
        }
        Method {
            name: "setClientCert"
            Parameter { name: "clientCert"; type: "string" }
        }
        Method {
            name: "setClientCertFile"
            Parameter { name: "clientCertFile"; type: "string" }
        }
        Method {
            name: "setDomainSuffixMatch"
            Parameter { name: "domainSuffixMatch"; type: "string" }
        }
        Method {
            name: "setPhase2"
            Parameter { name: "phase2"; type: "string" }
        }
        Method { name: "resetCounters" }
    }
    Component {
        name: "NetworkSession"
        prototype: "QObject"
        exports: ["MeeGo.Connman/NetworkSession 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "state"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "bearer"; type: "string"; isReadonly: true }
        Property { name: "sessionInterface"; type: "string"; isReadonly: true }
        Property { name: "ipv4"; type: "QVariantMap"; isReadonly: true }
        Property { name: "ipv6"; type: "QVariantMap"; isReadonly: true }
        Property { name: "path"; type: "string" }
        Property { name: "allowedBearers"; type: "QStringList" }
        Property { name: "connectionType"; type: "string" }
        Signal {
            name: "allowedBearersChanged"
            Parameter { name: "bearers"; type: "QStringList" }
        }
        Signal {
            name: "connectionTypeChanged"
            Parameter { name: "type"; type: "string" }
        }
        Signal {
            name: "settingsChanged"
            Parameter { name: "settings"; type: "QVariantMap" }
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "string" }
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "bearerChanged"
            Parameter { name: "bearer"; type: "string" }
        }
        Signal {
            name: "sessionInterfaceChanged"
            Parameter { name: "sessionInterface"; type: "string" }
        }
        Signal {
            name: "ipv4Changed"
            Parameter { name: "settings"; type: "QVariantMap" }
        }
        Signal {
            name: "ipv6Changed"
            Parameter { name: "settings"; type: "QVariantMap" }
        }
        Method { name: "requestDestroy" }
        Method { name: "requestConnect" }
        Method { name: "requestDisconnect" }
        Method {
            name: "sessionSettingsUpdated"
            Parameter { name: "settings"; type: "QVariantMap" }
        }
        Method {
            name: "setPath"
            Parameter { name: "path"; type: "string" }
        }
    }
    Component {
        name: "NetworkTechnology"
        prototype: "QObject"
        exports: ["MeeGo.Connman/NetworkTechnology 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "type"; type: "string"; isReadonly: true }
        Property { name: "powered"; type: "bool" }
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "path"; type: "string" }
        Property { name: "idleTimeout"; type: "uint" }
        Property { name: "tethering"; type: "bool" }
        Property { name: "tetheringId"; type: "string" }
        Property { name: "tetheringPassphrase"; type: "string" }
        Signal {
            name: "poweredChanged"
            Parameter { name: "powered"; type: "bool" }
        }
        Signal {
            name: "connectedChanged"
            Parameter { name: "connected"; type: "bool" }
        }
        Signal { name: "scanFinished" }
        Signal {
            name: "idleTimeoutChanged"
            Parameter { name: "timeout"; type: "uint" }
        }
        Signal {
            name: "tetheringChanged"
            Parameter { name: "tetheringEnabled"; type: "bool" }
        }
        Signal {
            name: "tetheringIdChanged"
            Parameter { name: "tetheringId"; type: "string" }
        }
        Signal {
            name: "tetheringPassphraseChanged"
            Parameter { name: "passphrase"; type: "string" }
        }
        Signal {
            name: "pathChanged"
            Parameter { name: "path"; type: "string" }
        }
        Signal { name: "propertiesReady" }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "typeChanged"
            Parameter { name: "type"; type: "string" }
        }
        Method {
            name: "setPowered"
            Parameter { name: "powered"; type: "bool" }
        }
        Method { name: "scan" }
        Method {
            name: "setPath"
            Parameter { name: "path"; type: "string" }
        }
    }
    Component {
        name: "SavedServiceModel"
        prototype: "QAbstractListModel"
        exports: ["MeeGo.Connman/SavedServiceModel 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string" }
        Property { name: "sort"; type: "bool" }
        Property { name: "groupByCategory"; type: "bool" }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "dbusObjectPath"; type: "string" }
        }
        Method {
            name: "get"
            type: "NetworkService*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "TechnologyModel"
        prototype: "QAbstractListModel"
        exports: ["MeeGo.Connman/TechnologyModel 0.2"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ServiceFilter"
            values: {
                "AllServices": 0,
                "SavedServices": 1,
                "AvailableServices": 2
            }
        }
        Property { name: "name"; type: "string" }
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "powered"; type: "bool" }
        Property { name: "scanning"; type: "bool"; isReadonly: true }
        Property { name: "changesInhibited"; type: "bool" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "filter"; type: "ServiceFilter" }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "availabilityChanged"
            Parameter { name: "available"; type: "bool" }
        }
        Signal {
            name: "connectedChanged"
            Parameter { name: "connected"; type: "bool" }
        }
        Signal {
            name: "poweredChanged"
            Parameter { name: "powered"; type: "bool" }
        }
        Signal {
            name: "scanningChanged"
            Parameter { name: "scanning"; type: "bool" }
        }
        Signal {
            name: "changesInhibitedChanged"
            Parameter { name: "changesInhibited"; type: "bool" }
        }
        Signal { name: "technologiesChanged" }
        Signal { name: "scanRequestFinished" }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "dbusObjectPath"; type: "string" }
        }
        Method {
            name: "get"
            type: "NetworkService*"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "requestScan" }
    }
    Component {
        name: "UserAgent"
        prototype: "QObject"
        exports: ["MeeGo.Connman/UserAgent 0.2"]
        exportMetaObjectRevisions: [0]
        Property { name: "connectionRequestType"; type: "string" }
        Property { name: "path"; type: "string" }
        Signal {
            name: "userInputRequested"
            Parameter { name: "servicePath"; type: "string" }
            Parameter { name: "fields"; type: "QVariantMap" }
        }
        Signal { name: "userInputCanceled" }
        Signal {
            name: "errorReported"
            Parameter { name: "servicePath"; type: "string" }
            Parameter { name: "error"; type: "string" }
        }
        Signal {
            name: "browserRequested"
            Parameter { name: "servicePath"; type: "string" }
            Parameter { name: "url"; type: "string" }
        }
        Signal {
            name: "userConnectRequested"
            Parameter { name: "message"; type: "QDBusMessage" }
        }
        Signal { name: "connectionRequest" }
        Method {
            name: "sendUserReply"
            Parameter { name: "input"; type: "QVariantMap" }
        }
        Method {
            name: "sendConnectReply"
            Parameter { name: "replyMessage"; type: "string" }
            Parameter { name: "timeout"; type: "int" }
        }
        Method {
            name: "sendConnectReply"
            Parameter { name: "replyMessage"; type: "string" }
        }
        Method {
            name: "setConnectionRequestType"
            Parameter { name: "type"; type: "string" }
        }
        Method { name: "connectionRequestType"; type: "string" }
        Method { name: "path"; type: "string" }
        Method {
            name: "setAgentPath"
            Parameter { name: "path"; type: "string" }
        }
    }
    Component {
        name: "VpnConnection"
        prototype: "QObject"
        exports: ["MeeGo.Connman/VpnConnection 0.2"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ConnectionState"
            values: {
                "Idle": 0,
                "Failure": 1,
                "Configuration": 2,
                "Ready": 3,
                "Disconnect": 4
            }
        }
        Property { name: "path"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string" }
        Property { name: "host"; type: "string" }
        Property { name: "domain"; type: "string" }
        Property { name: "autoConnect"; type: "bool" }
        Property { name: "storeCredentials"; type: "bool" }
        Property { name: "state"; type: "ConnectionState"; isReadonly: true }
        Property { name: "type"; type: "string" }
        Property { name: "immutable"; type: "bool" }
        Property { name: "index"; type: "int" }
        Property { name: "ipv4"; type: "QVariantMap" }
        Property { name: "ipv6"; type: "QVariantMap" }
        Property { name: "nameservers"; type: "QStringList" }
        Property { name: "userRoutes"; type: "QVariantList" }
        Property { name: "serverRoutes"; type: "QVariantList" }
        Property { name: "properties"; type: "QVariantMap" }
        Property { name: "providerProperties"; type: "QVariantMap" }
        Property { name: "connected"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "VpnManager"
        prototype: "QObject"
        exports: ["MeeGo.Connman/VpnManager 0.2"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "connections"; type: "QVector<VpnConnection*>"; isReadonly: true }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Signal {
            name: "connectionAdded"
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "connectionRemoved"
            Parameter { name: "path"; type: "string" }
        }
        Signal { name: "connectionsRefreshed" }
        Signal { name: "connectionsCleared" }
        Method {
            name: "createConnection"
            Parameter { name: "properties"; type: "QVariantMap" }
        }
        Method {
            name: "modifyConnection"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "properties"; type: "QVariantMap" }
        }
        Method {
            name: "deleteConnection"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "activateConnection"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "deactivateConnection"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "connection"
            type: "VpnConnection*"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "get"
            type: "VpnConnection*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "path"; type: "string" }
        }
    }
    Component {
        name: "VpnModel"
        prototype: "QAbstractListModel"
        exports: ["MeeGo.Connman/VpnModel 0.2"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "vpnManager"; type: "VpnManager"; isReadonly: true; isPointer: true }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Signal {
            name: "connectedChanged"
            Parameter { name: "connected"; type: "bool" }
        }
        Method {
            name: "connectionSettings"
            type: "QVariantMap"
            Parameter { name: "path"; type: "string" }
        }
    }
}
