import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies /home/nemo/qmlexport/empty.json Sailfish.Bluetooth 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "BluetoothDeviceInfo"
        prototype: "QObject"
        exports: ["Sailfish.Bluetooth/BluetoothDeviceInfo 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "address"; type: "string" }
        Property { name: "deviceClass"; type: "uint" }
        Property { name: "deviceType"; type: "int" }
        Property { name: "icon"; type: "string"; isReadonly: true }
    }
    Component {
        name: "BluetoothDeviceTypesModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Bluetooth/BluetoothDeviceTypesModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DeviceType"
            values: {
                "UncategorizedIconType": 0,
                "Computer": 1,
                "Phone": 2,
                "Positioning": 3,
                "Camera": 4,
                "Network": 5,
                "Headset": 6,
                "Speaker": 7,
                "CarKit": 8,
                "Multimedia": 9,
                "Mouse": 10,
                "Keyboard": 11,
                "GameController": 12,
                "Toy": 13,
                "Watch": 14,
                "Tablet": 15
            }
        }
        Property { name: "classFilter"; type: "uint" }
        Property { name: "defaultIndex"; type: "int"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "indexOfType"
            type: "int"
            Parameter { name: "deviceType"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "BluetoothProfiles"
        prototype: "QObject"
        exports: ["Sailfish.Bluetooth/BluetoothProfiles 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ProfileType"
            values: {
                "ObexObjectPush": 0,
                "SyncMLServer": 1
            }
        }
        Method {
            name: "profileMatchesDeviceProperties"
            type: "bool"
            Parameter { name: "profile"; type: "ProfileType" }
            Parameter { name: "uuids"; type: "QStringList" }
            Parameter { name: "classOfDevice"; type: "uint" }
        }
        Method {
            name: "profileNameFromUuid"
            type: "string"
            Parameter { name: "uuid"; type: "string" }
        }
        Method {
            name: "serviceNameFromUuid"
            type: "string"
            Parameter { name: "uuid"; type: "string" }
        }
    }
    Component {
        name: "BluetoothSession"
        prototype: "QObject"
        exports: ["Sailfish.Bluetooth/BluetoothSession 1.0"]
        exportMetaObjectRevisions: [0]
        Method { name: "startSession" }
        Method { name: "endSession" }
        Method { name: "holdSession" }
        Method { name: "releaseSession" }
    }
    Component {
        name: "CurrentBluetoothAudioDevice"
        prototype: "QObject"
        exports: ["Sailfish.Bluetooth/CurrentBluetoothAudioDevice 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property { name: "address"; type: "string"; isReadonly: true }
        Property { name: "jollaIcon"; type: "string"; isReadonly: true }
        Property { name: "audioPlaying"; type: "bool"; isReadonly: true }
        Property { name: "supportsCallAudio"; type: "bool"; isReadonly: true }
        Property { name: "callAudioEnabled"; type: "bool"; isReadonly: true }
        Signal { name: "audioStreamDisconnected" }
        Method { name: "reset" }
        Method { name: "disableAudioStream" }
        Method { name: "enableAudioStream" }
    }
}
