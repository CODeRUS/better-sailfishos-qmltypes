import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated with the command '/usr/lib/qt5/bin/qmlplugindump -nonrelocatable Sailfish.Bluetooth 1.0'.

Module {
    Component {
        name: "BluetoothAdapter"
        prototype: "QObject"
        exports: ["Sailfish.Bluetooth/BluetoothAdapter 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PairingError"
            values: {
                "NoPairingError": 0,
                "PairingCanceled": 1,
                "PairingAuthenticationFailed": 2,
                "PairingAuthenticationRejected": 3,
                "PairingConnectionFailed": 4,
                "PairingTimeout": 5,
                "UnknownPairingError": 100
            }
        }
        Property { name: "ready"; type: "bool"; isReadonly: true }
        Property { name: "name"; type: "string" }
        Property { name: "powered"; type: "bool" }
        Property { name: "discovering"; type: "bool"; isReadonly: true }
        Property { name: "discoverable"; type: "bool" }
        Property { name: "discoverableTimeout"; type: "int" }
        Property { name: "pairable"; type: "bool" }
        Property { name: "pairableTimeout"; type: "int" }
        Property { name: "knownDevices"; type: "QStringList"; isReadonly: true }
        Property { name: "defaultName"; type: "string" }
        Signal {
            name: "createPairingFinished"
            Parameter { name: "error"; type: "int" }
        }
        Signal {
            name: "deviceFound"
            Parameter { name: "address"; type: "string" }
            Parameter { name: "properties"; type: "QVariantMap" }
        }
        Signal {
            name: "deviceDisappeared"
            Parameter { name: "address"; type: "string" }
        }
        Signal {
            name: "deviceCreated"
            Parameter { name: "path"; type: "QDBusObjectPath" }
        }
        Signal {
            name: "deviceRemoved"
            Parameter { name: "path"; type: "QDBusObjectPath" }
        }
        Method { name: "startDiscovery" }
        Method { name: "stopDiscovery" }
        Method {
            name: "createPairing"
            Parameter { name: "address"; type: "string" }
            Parameter { name: "agentPath"; type: "string" }
        }
        Method {
            name: "cancelCreatePairing"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "removePairing"
            Parameter { name: "address"; type: "string" }
        }
        Method { name: "startSession" }
        Method { name: "endSession" }
        Method { name: "holdSession" }
        Method { name: "releaseSession" }
    }
    Component {
        name: "BluetoothAgent"
        prototype: "QObject"
        exports: ["Sailfish.Bluetooth/BluetoothAgent 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PairingMode"
            values: {
                "Compare": 0,
                "EnterPasskey": 1,
                "EnterPin": 2,
                "DisplayPasskey": 3
            }
        }
        Enum {
            name: "PairingRequestDirection"
            values: {
                "IncomingPairingRequest": 0,
                "OutgoingPairingRequest": 1
            }
        }
        Property { name: "name"; type: "string" }
        Signal {
            name: "displayPasskey"
            Parameter { name: "deviceAddress"; type: "string" }
            Parameter { name: "deviceClass"; type: "uint" }
            Parameter { name: "deviceName"; type: "string" }
            Parameter { name: "key"; type: "uint" }
        }
        Signal {
            name: "requestConfirmation"
            Parameter { name: "deviceAddress"; type: "string" }
            Parameter { name: "deviceClass"; type: "uint" }
            Parameter { name: "deviceName"; type: "string" }
            Parameter { name: "key"; type: "uint" }
        }
        Signal {
            name: "requestPasskey"
            Parameter { name: "deviceAddress"; type: "string" }
            Parameter { name: "deviceClass"; type: "uint" }
            Parameter { name: "deviceName"; type: "string" }
        }
        Signal {
            name: "requestPidCode"
            Parameter { name: "deviceAddress"; type: "string" }
            Parameter { name: "deviceClass"; type: "uint" }
            Parameter { name: "deviceName"; type: "string" }
        }
        Signal {
            name: "requestAuthorization"
            Parameter { name: "deviceAddress"; type: "string" }
            Parameter { name: "deviceClass"; type: "uint" }
            Parameter { name: "deviceName"; type: "string" }
            Parameter { name: "uuid"; type: "string" }
        }
        Signal { name: "canceledRequest" }
        Signal { name: "release" }
        Method {
            name: "trustDeviceBeingPaired"
            Parameter { name: "trust"; type: "bool" }
        }
        Method {
            name: "replyRequestConfirmation"
            Parameter { name: "confirmed"; type: "bool" }
        }
        Method {
            name: "replyPasskey"
            Parameter { name: "passkey"; type: "uint" }
        }
        Method {
            name: "replyRequestPidCode"
            Parameter { name: "pidCode"; type: "string" }
        }
        Method {
            name: "replyRequestAuthorization"
            Parameter { name: "authorize"; type: "bool" }
        }
        Method { name: "generatePasskey"; type: "uint" }
        Method {
            name: "normalizePasskey"
            type: "string"
            Parameter { name: "passkey"; type: "uint" }
        }
        Method { name: "registerAsSystemAgent" }
    }
    Component {
        name: "BluetoothDeviceTypesModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Bluetooth/BluetoothDeviceTypesModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DeviceType"
            values: {
                "UncategorizedIconType": 0,
                "Computer": 1,
                "Phone": 2,
                "Positioning": 3,
                "Camera": 4,
                "Network": 5,
                "Headset": 6,
                "Speaker": 7,
                "CarKit": 8,
                "Multimedia": 9,
                "Mouse": 10,
                "Keyboard": 11,
                "GameController": 12,
                "Toy": 13
            }
        }
        Property { name: "classFilter"; type: "uint" }
        Property { name: "defaultIndex"; type: "int"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "indexOfType"
            type: "int"
            Parameter { name: "deviceType"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "deviceTypeConfigurationKey"
            type: "string"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "isAudioVideoDevice"
            type: "bool"
            Parameter { name: "device"; type: "BluetoothDevice"; isPointer: true }
        }
        Method {
            name: "isPeripheralDevice"
            type: "bool"
            Parameter { name: "device"; type: "BluetoothDevice"; isPointer: true }
        }
    }
    Component {
        name: "BluetoothProfiles"
        prototype: "QObject"
        exports: ["Sailfish.Bluetooth/BluetoothProfiles 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ProfileType"
            values: {
                "ObexObjectPush": 0,
                "SyncMLServer": 1
            }
        }
        Method {
            name: "profileMatchesDeviceProperties"
            type: "bool"
            Parameter { name: "profile"; type: "ProfileType" }
            Parameter { name: "uuids"; type: "QStringList" }
            Parameter { name: "classOfDevice"; type: "uint" }
        }
    }
    Component {
        name: "BluezMonitor"
        prototype: "QObject"
        exports: ["Sailfish.Bluetooth/BluezMonitor 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "available"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "CurrentBluetoothAudioDevice"
        prototype: "QObject"
        exports: ["Sailfish.Bluetooth/CurrentBluetoothAudioDevice 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property { name: "address"; type: "string"; isReadonly: true }
        Property { name: "jollaIcon"; type: "string"; isReadonly: true }
        Property { name: "audioPlaying"; type: "bool"; isReadonly: true }
        Property { name: "supportsCallAudio"; type: "bool"; isReadonly: true }
        Signal { name: "audioStreamDisconnected" }
        Method { name: "reset" }
        Method { name: "disableAudioStream" }
        Method { name: "enableAudioStream" }
    }
    Component {
        name: "DiscoveredDevicesModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Bluetooth/DiscoveredDevicesModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Method { name: "clear" }
    }
    Component {
        name: "KnownDevicesModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Bluetooth/KnownDevicesModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputConnectionState"
            values: {
                "InputConnecting": 0,
                "InputConnected": 1,
                "InputDisconnected": 2
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method { name: "clearNearbyDevices" }
        Method {
            name: "bluetoothDeviceForAddress"
            type: "BluetoothDevice*"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "indicateInputConnecting"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "shouldConnectAudioAfterPairing"
            type: "bool"
            Parameter { name: "device"; type: "BluetoothDevice"; isPointer: true }
        }
    }
}
