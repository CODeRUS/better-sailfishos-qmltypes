import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies dependencies/empty.json Sailfish.Crypto 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "Sailfish::Crypto::CalculateDigestRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/CalculateDigestRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QByteArray" }
        Property { name: "padding"; type: "Sailfish::Crypto::CryptoManager::SignaturePadding" }
        Property { name: "digestFunction"; type: "Sailfish::Crypto::CryptoManager::DigestFunction" }
        Property { name: "cryptoPluginName"; type: "string" }
        Property { name: "digest"; type: "QByteArray"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::CipherRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/CipherRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "CipherMode"
            values: {
                "InitializeCipher": 0,
                "UpdateCipherAuthentication": 1,
                "UpdateCipher": 2,
                "FinalizeCipher": 3
            }
        }
        Property { name: "cipherMode"; type: "CipherMode" }
        Property { name: "operation"; type: "Sailfish::Crypto::CryptoManager::Operation" }
        Property { name: "data"; type: "QByteArray" }
        Property { name: "initializationVector"; type: "QByteArray" }
        Property { name: "key"; type: "Sailfish::Crypto::Key" }
        Property { name: "blockMode"; type: "Sailfish::Crypto::CryptoManager::BlockMode" }
        Property {
            name: "encryptionPadding"
            type: "Sailfish::Crypto::CryptoManager::EncryptionPadding"
        }
        Property {
            name: "signaturePadding"
            type: "Sailfish::Crypto::CryptoManager::SignaturePadding"
        }
        Property { name: "digestFunction"; type: "Sailfish::Crypto::CryptoManager::DigestFunction" }
        Property { name: "cryptoPluginName"; type: "string" }
        Property { name: "generatedData"; type: "QByteArray"; isReadonly: true }
        Property {
            name: "verificationStatus"
            type: "Sailfish::Crypto::CryptoManager::VerificationStatus"
            isReadonly: true
        }
    }
    Component {
        name: "Sailfish::Crypto::CryptoManager"
        prototype: "QObject"
        Enum {
            name: "Algorithm"
            values: {
                "AlgorithmUnknown": 0,
                "AlgorithmCustom": 1,
                "FirstAsymmetricAlgorithm": 10,
                "AlgorithmRsa": 10,
                "AlgorithmDsa": 20,
                "AlgorithmDh": 30,
                "AlgorithmEc": 40,
                "AlgorithmEcDsa": 41,
                "AlgorithmEdDsa": 42,
                "AlgorithmEcDh": 43,
                "AlgorithmEcMqv": 44,
                "LastAsymmetricAlgorithm": 255,
                "FirstSymmetricAlgorithm": 256,
                "AlgorithmAes": 260,
                "AlgorithmGost": 270,
                "AlgorithmTdea": 280,
                "AlgorithmTdes": 280,
                "AlgorithmBlowfish": 290,
                "AlgorithmSalsa": 300,
                "AlgorithmSalsa20": 300,
                "AlgorithmChaCha": 310,
                "AlgorithmChaCha20": 310,
                "AlgorithmRc4": 320,
                "AlgorithmRc5": 330,
                "AlgorithmRc6": 340,
                "AlgorithmSquare": 350,
                "AlgorithmSerpent": 360,
                "AlgorithmPanama": 370,
                "LastSymmetricAlgorithm": 4095,
                "LastAlgorithm": 4095
            }
        }
        Enum {
            name: "BlockMode"
            values: {
                "BlockModeUnknown": 0,
                "BlockModeCustom": 1,
                "BlockModeEcb": 2,
                "BlockModeCbc": 3,
                "BlockModePcbc": 4,
                "BlockModeCfb1": 5,
                "BlockModeCfb8": 6,
                "BlockModeCfb128": 7,
                "BlockModeOfb": 8,
                "BlockModeCtr": 9,
                "BlockModeGcm": 10,
                "BlockModeLrw": 11,
                "BlockModeXex": 12,
                "BlockModeXts": 13,
                "BlockModeCmc": 14,
                "BlockModeEme": 15,
                "BlockModeCcm": 16,
                "LastBlockMode": 255
            }
        }
        Enum {
            name: "EncryptionPadding"
            values: {
                "EncryptionPaddingUnknown": 0,
                "EncryptionPaddingCustom": 1,
                "EncryptionPaddingNone": 2,
                "EncryptionPaddingPkcs7": 3,
                "EncryptionPaddingRsaOaep": 4,
                "EncryptionPaddingRsaOaepMgf1": 5,
                "EncryptionPaddingRsaPkcs1": 6,
                "EncryptionPaddingAnsiX923": 7,
                "LastEncryptionPadding": 255
            }
        }
        Enum {
            name: "SignaturePadding"
            values: {
                "SignaturePaddingUnknown": 0,
                "SignaturePaddingCustom": 1,
                "SignaturePaddingNone": 2,
                "SignaturePaddingRsaPss": 3,
                "SignaturePaddingRsaPkcs1": 6,
                "SignaturePaddingAnsiX923": 7,
                "LastSignaturePadding": 255
            }
        }
        Enum {
            name: "DigestFunction"
            values: {
                "DigestUnknown": 0,
                "DigestCustom": 1,
                "DigestMd5": 5,
                "DigestSha1": 10,
                "DigestSha2_224": 20,
                "DigestSha2_256": 21,
                "DigestSha256": 21,
                "DigestSha2_384": 22,
                "DigestSha2_512": 23,
                "DigestSha512": 23,
                "DigestSha2_512_224": 24,
                "DigestSha2_512_256": 25,
                "DigestSha3_224": 30,
                "DigestSha3_256": 31,
                "DigestSha3_384": 32,
                "DigestSha3_512": 33,
                "DigestShake128": 34,
                "DigestShake256": 35,
                "DigestGost_94": 40,
                "DigestGost_2012_256": 41,
                "DigestGost_2012_512": 42,
                "DigestBlake": 50,
                "DigestBlake2": 51,
                "DigestBlake2b": 52,
                "DigestBlake2s": 53,
                "DigestWhirlpool": 60,
                "DigestRipeMd": 70,
                "DigestRipeMd128_256": 71,
                "DigestRipeMd160": 72,
                "DigestRipeMd320": 73,
                "DigestTiger": 80,
                "DigestTiger128": 81,
                "DigestTiger160": 82,
                "DigestTiger192": 83,
                "DigestTiger2": 84,
                "DigestTiger2_128": 85,
                "DigestTiger2_160": 86,
                "DigestTiger2_192": 87,
                "DigestRadioGatun": 90,
                "LastDigestFunction": 4095
            }
        }
        Enum {
            name: "MessageAuthenticationCode"
            values: {
                "MacUnknown": 0,
                "MacCustom": 1,
                "MacHmac": 10,
                "MacCmac": 20,
                "MacVmac": 30,
                "MacPoly1305": 40,
                "LastMac": 255
            }
        }
        Enum {
            name: "KeyDerivationFunction"
            values: {
                "KdfUnknown": 0,
                "KdfCustom": 1,
                "KdfPkcs5Pbkdf2": 10,
                "KdfHkdf": 20,
                "KdfBcrypt": 30,
                "KdfScrypt": 40,
                "KdfArgon2": 50,
                "KdfArgon2d": 50,
                "KdfArgon2i": 51,
                "KdfArgon2id": 52,
                "KdfLyra2": 60,
                "LastKdf": 255
            }
        }
        Enum {
            name: "EllipticCurve"
            values: {
                "CurveUnknown": 0,
                "CurveSect163k1": 10,
                "CurveSect163r1": 11,
                "CurveSect163r2": 12,
                "CurveSect193r1": 13,
                "CurveSect193r2": 14,
                "CurveSect233k1": 15,
                "CurveSect233r1": 16,
                "CurveSect239k1": 17,
                "CurveSect283k1": 18,
                "CurveSect283r1": 19,
                "CurveSect409k1": 20,
                "CurveSect409r1": 21,
                "CurveSect571k1": 22,
                "CurveSect571r1": 23,
                "CurveSecp160k1": 50,
                "CurveSecp160r1": 51,
                "CurveSecp160r2": 52,
                "CurveSecp192k1": 53,
                "CurveSecp192r1": 54,
                "CurveSecp224k1": 55,
                "CurveSecp224r1": 56,
                "CurveSecp256k1": 57,
                "CurveSecp256r1": 58,
                "CurveSecp384r1": 59,
                "CurveSecp521r1": 60,
                "CurveNistK163": 10,
                "CurveNistB163": 12,
                "CurveNistK233": 15,
                "CurveNistB233": 16,
                "CurveNistK283": 18,
                "CurveNistB283": 19,
                "CurveNistK409": 20,
                "CurveNistB409": 21,
                "CurveNistK571": 22,
                "CurveNistB571": 22,
                "CurveNistP192": 54,
                "CurveNistP224": 56,
                "CurveNistP256": 58,
                "CurveNistP384": 59,
                "CurveNistP521": 60,
                "CurveAX962prime192v1": 54,
                "CurveAX962prime192v2": 101,
                "CurveAX962prime192v3": 102,
                "CurveAX962prime239v1": 103,
                "CurveAX962prime239v2": 104,
                "CurveAX962prime239v3": 105,
                "CurveAX962prime256v1": 58,
                "CurveAX962c2pnb163v1": 150,
                "CurveAX962c2pnb163v2": 151,
                "CurveAX962c2pnb163v3": 152,
                "CurveAX962c2pnb176v1": 153,
                "CurveAX962c2tnb191v1": 154,
                "CurveAX962c2tnb191v2": 155,
                "CurveAX962c2tnb191v3": 156,
                "CurveAX962c2pnb208w1": 157,
                "CurveAX962c2tnb239v1": 158,
                "CurveAX962c2tnb239v2": 159,
                "CurveAX962c2tnb239v3": 160,
                "CurveAX962c2pnb272w1": 161,
                "CurveAX962c2pnb304w1": 162,
                "CurveAX962c2tnb359v1": 163,
                "CurveAX962c2pnb368w1": 164,
                "CurveAX962c2tnb431r1": 165,
                "CurveWapWsgIdmEcidWtls1": 200,
                "CurveWapWsgIdmEcidWtls2": 201,
                "CurveWapWsgIdmEcidWtls3": 202,
                "CurveWapWsgIdmEcidWtls4": 203,
                "CurveWapWsgIdmEcidWtls5": 204,
                "CurveWapWsgIdmEcidWtls6": 205,
                "CurveWapWsgIdmEcidWtls7": 206,
                "CurveWapWsgIdmEcidWtls8": 207,
                "CurveWapWsgIdmEcidWtls9": 208,
                "CurveWapWsgIdmEcidWtls10": 209,
                "CurveWapWsgIdmEcidWtls11": 210,
                "CurveWapWsgIdmEcidWtls12": 211,
                "Curve25519": 250,
                "Curve41417": 251,
                "Curve1174": 252,
                "CurveM221": 253,
                "CurveE222": 254,
                "CurveE382": 255,
                "CurveM383": 256,
                "Curve448": 257,
                "CurveEd448Goldilocks": 258,
                "CurveM511": 259,
                "CurveE521": 260,
                "CurveBrainpoolP160r1": 300,
                "CurveBrainpoolP160t1": 301,
                "CurveBrainpoolP192r1": 302,
                "CurveBrainpoolP192t1": 303,
                "CurveBrainpoolP224r1": 304,
                "CurveBrainpoolP224t1": 305,
                "CurveBrainpoolP256r1": 306,
                "CurveBrainpoolP256t1": 307,
                "CurveBrainpoolP320r1": 308,
                "CurveBrainpoolP320t1": 309,
                "CurveBrainpoolP384r1": 310,
                "CurveBrainpoolP384t1": 311,
                "CurveBrainpoolP512r1": 312,
                "CurveBrainpoolP512t1": 313,
                "LastCurve": 4096
            }
        }
        Enum {
            name: "Operation"
            values: {
                "OperationUnknown": 0,
                "OperationCustom": 1,
                "OperationSign": 2,
                "OperationVerify": 4,
                "OperationEncrypt": 8,
                "OperationDecrypt": 16,
                "OperationCalculateDigest": 32,
                "OperationCalculateMac": 64,
                "OperationDeriveKey": 128
            }
        }
        Enum {
            name: "Operations"
            values: {
                "OperationUnknown": 0,
                "OperationCustom": 1,
                "OperationSign": 2,
                "OperationVerify": 4,
                "OperationEncrypt": 8,
                "OperationDecrypt": 16,
                "OperationCalculateDigest": 32,
                "OperationCalculateMac": 64,
                "OperationDeriveKey": 128
            }
        }
        Enum {
            name: "VerificationStatusType"
            values: {
                "VerificationStatusUnknown": 0,
                "VerificationSucceeded": 1,
                "VerificationFailed": 2,
                "VerificationSignatureInvalid": 4,
                "VerificationSignatureExpired": 8,
                "VerificationKeyExpired": 16,
                "VerificationKeyRevoked": 32,
                "VerificationKeyInvalid": 64
            }
        }
        Enum {
            name: "VerificationStatus"
            values: {
                "VerificationStatusUnknown": 0,
                "VerificationSucceeded": 1,
                "VerificationFailed": 2,
                "VerificationSignatureInvalid": 4,
                "VerificationSignatureExpired": 8,
                "VerificationKeyExpired": 16,
                "VerificationKeyRevoked": 32,
                "VerificationKeyInvalid": 64
            }
        }
    }
    Component {
        name: "Sailfish::Crypto::DecryptRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/DecryptRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QByteArray" }
        Property { name: "initializationVector"; type: "QByteArray" }
        Property { name: "key"; type: "Sailfish::Crypto::Key" }
        Property { name: "blockMode"; type: "Sailfish::Crypto::CryptoManager::BlockMode" }
        Property { name: "padding"; type: "Sailfish::Crypto::CryptoManager::EncryptionPadding" }
        Property { name: "authenticationData"; type: "QByteArray" }
        Property { name: "authenticationTag"; type: "QByteArray" }
        Property { name: "cryptoPluginName"; type: "string" }
        Property { name: "plaintext"; type: "QByteArray"; isReadonly: true }
        Property {
            name: "verificationStatus"
            type: "Sailfish::Crypto::CryptoManager::VerificationStatus"
            isReadonly: true
        }
    }
    Component {
        name: "Sailfish::Crypto::DeleteStoredKeyRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/DeleteStoredKeyRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "identifier"; type: "Sailfish::Crypto::Key::Identifier" }
    }
    Component {
        name: "Sailfish::Crypto::DhKeyPairGenerationParameters"
        prototype: "Sailfish::Crypto::KeyPairGenerationParameters"
        exports: ["Sailfish.Crypto/DhKeyPairGenerationParameters 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "modulusLength"; type: "int" }
        Property { name: "privateExponentLength"; type: "int" }
        Property { name: "generateFamilyParameters"; type: "bool" }
        Property { name: "modulus"; type: "QByteArray" }
        Property { name: "base"; type: "QByteArray" }
    }
    Component {
        name: "Sailfish::Crypto::DsaKeyPairGenerationParameters"
        prototype: "Sailfish::Crypto::KeyPairGenerationParameters"
        exports: ["Sailfish.Crypto/DsaKeyPairGenerationParameters 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "modulusLength"; type: "int" }
        Property { name: "primeFactorLength"; type: "int" }
        Property { name: "generateFamilyParameters"; type: "bool" }
        Property { name: "modulus"; type: "QByteArray" }
        Property { name: "primeFactor"; type: "QByteArray" }
        Property { name: "base"; type: "QByteArray" }
    }
    Component {
        name: "Sailfish::Crypto::EcKeyPairGenerationParameters"
        prototype: "Sailfish::Crypto::KeyPairGenerationParameters"
        exports: ["Sailfish.Crypto/EcKeyPairGenerationParameters 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "ellipticCurve"; type: "Sailfish::Crypto::CryptoManager::EllipticCurve" }
    }
    Component {
        name: "Sailfish::Crypto::EncryptRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/EncryptRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QByteArray" }
        Property { name: "initializationVector"; type: "QByteArray" }
        Property { name: "key"; type: "Sailfish::Crypto::Key" }
        Property { name: "blockMode"; type: "Sailfish::Crypto::CryptoManager::BlockMode" }
        Property { name: "padding"; type: "Sailfish::Crypto::CryptoManager::EncryptionPadding" }
        Property { name: "authenticationData"; type: "QByteArray" }
        Property { name: "cryptoPluginName"; type: "string" }
        Property { name: "ciphertext"; type: "QByteArray"; isReadonly: true }
        Property { name: "authenticationTag"; type: "QByteArray"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::GenerateKeyRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/GenerateKeyRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "cryptoPluginName"; type: "string" }
        Property {
            name: "keyDerivationParameters"
            type: "Sailfish::Crypto::KeyDerivationParameters"
        }
        Property {
            name: "keyPairGenerationParameters"
            type: "Sailfish::Crypto::KeyPairGenerationParameters"
        }
        Property { name: "keyTemplate"; type: "Sailfish::Crypto::Key" }
        Property { name: "generatedKey"; type: "Sailfish::Crypto::Key"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::GenerateRandomDataRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/GenerateRandomDataRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "cryptoPluginName"; type: "string" }
        Property { name: "csprngEngineName"; type: "string" }
        Property { name: "numberBytes"; type: "qulonglong" }
        Property { name: "generatedData"; type: "QByteArray"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::GenerateStoredKeyRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/GenerateStoredKeyRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "cryptoPluginName"; type: "string" }
        Property { name: "interactionParameters"; type: "Sailfish::Crypto::InteractionParameters" }
        Property {
            name: "keyDerivationParameters"
            type: "Sailfish::Crypto::KeyDerivationParameters"
        }
        Property {
            name: "keyPairGenerationParameters"
            type: "Sailfish::Crypto::KeyPairGenerationParameters"
        }
        Property { name: "keyTemplate"; type: "Sailfish::Crypto::Key" }
        Property { name: "generatedKeyReference"; type: "Sailfish::Crypto::Key"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::ImportKeyRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/ImportKeyRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "cryptoPluginName"; type: "string" }
        Property { name: "interactionParameters"; type: "Sailfish::Crypto::InteractionParameters" }
        Property { name: "data"; type: "QByteArray" }
        Property { name: "importedKey"; type: "Sailfish::Crypto::Key"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::ImportStoredKeyRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/ImportStoredKeyRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "cryptoPluginName"; type: "string" }
        Property { name: "interactionParameters"; type: "Sailfish::Crypto::InteractionParameters" }
        Property { name: "data"; type: "QByteArray" }
        Property { name: "keyTemplate"; type: "Sailfish::Crypto::Key" }
        Property { name: "importedKeyReference"; type: "Sailfish::Crypto::Key"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::InteractionParameters"
        exports: ["Sailfish.Crypto/InteractionParameters 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InputType"
            values: {
                "UnknownInput": 0,
                "AuthenticationInput": 1,
                "ConfirmationInput": 2,
                "NumericInput": 4,
                "AlphaNumericInput": 8,
                "FingerprintInput": 16,
                "IrisInput": 32,
                "RetinaInput": 64,
                "LastInputType": 65536
            }
        }
        Enum {
            name: "EchoMode"
            values: {
                "UnknownEcho": 0,
                "NormalEcho": 1,
                "PasswordEcho": 2,
                "NoEcho": 3,
                "LastEchoMode": 63
            }
        }
        Enum {
            name: "Operation"
            values: {
                "UnknownOperation": 0,
                "RequestUserData": 1,
                "UnlockDatabase": 2,
                "LockDatabase": 4,
                "ModifyLockDatabase": 8,
                "UnlockPlugin": 16,
                "LockPlugin": 32,
                "ModifyLockPlugin": 64,
                "CreateCollection": 128,
                "UnlockCollection": 256,
                "LockCollection": 512,
                "ModifyLockCollection": 1024,
                "DeleteCollection": 2048,
                "ReadSecret": 4096,
                "StoreSecret": 8192,
                "UnlockSecret": 16384,
                "LockSecret": 32768,
                "ModifyLockSecret": 65536,
                "DeleteSecret": 131072,
                "Encrypt": 262144,
                "Decrypt": 524288,
                "Sign": 1048576,
                "Verify": 2097152,
                "DeriveDigest": 4194304,
                "DeriveMac": 8388608,
                "DeriveKey": 16777216,
                "StoreKey": 33554432,
                "ImportKey": 67108864,
                "LastOperation": 1073741824
            }
        }
        Enum {
            name: "Prompt"
            values: {
                "Message": 0,
                "Instruction": 16,
                "NewInstruction": 17,
                "RepeatInstruction": 18,
                "Accept": 32,
                "Cancel": 48
            }
        }
        Property { name: "keyName"; type: "string" }
        Property { name: "collectionName"; type: "string" }
        Property { name: "pluginName"; type: "string" }
        Property { name: "applicationId"; type: "string" }
        Property { name: "operation"; type: "Operation" }
        Property { name: "authenticationPluginName"; type: "string" }
        Property { name: "promptText"; type: "Sailfish::Crypto::InteractionParameters::PromptText" }
        Property { name: "inputType"; type: "InputType" }
        Property { name: "echoMode"; type: "EchoMode" }
    }
    Component {
        name: "Sailfish::Crypto::InteractionParameters::PromptText"
        exports: ["Sailfish.Crypto/PromptText 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "message"; type: "string" }
        Property { name: "instruction"; type: "string" }
        Property { name: "newInstruction"; type: "string" }
        Property { name: "repeatInstruction"; type: "string" }
        Property { name: "accept"; type: "string" }
        Property { name: "cancel"; type: "string" }
    }
    Component {
        name: "Sailfish::Crypto::Key"
        exports: ["Sailfish.Crypto/Key 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Origin"
            values: {
                "OriginUnknown": 0,
                "OriginImported": 1,
                "OriginDevice": 2,
                "OriginSecureDevice": 3
            }
        }
        Enum {
            name: "Component"
            values: {
                "NoData": 0,
                "MetaData": 1,
                "PublicKeyData": 2,
                "PrivateKeyData": 4,
                "SecretKeyData": 4
            }
        }
        Enum {
            name: "Components"
            values: {
                "NoData": 0,
                "MetaData": 1,
                "PublicKeyData": 2,
                "PrivateKeyData": 4,
                "SecretKeyData": 4
            }
        }
        Property { name: "name"; type: "string" }
        Property { name: "collectionName"; type: "string" }
        Property { name: "storagePluginName"; type: "string" }
        Property { name: "origin"; type: "Origin" }
        Property { name: "algorithm"; type: "Sailfish::Crypto::CryptoManager::Algorithm" }
        Property { name: "operations"; type: "Sailfish::Crypto::CryptoManager::Operations" }
        Property { name: "componentConstraints"; type: "Sailfish::Crypto::Key::Components" }
        Property { name: "size"; type: "int" }
        Property { name: "publicKey"; type: "QByteArray" }
        Property { name: "privateKey"; type: "QByteArray" }
        Property { name: "secretKey"; type: "QByteArray" }
        Property { name: "customParameters"; type: "QVector<QByteArray>" }
        Property { name: "filterDataFields"; type: "QStringList"; isReadonly: true }
        Method {
            name: "filterData"
            type: "string"
            Parameter { name: "field"; type: "string" }
        }
        Method {
            name: "setFilterData"
            Parameter { name: "field"; type: "string" }
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "hasFilterData"
            type: "bool"
            Parameter { name: "field"; type: "string" }
        }
    }
    Component {
        name: "Sailfish::Crypto::KeyPairGenerationParameters"
        exports: ["Sailfish.Crypto/KeyPairGenerationParameters 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "KeyPairType"
            values: {
                "KeyPairUnknown": 0,
                "KeyPairCustom": 1,
                "KeyPairDh": 30,
                "KeyPairDsa": 20,
                "KeyPairRsa": 10,
                "KeyPairEc": 40,
                "LastKeyPairType": 4095
            }
        }
        Property { name: "keyPairType"; type: "KeyPairType" }
        Property { name: "customParameters"; type: "QVariantMap" }
    }
    Component {
        name: "Sailfish::Crypto::Plugin::CryptoManager"
        prototype: "Sailfish::Crypto::CryptoManager"
        exports: ["Sailfish.Crypto/CryptoManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "defaultCryptoPluginName"; type: "string"; isReadonly: true }
        Property { name: "defaultCryptoStoragePluginName"; type: "string"; isReadonly: true }
        Method { name: "constructResult"; type: "Sailfish::Crypto::Result" }
        Method { name: "constructKey"; type: "Sailfish::Crypto::Key" }
        Method {
            name: "constructKey"
            type: "Sailfish::Crypto::Key"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "collectionName"; type: "string" }
            Parameter { name: "storagePluginName"; type: "string" }
        }
        Method {
            name: "constructIdentifier"
            type: "Sailfish::Crypto::Key::Identifier"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "collectionName"; type: "string" }
            Parameter { name: "storagePluginName"; type: "string" }
        }
        Method { name: "constructRsaKeygenParams"; type: "QVariant" }
        Method {
            name: "constructRsaKeygenParams"
            type: "QVariant"
            Parameter { name: "args"; type: "QVariantMap" }
        }
        Method { name: "constructEcKeygenParams"; type: "QVariant" }
        Method {
            name: "constructEcKeygenParams"
            type: "QVariant"
            Parameter { name: "args"; type: "QVariantMap" }
        }
        Method { name: "constructDsaKeygenParams"; type: "QVariant" }
        Method {
            name: "constructDsaKeygenParams"
            type: "QVariant"
            Parameter { name: "args"; type: "QVariantMap" }
        }
        Method { name: "constructDhKeygenParams"; type: "QVariant" }
        Method {
            name: "constructDhKeygenParams"
            type: "QVariant"
            Parameter { name: "args"; type: "QVariantMap" }
        }
    }
    Component {
        name: "Sailfish::Crypto::Plugin::PluginInfoRequestWrapper"
        prototype: "Sailfish::Crypto::PluginInfoRequest"
        exports: ["Sailfish.Crypto/PluginInfoRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "cryptoPlugins"; type: "QVariantList"; isReadonly: true }
        Property { name: "storagePlugins"; type: "QVariantList"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::Plugin::StoredKeyIdentifiersRequestWrapper"
        prototype: "Sailfish::Crypto::StoredKeyIdentifiersRequest"
        exports: ["Sailfish.Crypto/StoredKeyIdentifiersRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "identifiers"; type: "QVariantList"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::PluginInfo"
        exports: ["Sailfish.Crypto/PluginInfo 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Unknown": 0,
                "Available": 1,
                "MasterUnlocked": 2,
                "PluginUnlocked": 4,
                "PluginSupportsLocking": 8,
                "PluginSupportsSetLockCode": 16
            }
        }
        Enum {
            name: "StatusFlags"
            values: {
                "Unknown": 0,
                "Available": 1,
                "MasterUnlocked": 2,
                "PluginUnlocked": 4,
                "PluginSupportsLocking": 8,
                "PluginSupportsSetLockCode": 16
            }
        }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "version"; type: "int"; isReadonly: true }
        Property { name: "statusFlags"; type: "StatusFlags"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::PluginInfoRequest"
        prototype: "Sailfish::Crypto::Request"
        Property {
            name: "cryptoPlugins"
            type: "QVector<Sailfish::Crypto::PluginInfo>"
            isReadonly: true
        }
        Property {
            name: "storagePlugins"
            type: "QVector<Sailfish::Crypto::PluginInfo>"
            isReadonly: true
        }
    }
    Component {
        name: "Sailfish::Crypto::Request"
        prototype: "QObject"
        exports: ["Sailfish.Crypto/Request 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Inactive": 0,
                "Active": 1,
                "Finished": 2
            }
        }
        Property { name: "manager"; type: "Sailfish::Crypto::CryptoManager"; isPointer: true }
        Property { name: "customParameters"; type: "QVariantMap" }
        Property { name: "status"; type: "Sailfish::Crypto::Request::Status"; isReadonly: true }
        Property { name: "result"; type: "Sailfish::Crypto::Result"; isReadonly: true }
        Method { name: "startRequest" }
        Method { name: "waitForFinished" }
    }
    Component {
        name: "Sailfish::Crypto::Result"
        exports: ["Sailfish.Crypto/Result 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ResultCode"
            values: {
                "Succeeded": 0,
                "Pending": 1,
                "Failed": 2
            }
        }
        Enum {
            name: "ErrorCode"
            values: {
                "NoError": 0,
                "UnknownError": 2,
                "SerializationError": 3,
                "StorageError": 4,
                "DaemonError": 5,
                "DiscoveryError": 6,
                "InvalidCryptographicServiceProvider": 10,
                "InvalidStorageProvider": 11,
                "InvalidKeyIdentifier": 12,
                "DuplicateKeyIdentifier": 13,
                "CryptoManagerNotInitializedError": 14,
                "InvalidInitializationVectorError": 15,
                "InvalidAuthenticationTagError": 16,
                "OperationNotSupportedError": 20,
                "BlockModeNotSupportedError": 21,
                "EncryptionPaddingNotSupportedError": 22,
                "SignaturePaddingNotSupportedError": 23,
                "DigestNotSupportedError": 24,
                "EmptySecretKeyError": 30,
                "EmptyPrivateKeyError": 31,
                "EmptyPublicKeyError": 32,
                "EmptyDataError": 33,
                "EmptySignatureError": 34,
                "CryptoPluginEncryptionError": 40,
                "CryptoPluginDecryptionError": 41,
                "CryptoPluginRandomDataError": 42,
                "CryptoPluginCipherSessionError": 43,
                "CryptoPluginKeyGenerationError": 44,
                "CryptoPluginKeyImportError": 45,
                "CryptoPluginDigestError": 46,
                "CryptoPluginSigningError": 47,
                "CryptoPluginVerificationError": 48,
                "CryptoPluginAuthenticationTagError": 49,
                "CryptoPluginInvalidCipherSessionToken": 50,
                "CryptoPluginIncorrectPassphrase": 51,
                "CryptoPluginIsLockedError": 52,
                "NetworkError": 98,
                "NetworkSslError": 99,
                "HttpContinue": 100,
                "HttpSwitchingProtocol": 101,
                "HttpOk": 200,
                "HttpCreated": 201,
                "HttpAccepted": 202,
                "HttpNonAuthoritativeInformation": 203,
                "HttpNoContent": 204,
                "HttpResetContent": 205,
                "HttpPartialContent": 206,
                "HttpMultipleChoice": 300,
                "HttpMovedPermanently": 301,
                "HttpFound": 302,
                "HttpSeeOther": 303,
                "HttpNotModified": 304,
                "HttpUseProxy": 305,
                "HttpUnused": 306,
                "HttpTemporaryRedirect": 307,
                "HttpPermanentRedirect": 308,
                "HttpBadRequest": 400,
                "HttpUnauthorized": 401,
                "HttpPaymentRequired": 402,
                "HttpForbidden": 403,
                "HttpNotFound": 404,
                "HttpMethodNotAllowed": 405,
                "HttpNotAcceptable": 406,
                "HttpProxyAuthenticationRequired": 407,
                "HttpRequestTimeout": 408,
                "HttpConflict": 409,
                "HttpGone": 410,
                "HttpLengthRequired": 411,
                "HttpPreconditionFailed": 412,
                "HttpPayloadTooLarge": 413,
                "HttpUriTooLong": 414,
                "HttpUnsupportedMediaType": 415,
                "HttpRequestRangeNotSatisfiable": 416,
                "HttpExpectationFailed": 417,
                "HttpMisdirectedRequest": 421,
                "HttpUpgradeRequired": 426,
                "HttpPreconditionRequired": 428,
                "HttpTooManyRequests": 429,
                "HttpRequestHeaderFieldsTooLarge": 431,
                "HttpUnavailableForLegalReasons": 451,
                "HttpInternalServerError": 500,
                "HttpNotImplemented": 501,
                "HttpBadGateway": 502,
                "HttpServiceUnavailable": 503,
                "HttpGatewayTimeout": 504,
                "HttpVersionNotSupported": 505,
                "HttpVariantAlsoNegotiates": 506,
                "HttpInsufficientStorage": 507,
                "HttpNetworkAuthenticationRequired": 511,
                "OtherError": 1024
            }
        }
        Property { name: "errorMessage"; type: "string" }
        Property { name: "storageErrorCode"; type: "int" }
        Property { name: "errorCode"; type: "Sailfish::Crypto::Result::ErrorCode" }
        Property { name: "code"; type: "Sailfish::Crypto::Result::ResultCode" }
        Method {
            name: "setErrorCode"
            Parameter { name: "c"; type: "int" }
        }
        Method {
            name: "setCode"
            Parameter { name: "c"; type: "int" }
        }
    }
    Component {
        name: "Sailfish::Crypto::RsaKeyPairGenerationParameters"
        prototype: "Sailfish::Crypto::KeyPairGenerationParameters"
        exports: ["Sailfish.Crypto/RsaKeyPairGenerationParameters 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "modulusLength"; type: "int" }
        Property { name: "numberPrimes"; type: "int" }
        Property { name: "publicExponent"; type: "qulonglong" }
    }
    Component {
        name: "Sailfish::Crypto::SeedRandomDataGeneratorRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/SeedRandomDataGeneratorRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "cryptoPluginName"; type: "string" }
        Property { name: "csprngEngineName"; type: "string" }
        Property { name: "seedData"; type: "QByteArray" }
        Property { name: "entropyEstimate"; type: "double" }
    }
    Component {
        name: "Sailfish::Crypto::SignRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/SignRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QByteArray" }
        Property { name: "key"; type: "Sailfish::Crypto::Key" }
        Property { name: "padding"; type: "Sailfish::Crypto::CryptoManager::SignaturePadding" }
        Property { name: "digestFunction"; type: "Sailfish::Crypto::CryptoManager::DigestFunction" }
        Property { name: "cryptoPluginName"; type: "string" }
        Property { name: "signature"; type: "QByteArray"; isReadonly: true }
        Property { name: "signatureLength"; type: "int"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::StoredKeyIdentifiersRequest"
        prototype: "Sailfish::Crypto::Request"
        Property { name: "storagePluginName"; type: "string" }
        Property { name: "collectionName"; type: "string" }
        Property {
            name: "identifiers"
            type: "QVector<Sailfish::Crypto::Key::Identifier>"
            isReadonly: true
        }
    }
    Component {
        name: "Sailfish::Crypto::StoredKeyRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/StoredKeyRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "identifier"; type: "Sailfish::Crypto::Key::Identifier" }
        Property { name: "keyComponents"; type: "Sailfish::Crypto::Key::Components" }
        Property { name: "storedKey"; type: "Sailfish::Crypto::Key"; isReadonly: true }
    }
    Component {
        name: "Sailfish::Crypto::VerifyRequest"
        prototype: "Sailfish::Crypto::Request"
        exports: ["Sailfish.Crypto/VerifyRequest 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "signature"; type: "QByteArray" }
        Property { name: "data"; type: "QByteArray" }
        Property { name: "key"; type: "Sailfish::Crypto::Key" }
        Property { name: "padding"; type: "Sailfish::Crypto::CryptoManager::SignaturePadding" }
        Property { name: "digestFunction"; type: "Sailfish::Crypto::CryptoManager::DigestFunction" }
        Property { name: "cryptoPluginName"; type: "string" }
        Property {
            name: "verificationStatus"
            type: "Sailfish::Crypto::CryptoManager::VerificationStatus"
            isReadonly: true
        }
    }
}
