import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies dependencies/empty.json Sailfish.Office.PDF 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "PDFAnnotation"
        prototype: "QObject"
        exports: ["Sailfish.Office.PDF/Annotation 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SubType"
            values: {
                "Base": 0,
                "Text": 1,
                "Line": 2,
                "GeometricFigure": 3,
                "Highlight": 4,
                "Stamp": 5,
                "InkPath": 6,
                "Link": 7,
                "Caret": 8,
                "FileAttachment": 9,
                "Sound": 10,
                "Movie": 11,
                "Screen": 12,
                "Widget": 13
            }
        }
        Property { name: "document"; type: "PDFDocument"; isReadonly: true; isPointer: true }
        Property { name: "page"; type: "int"; isReadonly: true }
        Property { name: "boundary"; type: "QRectF"; isReadonly: true }
        Property { name: "author"; type: "string" }
        Property { name: "contents"; type: "string" }
        Property { name: "creationDate"; type: "QDateTime"; isReadonly: true }
        Property { name: "modificationDate"; type: "QDateTime"; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "type"; type: "SubType"; isReadonly: true }
        Signal { name: "attached" }
        Method {
            name: "attach"
            Parameter { name: "document"; type: "PDFDocument"; isPointer: true }
            Parameter { name: "selection"; type: "PDFSelection"; isPointer: true }
        }
        Method { name: "remove" }
    }
    Component {
        name: "PDFCanvas"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Office.PDF/Canvas 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "document"; type: "PDFDocument"; isPointer: true }
        Property { name: "flickable"; type: "QQuickItem"; isPointer: true }
        Property { name: "spacing"; type: "float" }
        Property { name: "linkColor"; type: "QColor" }
        Property { name: "pagePlaceholderColor"; type: "QColor" }
        Property { name: "currentPage"; type: "int"; isReadonly: true }
        Property { name: "linkWiggle"; type: "float" }
        Signal { name: "pageLayoutChanged" }
        Method {
            name: "pageRectangle"
            type: "QRectF"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "fromPageToItem"
            type: "QRectF"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "fromPageToItem"
            type: "QPointF"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "point"; type: "QPointF" }
        }
    }
    Component {
        name: "PDFCaretAnnotation"
        prototype: "PDFAnnotation"
        exports: ["Sailfish.Office.PDF/CaretAnnotation 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "PDFDocument"
        prototype: "QObject"
        exports: ["Sailfish.Office.PDF/Document 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "string" }
        Property { name: "autoSavePath"; type: "string" }
        Property { name: "pageCount"; type: "int"; isReadonly: true }
        Property { name: "tocModel"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "loaded"; type: "bool"; isReadonly: true }
        Property { name: "failure"; type: "bool"; isReadonly: true }
        Property { name: "locked"; type: "bool"; isReadonly: true }
        Property { name: "modified"; type: "bool"; isReadonly: true }
        Property { name: "searching"; type: "bool"; isReadonly: true }
        Property { name: "searchModel"; type: "QObject"; isReadonly: true; isPointer: true }
        Signal {
            name: "pageModified"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "subpart"; type: "QRectF" }
        }
        Signal { name: "documentLoadedChanged" }
        Signal { name: "documentFailedChanged" }
        Signal { name: "documentLockedChanged" }
        Signal { name: "documentModifiedChanged" }
        Signal {
            name: "linksFinished"
            Parameter { name: "page"; type: "int" }
            Parameter { name: "links"; type: "LinkList" }
        }
        Signal {
            name: "pageFinished"
            Parameter { name: "requestId"; type: "int" }
            Parameter { name: "resolution"; type: "int" }
            Parameter { name: "subpart"; type: "QRect" }
            Parameter { name: "page"; type: "QImage" }
            Parameter { name: "extraData"; type: "int" }
        }
        Signal {
            name: "pageSizesFinished"
            Parameter { name: "heights"; type: "QList<QSizeF>" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "string" }
        }
        Method {
            name: "setAutoSavePath"
            Parameter { name: "filename"; type: "string" }
        }
        Method {
            name: "requestUnLock"
            Parameter { name: "password"; type: "string" }
        }
        Method {
            name: "requestLinksAtPage"
            Parameter { name: "page"; type: "int" }
        }
        Method {
            name: "prioritizeRequest"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "size"; type: "int" }
            Parameter { name: "subpart"; type: "QRect" }
        }
        Method {
            name: "prioritizeRequest"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "size"; type: "int" }
        }
        Method {
            name: "cancelPageRequest"
            type: "bool"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "requestPageSizes" }
        Method {
            name: "search"
            Parameter { name: "search"; type: "string" }
            Parameter { name: "startPage"; type: "uint" }
        }
        Method {
            name: "search"
            Parameter { name: "search"; type: "string" }
        }
        Method {
            name: "cancelSearch"
            Parameter { name: "resetModel"; type: "bool" }
        }
        Method { name: "cancelSearch" }
        Method { name: "onSearchFinished" }
        Method {
            name: "onSearchProgress"
            Parameter { name: "fraction"; type: "float" }
            Parameter { name: "matches"; type: "QList<QPair<int,QRectF> >" }
        }
        Method { name: "loadFinished" }
        Method {
            name: "jobFinished"
            Parameter { name: "job"; type: "PDFJob"; isPointer: true }
        }
        Method {
            name: "onPageModified"
            Parameter { name: "page"; type: "int" }
            Parameter { name: "subpart"; type: "QRectF" }
        }
    }
    Component {
        name: "PDFHighlightAnnotation"
        prototype: "PDFAnnotation"
        exports: ["Sailfish.Office.PDF/HighlightAnnotation 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HighlightType"
            values: {
                "Highlight": 0,
                "Squiggly": 1,
                "Underline": 2,
                "StrikeOut": 3
            }
        }
        Property { name: "style"; type: "HighlightType" }
        Method {
            name: "attach"
            Parameter { name: "document"; type: "PDFDocument"; isPointer: true }
            Parameter { name: "selection"; type: "PDFSelection"; isPointer: true }
        }
    }
    Component {
        name: "PDFLinkArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Office.PDF/LinkArea 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "canvas"; type: "PDFCanvas"; isPointer: true }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "clickedBox"; type: "QRectF"; isReadonly: true }
        Property { name: "selection"; type: "PDFSelection"; isPointer: true }
        Signal {
            name: "positionChanged"
            Parameter { name: "at"; type: "QPointF" }
        }
        Signal { name: "released" }
        Signal {
            name: "clicked"
            Parameter { name: "clickAt"; type: "QPointF" }
        }
        Signal { name: "doubleClicked" }
        Signal {
            name: "linkClicked"
            Parameter { name: "linkTarget"; type: "QUrl" }
        }
        Signal {
            name: "gotoClicked"
            Parameter { name: "page"; type: "int" }
            Parameter { name: "top"; type: "float" }
            Parameter { name: "left"; type: "float" }
        }
        Signal { name: "selectionClicked" }
        Signal {
            name: "annotationClicked"
            Parameter { name: "annotation"; type: "PDFAnnotation"; isPointer: true }
        }
        Signal {
            name: "annotationLongPress"
            Parameter { name: "annotation"; type: "PDFAnnotation"; isPointer: true }
        }
        Signal {
            name: "longPress"
            Parameter { name: "pressAt"; type: "QPointF" }
        }
    }
    Component {
        name: "PDFSelection"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Office.PDF/Selection 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "canvas"; type: "PDFCanvas"; isPointer: true }
        Property { name: "handle1"; type: "QPointF" }
        Property { name: "handle2"; type: "QPointF" }
        Property { name: "handle1Height"; type: "float"; isReadonly: true }
        Property { name: "handle2Height"; type: "float"; isReadonly: true }
        Property { name: "text"; type: "string"; isReadonly: true }
        Property { name: "wiggle"; type: "float" }
        Method {
            name: "selectAt"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method { name: "unselect" }
    }
    Component {
        name: "PDFTextAnnotation"
        prototype: "PDFAnnotation"
        exports: ["Sailfish.Office.PDF/TextAnnotation 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "IconType"
            values: {
                "Note": 0,
                "Comment": 1,
                "Key": 2,
                "Help": 3,
                "NewParagraph": 4,
                "Paragraph": 5,
                "Insert": 6,
                "Cross": 7,
                "Circle": 8
            }
        }
        Property { name: "icon"; type: "IconType" }
        Method {
            name: "attach"
            Parameter { name: "document"; type: "PDFDocument"; isPointer: true }
            Parameter { name: "selection"; type: "PDFSelection"; isPointer: true }
        }
        Method {
            name: "attachAt"
            Parameter { name: "document"; type: "PDFDocument"; isPointer: true }
            Parameter { name: "page"; type: "uint" }
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
    }
}
