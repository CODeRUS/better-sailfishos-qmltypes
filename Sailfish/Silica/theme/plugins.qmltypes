import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate Sailfish.Silica.theme 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "Silica::Theme"
        prototype: "QObject"
        exports: ["Sailfish.Silica.theme/Theme 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PresenceMode"
            values: {
                "PresenceAvailable": 0,
                "PresenceAway": 1,
                "PresenceBusy": 2,
                "PresenceOffline": 3
            }
        }
        Enum {
            name: "Style"
            values: {
                "StyleLight": 0,
                "StyleDark": 1
            }
        }
        Property { name: "pixelRatio"; type: "float"; isReadonly: true }
        Property { name: "style"; type: "Style"; isReadonly: true }
        Property { name: "fontFamilyHeading"; type: "string"; isReadonly: true }
        Property { name: "fontFamily"; type: "string"; isReadonly: true }
        Property { name: "fontSizeTiny"; type: "int"; isReadonly: true }
        Property { name: "fontSizeExtraSmall"; type: "int"; isReadonly: true }
        Property { name: "fontSizeSmall"; type: "int"; isReadonly: true }
        Property { name: "fontSizeMedium"; type: "int"; isReadonly: true }
        Property { name: "fontSizeLarge"; type: "int"; isReadonly: true }
        Property { name: "fontSizeExtraLarge"; type: "int"; isReadonly: true }
        Property { name: "fontSizeHuge"; type: "int"; isReadonly: true }
        Property { name: "fontSizeTinyBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeExtraSmallBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeSmallBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeMediumBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeLargeBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeExtraLargeBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeHugeBase"; type: "int"; isReadonly: true }
        Property { name: "itemSizeExtraSmall"; type: "float"; isReadonly: true }
        Property { name: "itemSizeSmall"; type: "float"; isReadonly: true }
        Property { name: "itemSizeMedium"; type: "float"; isReadonly: true }
        Property { name: "itemSizeLarge"; type: "float"; isReadonly: true }
        Property { name: "itemSizeExtraLarge"; type: "float"; isReadonly: true }
        Property { name: "itemSizeHuge"; type: "float"; isReadonly: true }
        Property { name: "iconSizeExtraSmall"; type: "float"; isReadonly: true }
        Property { name: "iconSizeSmall"; type: "float"; isReadonly: true }
        Property { name: "iconSizeSmallPlus"; type: "float"; isReadonly: true }
        Property { name: "iconSizeMedium"; type: "float"; isReadonly: true }
        Property { name: "iconSizeLarge"; type: "float"; isReadonly: true }
        Property { name: "iconSizeExtraLarge"; type: "float"; isReadonly: true }
        Property { name: "iconSizeLauncher"; type: "float"; isReadonly: true }
        Property { name: "launcherIconDirectories"; type: "QStringList"; isReadonly: true }
        Property { name: "buttonWidthSmall"; type: "float"; isReadonly: true }
        Property { name: "buttonWidthMedium"; type: "float"; isReadonly: true }
        Property { name: "buttonWidthLarge"; type: "float"; isReadonly: true }
        Property { name: "coverSizeSmall"; type: "QSize"; isReadonly: true }
        Property { name: "coverSizeLarge"; type: "QSize"; isReadonly: true }
        Property { name: "paddingSmall"; type: "float"; isReadonly: true }
        Property { name: "paddingMedium"; type: "float"; isReadonly: true }
        Property { name: "paddingLarge"; type: "float"; isReadonly: true }
        Property { name: "horizontalPageMargin"; type: "float"; isReadonly: true }
        Property { name: "_homePageMargin"; type: "float"; isReadonly: true }
        Property { name: "flickDeceleration"; type: "float"; isReadonly: true }
        Property { name: "maximumFlickVelocity"; type: "float"; isReadonly: true }
        Property { name: "pageStackIndicatorWidth"; type: "float"; isReadonly: true }
        Property { name: "highlightBackgroundOpacity"; type: "float"; isReadonly: true }
        Property { name: "highlightColor"; type: "QColor"; isReadonly: true }
        Property { name: "highlightBackgroundColor"; type: "QColor"; isReadonly: true }
        Property { name: "highlightDimmerColor"; type: "QColor"; isReadonly: true }
        Property { name: "primaryColor"; type: "QColor"; isReadonly: true }
        Property { name: "secondaryColor"; type: "QColor"; isReadonly: true }
        Property { name: "overlayBackgroundColor"; type: "QColor"; isReadonly: true }
        Property { name: "secondaryHighlightColor"; type: "QColor"; isReadonly: true }
        Property { name: "backgroundImage"; type: "QUrl"; isReadonly: true }
        Property { name: "startDragDistance"; type: "int"; isReadonly: true }
        Property { name: "minimumPressHighlightTime"; type: "int"; isReadonly: true }
        Property { name: "_webviewCustomLayoutWidthScalingFactor"; type: "float"; isReadonly: true }
        Method {
            name: "highlightText"
            type: "string"
            Parameter { name: "text"; type: "string" }
            Parameter { name: "pattern"; type: "QVariant" }
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "rgba"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "presenceColor"
            type: "QColor"
            Parameter { name: "presenceMode"; type: "PresenceMode" }
        }
        Method {
            name: "iconForMimeType"
            type: "string"
            Parameter { name: "mimeType"; type: "string" }
        }
    }
}
