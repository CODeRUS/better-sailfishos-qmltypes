import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Sailfish.Silica 1.0'

Module {
    Component {
        name: "DeclarativeBounceEffect"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["Sailfish.Silica/BounceEffect 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "difference"; type: "float"; isReadonly: true }
        Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Method {
            name: "handlePress"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method {
            name: "handleMove"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method { name: "handleRelease" }
    }
    Component {
        name: "DeclarativeBusyIndicatorSize"
        prototype: "QObject"
        exports: ["Sailfish.Silica/BusyIndicatorSize 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Size"
            values: {
                "ExtraSmall": 0,
                "Small": 1,
                "Medium": 2,
                "Large": 3
            }
        }
    }
    Component {
        name: "DeclarativeClipboard"
        prototype: "QObject"
        exports: ["Sailfish.Silica/Clipboard 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
        Property { name: "hasText"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "DeclarativeConfigApi"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/Config 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DemoMode"
            values: {
                "Normal": 0,
                "Demo": 1,
                "Retail": 2
            }
        }
        Property { name: "wayland"; type: "bool"; isReadonly: true }
        Property { name: "demoMode"; type: "DemoMode"; isReadonly: true }
        Property { name: "layoutGrid"; type: "bool"; isReadonly: true }
        Property { name: "sailfishVersion"; type: "float"; isReadonly: true }
        Method {
            name: "setCompositorWindows"
            Parameter { type: "QList<QObject*>" }
        }
    }
    Component {
        name: "DeclarativeCover"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica/Cover 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Inactive": 0,
                "Activating": 1,
                "Active": 2,
                "Deactivating": 3
            }
        }
        Enum {
            name: "Size"
            values: {
                "Small": 0,
                "Large": 1
            }
        }
        Property { name: "status"; type: "DeclarativeCover::Status"; isReadonly: true }
        Property { name: "allowResize"; type: "bool" }
        Property { name: "size"; type: "DeclarativeCover::Size"; isReadonly: true }
        Property { name: "transparent"; type: "bool" }
        Signal {
            name: "requestResize"
            Parameter { name: "w"; type: "float" }
            Parameter { name: "h"; type: "float" }
        }
        Signal { name: "applicationWindowChanged" }
        Method {
            name: "tryResize"
            Parameter { name: "w"; type: "float" }
            Parameter { name: "h"; type: "float" }
            Parameter { name: "allowResize"; type: "bool" }
        }
    }
    Component {
        name: "DeclarativeCoverAction"
        prototype: "QObject"
        exports: ["Sailfish.Silica/CoverAction 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "iconSource"; type: "QUrl" }
        Signal { name: "triggered" }
    }
    Component {
        name: "DeclarativeCoverActionList"
        defaultProperty: "actions"
        prototype: "QObject"
        exports: ["Sailfish.Silica/CoverActionList 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "actions"; type: "DeclarativeCoverAction"; isList: true; isReadonly: true }
        Property { name: "enabled"; type: "bool" }
        Property { name: "iconBackground"; type: "bool" }
        Property { name: "window"; type: "QWindow"; isPointer: true }
        Signal {
            name: "windowChanged"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method {
            name: "trigger"
            Parameter { name: "id"; type: "int" }
        }
    }
    Component {
        name: "DeclarativeCoverWindow"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["Sailfish.Silica.private/CoverWindow 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "cover"; type: "DeclarativeCover"; isPointer: true }
        Property { name: "mainWindow"; type: "QObject"; isPointer: true }
        Method {
            name: "setContentSize"
            Parameter { name: "w"; type: "float" }
            Parameter { name: "h"; type: "float" }
        }
    }
    Component {
        name: "DeclarativeDateTime"
        prototype: "QObject"
        exports: ["Sailfish.Silica/DateTime 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HourMode"
            values: {
                "DefaultHours": 0,
                "TwentyFourHours": 1,
                "TwelveHours": 2
            }
        }
    }
    Component {
        name: "DeclarativeDialogResult"
        prototype: "QObject"
        exports: ["Sailfish.Silica/DialogResult 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Result"
            values: {
                "None": 0,
                "Accepted": 1,
                "Rejected": 2
            }
        }
    }
    Component {
        name: "DeclarativeDialogStatus"
        prototype: "QObject"
        exports: ["Sailfish.Silica/DialogStatus 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Closed": 0,
                "Opening": 1,
                "Opened": 2,
                "Closing": 3
            }
        }
    }
    Component {
        name: "DeclarativeDimmedRegion"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica/DimmedRegion 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Property { name: "area"; type: "QRectF" }
        Property { name: "target"; type: "QQuickItem"; isPointer: true }
        Property { name: "exclude"; type: "QQuickItem"; isList: true; isReadonly: true }
        Method { name: "updateRegion" }
    }
    Component {
        name: "DeclarativeDock"
        prototype: "QObject"
        exports: ["Sailfish.Silica/Dock 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Dock"
            values: {
                "Left": 0,
                "Top": 1,
                "Right": 2,
                "Bottom": 3
            }
        }
    }
    Component {
        name: "DeclarativeDragFilter"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/DragFilter 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "canceled"; type: "bool"; isReadonly: true }
        Property { name: "screenMargin"; type: "float" }
        Property { name: "orientations"; type: "Qt::Orientations" }
        Method {
            name: "begin"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Method { name: "end" }
        Method { name: "cancelClick" }
    }
    Component {
        name: "DeclarativeEnterKey"
        prototype: "QObject"
        exports: ["Sailfish.Silica/EnterKey 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "text"; type: "string" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Signal { name: "clicked" }
    }
    Component {
        name: "DeclarativeFocusBehavior"
        prototype: "QObject"
        exports: ["Sailfish.Silica/FocusBehavior 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FocusBehavior"
            values: {
                "ClearItemFocus": 0,
                "ClearPageFocus": 1,
                "KeepFocus": 2
            }
        }
    }
    Component {
        name: "DeclarativeFormatter"
        prototype: "QObject"
        exports: [
            "Sailfish.Silica/Format 1.0",
            "Sailfish.Silica/Formatter 1.0"
        ]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0, 0]
        Enum {
            name: "FormatType"
            values: {
                "Timepoint": 0,
                "TimepointRelative": 1,
                "TimepointRelativeCurrentDay": 2,
                "TimepointRelativeCurrentDayDetailed": 3,
                "TimepointSectionRelative": 4,
                "TimepointSectionHistorical": 5,
                "WeekdayNameStandalone": 6,
                "DurationElapsed": 7,
                "DurationElapsedShort": 8,
                "TimeValueTwelveHours": 9,
                "TimeValueTwentyFourHours": 10,
                "TimeValue": 11,
                "DurationShort": 12,
                "DurationLong": 13,
                "DateFull": 14,
                "DateLong": 15,
                "MonthNameStandalone": 16,
                "MonthNameStandaloneShort": 17,
                "DateMedium": 18,
                "DateMediumWithoutYear": 19
            }
        }
        Enum {
            name: "ArticleType"
            values: {
                "AnteMeridiemIndicator": 0,
                "PostMeridiemIndicator": 1
            }
        }
        Enum {
            name: "TextFormatType"
            values: {
                "Ascii7Bit": 0,
                "PortableFilename": 1
            }
        }
        Method {
            name: "formatDate"
            type: "string"
            Parameter { name: "dateTime"; type: "QDateTime" }
            Parameter { name: "formatType"; type: "int" }
        }
        Method {
            name: "formatArticle"
            type: "string"
            Parameter { name: "articleType"; type: "int" }
        }
        Method {
            name: "formatDuration"
            type: "string"
            Parameter { name: "seconds"; type: "int" }
            Parameter { name: "formatType"; type: "int" }
        }
        Method {
            name: "formatFileSize"
            type: "string"
            Parameter { name: "bytes"; type: "qlonglong" }
            Parameter { name: "precision"; type: "int" }
        }
        Method {
            name: "formatFileSize"
            type: "string"
            Parameter { name: "bytes"; type: "qlonglong" }
        }
        Method {
            name: "formatText"
            type: "string"
            Parameter { name: "input"; type: "string" }
            Parameter { name: "formatType"; type: "int" }
        }
        Method {
            name: "_needsSpaceBetweenNames"
            type: "bool"
            Parameter { name: "first"; type: "string" }
            Parameter { name: "second"; type: "string" }
        }
        Method {
            name: "_joinNames"
            type: "string"
            Parameter { name: "first"; type: "string" }
            Parameter { name: "second"; type: "string" }
        }
        Method {
            name: "trId"
            type: "string"
            Parameter { name: "id"; type: "string" }
            Parameter { name: "catalog"; type: "string" }
            Parameter { name: "n"; type: "int" }
            Parameter { name: "localeName"; type: "string" }
        }
        Method {
            name: "trId"
            type: "string"
            Parameter { name: "id"; type: "string" }
            Parameter { name: "catalog"; type: "string" }
            Parameter { name: "n"; type: "int" }
        }
        Method {
            name: "trId"
            type: "string"
            Parameter { name: "id"; type: "string" }
            Parameter { name: "catalog"; type: "string" }
        }
        Method {
            name: "textDirection"
            type: "int"
            Parameter { name: "s"; type: "string" }
        }
    }
    Component {
        name: "DeclarativeGlassItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica/GlassItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Property { name: "dimmed"; type: "bool" }
        Property { name: "cache"; type: "bool" }
        Property { name: "radius"; type: "float" }
        Property { name: "falloffRadius"; type: "float" }
        Property { name: "defaultFalloffRadius"; type: "float"; isReadonly: true }
        Property { name: "ratio"; type: "float" }
        Property { name: "dashed"; type: "bool" }
        Property { name: "dashOffset"; type: "float" }
        Property { name: "dashLength"; type: "float" }
        Property { name: "dashMargin"; type: "float" }
        Property { name: "brightness"; type: "float" }
    }
    Component {
        name: "DeclarativeItemPool"
        defaultProperty: "component"
        prototype: "QObject"
        exports: ["Sailfish.Silica/ItemPool 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "component"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "itemCreated" }
        Method { name: "createItem"; type: "QObject*" }
        Method {
            name: "reserve"
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "get"
            type: "QObject*"
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "free"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "DeclarativeOpacityRamp"
        prototype: "QObject"
        exports: ["Sailfish.Silica/OpacityRamp 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Direction"
            values: {
                "LeftToRight": 0,
                "RightToLeft": 1,
                "TopToBottom": 2,
                "BottomToTop": 3
            }
        }
    }
    Component {
        name: "DeclarativeOrientation"
        prototype: "QObject"
        exports: ["Sailfish.Silica/Orientation 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Orientation"
            values: {
                "None": 0,
                "Portrait": 1,
                "Landscape": 2,
                "PortraitInverted": 4,
                "LandscapeInverted": 8,
                "PortraitMask": 5,
                "LandscapeMask": 10,
                "All": 15
            }
        }
        Enum {
            name: "Orientations"
            values: {
                "None": 0,
                "Portrait": 1,
                "Landscape": 2,
                "PortraitInverted": 4,
                "LandscapeInverted": 8,
                "PortraitMask": 5,
                "LandscapeMask": 10,
                "All": 15
            }
        }
    }
    Component {
        name: "DeclarativePageNavigation"
        prototype: "QObject"
        exports: ["Sailfish.Silica/PageNavigation 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Navigation"
            values: {
                "None": 0,
                "Back": 1,
                "Forward": 2
            }
        }
    }
    Component {
        name: "DeclarativePageStackAction"
        prototype: "QObject"
        exports: ["Sailfish.Silica/PageStackAction 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Action"
            values: {
                "Push": 0,
                "Replace": 1,
                "Pop": 2
            }
        }
        Enum {
            name: "OperationType"
            values: {
                "Animated": 0,
                "Immediate": 1
            }
        }
    }
    Component {
        name: "DeclarativePageStackBase"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica/PageStackBase 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "backNavigation"; type: "bool" }
        Property { name: "forwardNavigation"; type: "bool" }
        Property { name: "_backFlickDifference"; type: "float"; isReadonly: true }
        Property { name: "_forwardFlickDifference"; type: "float"; isReadonly: true }
        Property { name: "_currentContainer"; type: "QQuickItem"; isPointer: true }
        Property { name: "currentPage"; type: "QQuickItem"; isPointer: true }
        Property { name: "_noGrabbing"; type: "bool" }
        Signal { name: "backFlickDifferenceChanged" }
        Signal { name: "forwardFlickDifferenceChanged" }
        Signal { name: "currentContainerChanged" }
        Signal { name: "noGrabbingChanged" }
        Signal { name: "pressed" }
        Signal { name: "released" }
        Signal { name: "canceled" }
        Method {
            name: "handlePress"
            type: "bool"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method {
            name: "handleMove"
            type: "bool"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method { name: "handleRelease" }
        Method {
            name: "resolveImportPage"
            type: "string"
            Parameter { name: "page"; type: "string" }
        }
    }
    Component {
        name: "DeclarativePageStatus"
        prototype: "QObject"
        exports: ["Sailfish.Silica/PageStatus 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Inactive": 0,
                "Activating": 1,
                "Active": 2,
                "Deactivating": 3
            }
        }
    }
    Component {
        name: "DeclarativePreeditText"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/PreeditText 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
    }
    Component {
        name: "DeclarativeQuickScrollButtonBase"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/QuickScrollButtonBase 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "flickable"; type: "QQuickItem"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        name: "DeclarativeStandardPaths"
        prototype: "QObject"
        exports: ["Sailfish.Silica/StandardPaths 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "cache"; type: "string"; isReadonly: true }
        Property { name: "data"; type: "string"; isReadonly: true }
        Property { name: "documents"; type: "string"; isReadonly: true }
        Property { name: "download"; type: "string"; isReadonly: true }
        Property { name: "genericData"; type: "string"; isReadonly: true }
        Property { name: "music"; type: "string"; isReadonly: true }
        Property { name: "pictures"; type: "string"; isReadonly: true }
        Property { name: "videos"; type: "string"; isReadonly: true }
        Property { name: "home"; type: "string"; isReadonly: true }
    }
    Component {
        name: "DeclarativeTextBaseItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/TextBaseItem 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HAlignment"
            values: {
                "AlignLeft": 1,
                "AlignRight": 2,
                "AlignHCenter": 4
            }
        }
        Property { name: "horizontalAlignment"; type: "HAlignment" }
        Property { name: "explicitHorizontalAlignment"; type: "bool"; isReadonly: true }
        Method {
            name: "setImplicitHorizontalAlignment"
            Parameter { name: "alignment"; type: "HAlignment" }
        }
    }
    Component {
        name: "DeclarativeTouchBlocker"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica/TouchBlocker 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "target"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        name: "DeclarativeTouchInteraction"
        prototype: "QObject"
        exports: ["Sailfish.Silica/TouchInteraction 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Direction"
            values: {
                "Left": 0,
                "Up": 1,
                "Right": 2,
                "Down": 3
            }
        }
        Enum {
            name: "Mode"
            values: {
                "Swipe": 0,
                "EdgeSwipe": 1,
                "Pull": 2
            }
        }
    }
    Component {
        name: "DeclarativeTruncationMode"
        prototype: "QObject"
        exports: ["Sailfish.Silica/TruncationMode 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Mode"
            values: {
                "None": 0,
                "Elide": 1,
                "Fade": 2
            }
        }
    }
    Component {
        name: "DeclarativeUnderline"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/Underline 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "primaryColor"; type: "QColor" }
        Property { name: "secondaryColor"; type: "QColor" }
    }
    Component {
        name: "DeclarativeUtil"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/Util 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "weekNumber"
            type: "int"
            Parameter { name: "datetime"; type: "QDateTime" }
        }
        Method {
            name: "asyncInvoke"
            Parameter { name: "callable"; type: "QJSValue" }
        }
    }
    Component {
        name: "DeclarativeVisibilityCull"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/VisibilityCull 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "target"; type: "QQuickItem"; isPointer: true }
        Property { name: "enabled"; type: "bool" }
    }
    Component {
        name: "DeclarativeWindow"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/Window 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "orientation"; type: "DeclarativeOrientation::Orientation"; isReadonly: true }
        Property { name: "_pageOrientation"; type: "DeclarativeOrientation::Orientation" }
        Property { name: "deviceOrientation"; type: "DeclarativeOrientation::Orientation" }
        Property {
            name: "defaultAllowedOrientations"
            type: "DeclarativeOrientation::Orientations"
            isReadonly: true
        }
        Property { name: "_allowedOrientations"; type: "DeclarativeOrientation::Orientations" }
        Property { name: "screenRotation"; type: "int"; isReadonly: true }
        Property { name: "_backgroundVisible"; type: "bool" }
        Property { name: "_persistentOpenGLContext"; type: "bool" }
        Property { name: "_persistentSceneGraph"; type: "bool" }
        Property { name: "_haveCoverHint"; type: "bool" }
        Property { name: "_backgroundColor"; type: "QColor" }
        Property { name: "_coverIsPrimaryWindow"; type: "bool" }
        Property { name: "_coverVisible"; type: "bool" }
        Property { name: "_proxyWindow"; type: "QQuickWindow"; isPointer: true }
        Property { name: "_mainWindow"; type: "QWindow"; isPointer: true }
        Signal { name: "_orientationLockedChanged" }
        Signal { name: "backgroundColorChanged" }
        Signal { name: "backgroundVisibleChanged" }
        Signal { name: "coverIsPrimaryWindowChanged" }
        Signal { name: "coverVisibleChanged" }
        Signal { name: "proxyWindowChanged" }
        Signal { name: "mainWindowChanged" }
        Signal {
            name: "switcherWindowChanged"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Signal { name: "haveCoverChanged" }
        Method { name: "activate" }
        Method { name: "deactivate" }
        Method { name: "_processPendingDeletions" }
        Method {
            name: "_selectOrientation"
            type: "int"
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method {
            name: "_selectOrientation"
            type: "int"
            Parameter { type: "int" }
        }
        Method {
            name: "_setCover"
            Parameter { name: "window"; type: "QObject"; isPointer: true }
        }
        Method { name: "_updateCoverVisibility" }
    }
    Component {
        name: "FormattingProxyModel"
        prototype: "QIdentityProxyModel"
        exports: ["Sailfish.Silica/FormattingProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "formattedProperties"; type: "QVariantList" }
    }
    Component {
        name: "MInverseMouseArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica/InverseMouseArea 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "enabled"; type: "bool" }
        Property { name: "stealPress"; type: "bool" }
        Signal {
            name: "pressedOutside"
            Parameter { name: "mouseX"; type: "int" }
            Parameter { name: "mouseY"; type: "int" }
        }
        Signal {
            name: "clickedOutside"
            Parameter { name: "mouseX"; type: "int" }
            Parameter { name: "mouseY"; type: "int" }
        }
        Method { name: "cancelTouch" }
    }
    Component {
        name: "PulleyMenuLogic"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/PulleyMenuLogic 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pullDownType"; type: "bool" }
        Property { name: "flickable"; type: "QObject"; isPointer: true }
        Property { name: "dragDistance"; type: "float"; isReadonly: true }
        Signal { name: "finalPositionReached" }
        Signal {
            name: "flickableChanged"
            Parameter { name: "arg"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "pullDownTypeChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "animateFlick"
            Parameter { name: "duration"; type: "float" }
            Parameter { name: "position"; type: "float" }
        }
        Method { name: "outOfBounds"; type: "bool" }
        Method { name: "monitorFlick" }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
    }
    Component { name: "QIdentityProxyModel"; prototype: "QAbstractProxyModel" }
    Component {
        name: "QQuickRootItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Method {
            name: "setWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "h"; type: "int" }
        }
    }
    Component {
        name: "QQuickWindow"
        defaultProperty: "data"
        prototype: "QWindow"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "sceneGraphAboutToStop" }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal { name: "activeFocusItemChanged"; revision: 1 }
        Method { name: "update" }
        Method { name: "releaseResources" }
    }
    Component {
        name: "QWindow"
        prototype: "QObject"
        Enum {
            name: "Visibility"
            values: {
                "Hidden": 0,
                "AutomaticVisibility": 1,
                "Windowed": 2,
                "Minimized": 3,
                "Maximized": 4,
                "FullScreen": 5
            }
        }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "visible"; type: "bool" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "visibility"; revision: 1; type: "Visibility" }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "float" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            revision: 1
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Signal { name: "activeChanged"; revision: 1 }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "float" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "requestUpdate"; revision: 3 }
    }
    Component {
        name: "RecyclingDelegate"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica/RecyclingDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pool"; type: "DeclarativeItemPool"; isPointer: true }
        Property { name: "item"; type: "QQuickItem"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "RemorseCache"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/RemorseCache 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "item"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        name: "Silica::Screen"
        prototype: "QObject"
        exports: ["Sailfish.Silica/Screen 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SizeCategory"
            values: {
                "Small": 0,
                "Medium": 1,
                "Large": 2,
                "ExtraLarge": 3
            }
        }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
        Property { name: "sizeCategory"; type: "SizeCategory"; isReadonly: true }
    }
    Component {
        name: "Silica::Theme"
        prototype: "QObject"
        exports: ["Sailfish.Silica/Theme 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PresenceMode"
            values: {
                "PresenceAvailable": 0,
                "PresenceAway": 1,
                "PresenceBusy": 2,
                "PresenceOffline": 3
            }
        }
        Property { name: "fontFamilyHeading"; type: "string"; isReadonly: true }
        Property { name: "fontFamily"; type: "string"; isReadonly: true }
        Property { name: "fontSizeTiny"; type: "int"; isReadonly: true }
        Property { name: "fontSizeExtraSmall"; type: "int"; isReadonly: true }
        Property { name: "fontSizeSmall"; type: "int"; isReadonly: true }
        Property { name: "fontSizeMedium"; type: "int"; isReadonly: true }
        Property { name: "fontSizeLarge"; type: "int"; isReadonly: true }
        Property { name: "fontSizeExtraLarge"; type: "int"; isReadonly: true }
        Property { name: "fontSizeHuge"; type: "int"; isReadonly: true }
        Property { name: "itemSizeExtraSmall"; type: "float"; isReadonly: true }
        Property { name: "itemSizeSmall"; type: "float"; isReadonly: true }
        Property { name: "itemSizeMedium"; type: "float"; isReadonly: true }
        Property { name: "itemSizeLarge"; type: "float"; isReadonly: true }
        Property { name: "itemSizeExtraLarge"; type: "float"; isReadonly: true }
        Property { name: "itemSizeHuge"; type: "float"; isReadonly: true }
        Property { name: "iconSizeExtraSmall"; type: "float"; isReadonly: true }
        Property { name: "iconSizeSmall"; type: "float"; isReadonly: true }
        Property { name: "iconSizeSmallPlus"; type: "float"; isReadonly: true }
        Property { name: "iconSizeMedium"; type: "float"; isReadonly: true }
        Property { name: "iconSizeLarge"; type: "float"; isReadonly: true }
        Property { name: "iconSizeExtraLarge"; type: "float"; isReadonly: true }
        Property { name: "iconSizeLauncher"; type: "float"; isReadonly: true }
        Property { name: "launcherIconDirectories"; type: "QStringList"; isReadonly: true }
        Property { name: "buttonWidthSmall"; type: "float"; isReadonly: true }
        Property { name: "buttonWidthMedium"; type: "float"; isReadonly: true }
        Property { name: "buttonWidthLarge"; type: "float"; isReadonly: true }
        Property { name: "coverSizeSmall"; type: "QSize"; isReadonly: true }
        Property { name: "coverSizeLarge"; type: "QSize"; isReadonly: true }
        Property { name: "paddingSmall"; type: "float"; isReadonly: true }
        Property { name: "paddingMedium"; type: "float"; isReadonly: true }
        Property { name: "paddingLarge"; type: "float"; isReadonly: true }
        Property { name: "horizontalPageMargin"; type: "float"; isReadonly: true }
        Property { name: "flickDeceleration"; type: "float"; isReadonly: true }
        Property { name: "maximumFlickVelocity"; type: "float"; isReadonly: true }
        Property { name: "pixelRatio"; type: "float"; isReadonly: true }
        Property { name: "pageStackIndicatorWidth"; type: "float"; isReadonly: true }
        Property { name: "highlightBackgroundOpacity"; type: "float"; isReadonly: true }
        Property { name: "highlightColor"; type: "QColor"; isReadonly: true }
        Property { name: "highlightBackgroundColor"; type: "QColor"; isReadonly: true }
        Property { name: "highlightDimmerColor"; type: "QColor"; isReadonly: true }
        Property { name: "primaryColor"; type: "QColor"; isReadonly: true }
        Property { name: "secondaryColor"; type: "QColor"; isReadonly: true }
        Property { name: "secondaryHighlightColor"; type: "QColor"; isReadonly: true }
        Property { name: "backgroundImage"; type: "QUrl"; isReadonly: true }
        Property { name: "startDragDistance"; type: "int"; isReadonly: true }
        Property { name: "minimumPressHighlightTime"; type: "int"; isReadonly: true }
        Property { name: "_webviewCustomLayoutWidthScalingFactor"; type: "float"; isReadonly: true }
        Method {
            name: "highlightText"
            type: "string"
            Parameter { name: "text"; type: "string" }
            Parameter { name: "pattern"; type: "QVariant" }
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "rgba"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "presenceColor"
            type: "QColor"
            Parameter { name: "presenceMode"; type: "PresenceMode" }
        }
        Method {
            name: "iconForMimeType"
            type: "string"
            Parameter { name: "mimeType"; type: "string" }
        }
    }
    Component {
        name: "TextLayoutModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Silica.private/TextLayoutModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Role"
            values: {
                "LineNumberRole": 256,
                "TextRole": 257,
                "LengthRole": 258,
                "WidthRole": 259,
                "HeightRole": 260,
                "ElidedRole": 261
            }
        }
        Property { name: "text"; type: "string" }
        Property { name: "font"; type: "QFont" }
        Property { name: "width"; type: "float" }
        Property { name: "wrapMode"; type: "int" }
        Property { name: "maximumLineCount"; type: "int" }
        Property { name: "lineCount"; type: "int"; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "Remorse"
        exports: ["Sailfish.Silica.private/Remorse 0.0"]
        exportMetaObjectRevisions: [0]
        isSingleton: true
        Property { name: "_itemComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "_popupComponent"; type: "QQmlComponent"; isPointer: true }
        Method {
            name: "_create"
            type: "QVariant"
            Parameter { name: "component"; type: "QVariant" }
            Parameter { name: "parent"; type: "QVariant" }
        }
        Method {
            name: "itemAction"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "action"; type: "QVariant" }
            Parameter { name: "timeout"; type: "QVariant" }
        }
        Method {
            name: "popupAction"
            type: "QVariant"
            Parameter { name: "page"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "action"; type: "QVariant" }
            Parameter { name: "timeout"; type: "QVariant" }
        }
    }
}
