import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies dependencies/Sailfish.Silica.private.json Sailfish.Silica.private 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "AnimatedLoader"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/AnimatedLoader 1.0"]
        exportMetaObjectRevisions: [0]
        attachedType: "AnimatedLoaderAttached"
        Enum {
            name: "Status"
            values: {
                "Null": 0,
                "Ready": 1,
                "Loading": 2,
                "Error": 3
            }
        }
        Property { name: "source"; type: "QJSValue" }
        Property { name: "active"; type: "bool" }
        Property { name: "asynchronous"; type: "bool" }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "animating"; type: "bool" }
        Property { name: "transitioning"; type: "bool"; isReadonly: true }
        Property { name: "transitionEnabled"; type: "bool" }
        Property { name: "item"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "replacedItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Signal { name: "transitionComplete" }
        Signal { name: "aboutToComplete" }
        Signal { name: "loaded" }
        Signal {
            name: "error"
            Parameter { name: "errorString"; type: "string" }
        }
        Signal {
            name: "initializeItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "animate"
            Parameter { name: "transition"; type: "string" }
        }
        Signal { name: "completeAnimation" }
        Method {
            name: "load"
            Parameter { name: "source"; type: "QJSValue" }
            Parameter { name: "transition"; type: "string" }
            Parameter { name: "properties"; type: "QJSValue" }
        }
        Method {
            name: "load"
            Parameter { name: "source"; type: "QJSValue" }
            Parameter { name: "transition"; type: "string" }
        }
        Method {
            name: "load"
            Parameter { name: "source"; type: "QJSValue" }
        }
    }
    Component {
        name: "AnimatedLoaderAttached"
        prototype: "QObject"
        Property { name: "status"; type: "AnimatedLoader::Status" }
        Property { name: "errorString"; type: "string" }
        Property { name: "asynchronous"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "ApplicationBackground"
        prototype: "QObject"
        Property { name: "wallpaper"; type: "QJSValue" }
        Property { name: "image"; type: "QUrl" }
        Property { name: "filter"; type: "string" }
        Property { name: "color"; type: "QColor" }
        Property { name: "material"; type: "string" }
        Property { name: "_windowComponent"; type: "QQmlComponent"; isPointer: true }
        Signal { name: "patternChanged" }
        Signal { name: "windowComponentChanged" }
    }
    Component {
        name: "AutoFill"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/AutoFill 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "key"; type: "string" }
        Property { name: "partialText"; type: "string" }
        Property { name: "maximumSuggestions"; type: "int" }
        Property { name: "canRemove"; type: "bool" }
        Property { name: "suggestions"; type: "QStringList" }
        Property { name: "inputItem"; type: "QQuickItem"; isPointer: true }
        Signal {
            name: "suggestionRemoved"
            Parameter { name: "suggestion"; type: "string" }
        }
        Method {
            name: "insert"
            Parameter { name: "suggestion"; type: "string" }
        }
        Method {
            name: "remove"
            Parameter { name: "suggestion"; type: "string" }
        }
        Method { name: "save" }
    }
    Component {
        name: "AutoScrollController"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/AutoScrollController 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "flickable"; type: "QQuickFlickable"; isReadonly: true; isPointer: true }
        Property { name: "horizontalScrollItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "verticalScrollItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "modal"; type: "bool"; isReadonly: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "scrollHorizontally"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "animated"; type: "bool" }
        }
        Signal {
            name: "scrollVertically"
            Parameter { name: "y"; type: "float" }
            Parameter { name: "animated"; type: "bool" }
        }
        Method { name: "scheduleHorizontalScroll" }
        Method { name: "scheduleVerticalScroll" }
    }
    Component {
        name: "BackgroundRectangle"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/BackgroundRectangle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
    }
    Component {
        name: "DeclarativeConfigApi"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/Config 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DemoMode"
            values: {
                "Normal": 0,
                "Demo": 1,
                "Retail": 2
            }
        }
        Property { name: "wayland"; type: "bool"; isReadonly: true }
        Property { name: "demoMode"; type: "DemoMode"; isReadonly: true }
        Property { name: "layoutGrid"; type: "bool"; isReadonly: true }
        Property { name: "sailfishVersion"; type: "float"; isReadonly: true }
        Property { name: "desktop"; type: "bool"; isReadonly: true }
        Method {
            name: "setCompositorWindows"
            Parameter { type: "QList<QObject*>" }
        }
    }
    Component {
        name: "DeclarativeCoverWindow"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["Sailfish.Silica.private/CoverWindow 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "cover"; type: "DeclarativeCover"; isPointer: true }
        Property { name: "mainWindow"; type: "QObject"; isPointer: true }
        Method {
            name: "setContentSize"
            Parameter { name: "w"; type: "float" }
            Parameter { name: "h"; type: "float" }
        }
    }
    Component {
        name: "DeclarativeDragFilter"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/DragFilter 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "canceled"; type: "bool"; isReadonly: true }
        Property { name: "screenMargin"; type: "float" }
        Property { name: "orientations"; type: "Qt::Orientations" }
        Method {
            name: "begin"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Method { name: "end" }
        Method { name: "cancelClick" }
    }
    Component {
        name: "DeclarativePreeditText"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/PreeditText 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
    }
    Component {
        name: "DeclarativeQuickScrollButtonBase"
        defaultProperty: "data"
        prototype: "Silica::Control"
        exports: ["Sailfish.Silica.private/QuickScrollButtonBase 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "flickable"; type: "QQuickItem"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        name: "DeclarativeTextBaseItem"
        defaultProperty: "data"
        prototype: "Silica::Control"
        exports: ["Sailfish.Silica.private/TextBaseItem 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HAlignment"
            values: {
                "AlignLeft": 1,
                "AlignRight": 2,
                "AlignHCenter": 4
            }
        }
        Property { name: "horizontalAlignment"; type: "HAlignment" }
        Property { name: "explicitHorizontalAlignment"; type: "bool"; isReadonly: true }
        Property { name: "_editor"; type: "QQuickItem"; isPointer: true }
        Property { name: "_keyboardPalette"; type: "string" }
        Signal { name: "editorChanged" }
        Signal { name: "keyboardPaletteChanged" }
        Method {
            name: "setImplicitHorizontalAlignment"
            Parameter { name: "alignment"; type: "HAlignment" }
        }
    }
    Component {
        name: "DeclarativeUnderline"
        defaultProperty: "data"
        prototype: "Silica::Item"
        exports: ["Sailfish.Silica.private/Underline 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "primaryColor"; type: "QColor" }
        Property { name: "secondaryColor"; type: "QColor" }
    }
    Component {
        name: "DeclarativeUtil"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/Util 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "weekNumberList"
            type: "QList<int>"
            Parameter { name: "year"; type: "int" }
            Parameter { name: "month"; type: "int" }
            Parameter { name: "day"; type: "int" }
            Parameter { name: "amount"; type: "int" }
        }
        Method {
            name: "asyncInvoke"
            Parameter { name: "callable"; type: "QJSValue" }
        }
        Method {
            name: "instanceOf"
            type: "bool"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
            Parameter { name: "className"; type: "string" }
        }
    }
    Component {
        name: "DeclarativeVariantInterpolator"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/VariantInterpolator 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "from"; type: "QVariant" }
        Property { name: "to"; type: "QVariant" }
        Property { name: "progress"; type: "float" }
        Property { name: "value"; type: "QVariant"; isReadonly: true }
    }
    Component {
        name: "DeclarativeVisibilityCull"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/VisibilityCull 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "target"; type: "QQuickItem"; isPointer: true }
        Property { name: "enabled"; type: "bool" }
    }
    Component {
        name: "DeclarativeWindow"
        defaultProperty: "data"
        prototype: "Silica::Control"
        exports: ["Sailfish.Silica.private/Window 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "orientation"; type: "DeclarativeOrientation::Orientation"; isReadonly: true }
        Property { name: "_pageOrientation"; type: "DeclarativeOrientation::Orientation" }
        Property { name: "deviceOrientation"; type: "DeclarativeOrientation::Orientation" }
        Property {
            name: "defaultAllowedOrientations"
            type: "DeclarativeOrientation::Orientations"
            isReadonly: true
        }
        Property { name: "_allowedOrientations"; type: "DeclarativeOrientation::Orientations" }
        Property { name: "screenRotation"; type: "int"; isReadonly: true }
        Property { name: "background"; type: "ApplicationBackground"; isReadonly: true; isPointer: true }
        Property { name: "_backgroundVisible"; type: "bool" }
        Property { name: "_opaque"; type: "bool" }
        Property { name: "_persistentOpenGLContext"; type: "bool" }
        Property { name: "_persistentSceneGraph"; type: "bool" }
        Property { name: "_haveCoverHint"; type: "bool" }
        Property { name: "_backgroundColor"; type: "QColor" }
        Property { name: "_coverIsPrimaryWindow"; type: "bool" }
        Property { name: "_coverVisible"; type: "bool" }
        Property { name: "_proxyWindow"; type: "QQuickWindow"; isPointer: true }
        Property { name: "_mainWindow"; type: "QWindow"; isPointer: true }
        Property { name: "_windowOpacity"; type: "float" }
        Property { name: "_backgroundRect"; type: "QRectF" }
        Signal { name: "_orientationLockedChanged" }
        Signal { name: "backgroundColorChanged" }
        Signal { name: "backgroundVisibleChanged" }
        Signal { name: "opaqueChanged" }
        Signal { name: "coverIsPrimaryWindowChanged" }
        Signal { name: "coverVisibleChanged" }
        Signal { name: "proxyWindowChanged" }
        Signal { name: "mainWindowChanged" }
        Signal {
            name: "switcherWindowChanged"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Signal { name: "haveCoverChanged" }
        Signal { name: "windowOpacityChanged" }
        Signal { name: "backgroundRectChanged" }
        Method { name: "activate" }
        Method { name: "deactivate" }
        Method { name: "_processPendingDeletions" }
        Method {
            name: "_selectOrientation"
            type: "int"
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method {
            name: "_selectOrientation"
            type: "int"
            Parameter { type: "int" }
        }
        Method {
            name: "_setCover"
            Parameter { name: "window"; type: "QObject"; isPointer: true }
        }
        Method { name: "_updateCoverVisibility" }
    }
    Component {
        name: "DragDetectorItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/DragDetectorItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "flickable"; type: "QQuickItem"; isPointer: true }
        Property { name: "horizontalDragUnused"; type: "bool"; isReadonly: true }
        Property { name: "verticalDragUnused"; type: "bool"; isReadonly: true }
        Method { name: "reset" }
    }
    Component {
        name: "DrawingArea"
        defaultProperty: "data"
        prototype: "LineItem"
        exports: ["Sailfish.Silica.private/DrawingArea 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "threshold"; type: "float" }
        Property { name: "mask"; type: "QQuickItem"; isPointer: true }
        Property { name: "maximumStrokeCount"; type: "int"; isReadonly: true }
        Signal {
            name: "arcStarted"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Signal {
            name: "arcPointAdded"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Signal { name: "arcFinished" }
        Signal { name: "arcCanceled" }
        Method { name: "clear" }
    }
    Component {
        name: "LineGraph"
        defaultProperty: "data"
        prototype: "LineItem"
        exports: ["Sailfish.Silica.private/LineGraph 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "values"; type: "QVariantList" }
    }
    Component {
        name: "LineItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "curveDensity"; type: "float" }
        Property { name: "lineWidth"; type: "float" }
        Property { name: "color"; type: "QColor" }
    }
    Component {
        name: "OverlayGradient"
        defaultProperty: "data"
        prototype: "Silica::Item"
        exports: ["Sailfish.Silica.private/OverlayGradientBase 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Direction"
            values: {
                "LeftToRight": 0,
                "RightToLeft": 1,
                "TopToBottom": 2,
                "BottomToTop": 3
            }
        }
        Property { name: "startColor"; type: "QColor" }
        Property { name: "endColor"; type: "QColor" }
        Property { name: "noise"; type: "QUrl" }
        Property { name: "noiseWeight"; type: "float" }
        Property { name: "direction"; type: "Direction" }
    }
    Component {
        name: "ProxyValidator"
        prototype: "QValidator"
        exports: ["Sailfish.Silica.private/ProxyValidator 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "strictValidation"; type: "bool" }
        Property { name: "validator"; type: "QValidator"; isPointer: true }
    }
    Component {
        name: "PulleyMenuLogic"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/PulleyMenuLogic 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pullDownType"; type: "bool" }
        Property { name: "flickable"; type: "QObject"; isPointer: true }
        Property { name: "dragDistance"; type: "float"; isReadonly: true }
        Signal { name: "finalPositionReached" }
        Signal {
            name: "flickableChanged"
            Parameter { name: "arg"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "pullDownTypeChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "animateFlick"
            Parameter { name: "duration"; type: "float" }
            Parameter { name: "position"; type: "float" }
        }
        Method { name: "outOfBounds"; type: "bool" }
        Method { name: "monitorFlick" }
    }
    Component {
        name: "QQuickWindow"
        defaultProperty: "data"
        prototype: "QWindow"
        Enum {
            name: "SceneGraphError"
            values: {
                "ContextNotAvailable": 1
            }
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal {
            name: "openglContextCreated"
            revision: 2
            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
        }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 2 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 2 }
        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal { name: "activeFocusItemChanged"; revision: 1 }
        Signal {
            name: "sceneGraphError"
            revision: 2
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "string" }
        }
        Method { name: "update" }
        Method { name: "releaseResources" }
    }
    Component {
        name: "QWindow"
        prototype: "QObject"
        Enum {
            name: "Visibility"
            values: {
                "Hidden": 0,
                "AutomaticVisibility": 1,
                "Windowed": 2,
                "Minimized": 3,
                "Maximized": 4,
                "FullScreen": 5
            }
        }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "visible"; type: "bool" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "visibility"; revision: 1; type: "Visibility" }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "float" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 2
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            revision: 1
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Signal { name: "activeChanged"; revision: 1 }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "float" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "requestUpdate"; revision: 3 }
    }
    Component {
        name: "QuickScrollDirection"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/QuickScrollDirection 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Direction"
            values: {
                "Up": 1,
                "Down": 2,
                "UpAndDown": 3
            }
        }
        Enum {
            name: "Directions"
            values: {
                "Up": 1,
                "Down": 2,
                "UpAndDown": 3
            }
        }
    }
    Component {
        name: "RemorseCache"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/RemorseCache 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "item"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        name: "Sailfish::Silica::Background::AbstractFilter"
        prototype: "QObject"
        Property { name: "enabled"; type: "bool" }
        Signal { name: "filterChanged" }
    }
    Component {
        name: "Sailfish::Silica::Background::ConvolutionFilter"
        prototype: "Sailfish::Silica::Background::AbstractFilter"
        exports: ["Sailfish.Silica.private/ConvolutionFilterPrivate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "kernel"; type: "Sailfish::Silica::Background::Kernel" }
    }
    Component {
        name: "Sailfish::Silica::Background::Fill"
        exports: ["Sailfish.Silica.private/FillPrivate 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Mode"
            values: {
                "Stretch": 0,
                "PreserveAspectFit": 1,
                "PreserveAspectByExpanding": 2
            }
        }
    }
    Component {
        name: "Sailfish::Silica::Background::Material"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/MaterialPrivate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "vertexShader"; type: "string" }
        Property { name: "fragmentShader"; type: "string" }
        Property { name: "patternSize"; type: "QSizeF" }
        Property { name: "blending"; type: "bool" }
        Property { name: "visible"; type: "bool"; isReadonly: true }
        Signal { name: "propertyBindingsChanged" }
        Signal { name: "meshResolutionChanged" }
        Signal { name: "materialChanged" }
    }
    Component {
        name: "Sailfish::Silica::Background::RepeatFilter"
        defaultProperty: "filters"
        prototype: "Sailfish::Silica::Background::SequenceFilter"
        exports: ["Sailfish.Silica.private/RepeatFilterPrivate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "repetitions"; type: "int" }
    }
    Component {
        name: "Sailfish::Silica::Background::ResizeFilter"
        prototype: "Sailfish::Silica::Background::ConvolutionFilter"
        exports: ["Sailfish.Silica.private/ResizeFilterPrivate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "size"; type: "QSize" }
        Property { name: "fillMode"; type: "Sailfish::Silica::Background::Fill::Mode" }
        Property { name: "maximumScaleFactor"; type: "int" }
    }
    Component {
        name: "Sailfish::Silica::Background::SequenceFilter"
        defaultProperty: "filters"
        prototype: "Sailfish::Silica::Background::AbstractFilter"
        exports: ["Sailfish.Silica.private/SequenceFilterPrivate 1.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "filters"
            type: "Sailfish::Silica::Background::AbstractFilter"
            isList: true
            isReadonly: true
        }
    }
    Component {
        name: "Sailfish::Silica::Background::ShaderFilter"
        prototype: "Sailfish::Silica::Background::AbstractFilter"
        exports: ["Sailfish.Silica.private/ShaderFilterPrivate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "vertexShader"; type: "string" }
        Property { name: "fragmentShader"; type: "string" }
    }
    Component { name: "Silica::Control"; defaultProperty: "data"; prototype: "Silica::Item" }
    Component {
        name: "Silica::HighlightImageBase"
        defaultProperty: "data"
        prototype: "QQuickImageBase"
        exports: ["Sailfish.Silica.private/HighlightImageBase 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "palette"; type: "Silica::Palette"; isReadonly: true; isPointer: true }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "colorWeight"; type: "float" }
        Property { name: "monochromeWeight"; type: "float" }
        Property { name: "fillMode"; type: "QQuickImage::FillMode" }
        Property { name: "horizontalAlignment"; type: "QQuickImage::HAlignment" }
        Property { name: "verticalAlignment"; type: "QQuickImage::VAlignment" }
    }
    Component {
        name: "Silica::Item"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "palette"; type: "Silica::Palette"; isReadonly: true; isPointer: true }
        Property { name: "highlighted"; type: "bool" }
    }
    Component {
        name: "Silica::LinkParser"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/LinkParser 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
        Property { name: "shortenUrl"; type: "bool" }
        Property { name: "linkedText"; type: "string"; isReadonly: true }
        Property { name: "parsing"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "Silica::MouseArea"
        defaultProperty: "data"
        prototype: "QQuickMouseArea"
        exports: ["Sailfish.Silica.private/SilicaMouseArea 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "palette"; type: "Silica::Palette"; isReadonly: true; isPointer: true }
        Property { name: "highlighted"; type: "bool" }
    }
    Component {
        name: "Silica::Private::QmlKernel"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/KernelPrivate 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SampleSize"
            values: {
                "SampleSize5": 0,
                "SampleSize9": 1,
                "SampleSize13": 2,
                "SampleSize17": 3,
                "SampleSize21": 4,
                "SampleSize25": 5,
                "SampleSize29": 6,
                "SampleSize33": 7
            }
        }
        Method {
            name: "weightCountForSampleSize"
            type: "int"
            Parameter { name: "size"; type: "SampleSize" }
        }
        Method {
            name: "gaussian"
            type: "Sailfish::Silica::Background::Kernel"
            Parameter { name: "sampleSize"; type: "SampleSize" }
            Parameter { name: "deviation"; type: "float" }
        }
        Method {
            name: "gaussian"
            type: "Sailfish::Silica::Background::Kernel"
            Parameter { name: "sampleSize"; type: "SampleSize" }
        }
        Method {
            name: "fromWeights"
            type: "Sailfish::Silica::Background::Kernel"
            Parameter { name: "weights"; type: "QJSValue" }
        }
    }
    Component {
        name: "Silica::Rectangle"
        defaultProperty: "data"
        prototype: "QQuickRectangle"
        exports: ["Sailfish.Silica.private/SilicaRectangle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "palette"; type: "Silica::Palette"; isReadonly: true; isPointer: true }
        Property { name: "highlighted"; type: "bool" }
    }
    Component {
        name: "Silica::Text"
        defaultProperty: "data"
        prototype: "QQuickText"
        exports: ["Sailfish.Silica.private/SilicaText 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "palette"; type: "Silica::Palette"; isReadonly: true; isPointer: true }
        Property { name: "highlighted"; type: "bool" }
    }
    Component {
        name: "Silica::ThemeTransaction"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/ThemeTransaction 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "deferAmbience"; type: "bool" }
        Signal { name: "ambienceAboutToChange" }
    }
    Component {
        name: "Slide"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/Slide 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Flow"
            values: {
                "LeftToRight": 0,
                "RightToLeft": 180,
                "TopToBottom": 90,
                "BottomToTop": 270
            }
        }
        Enum {
            name: "Direction"
            values: {
                "NoDirection": 0,
                "Forward": 1,
                "Backward": -1
            }
        }
        Property { name: "view"; type: "Slideable"; isReadonly: true; isPointer: true }
        Property { name: "_view"; type: "Slideable"; isPointer: true }
        Property { name: "backward"; type: "QQuickItem"; isPointer: true }
        Property { name: "forward"; type: "QQuickItem"; isPointer: true }
        Property { name: "offset"; type: "float"; isReadonly: true }
        Property { name: "_offset"; type: "float" }
        Property { name: "isCurrent"; type: "bool"; isReadonly: true }
        Property { name: "isExposed"; type: "bool"; isReadonly: true }
        Property { name: "isFirst"; type: "bool" }
        Property { name: "isLast"; type: "bool" }
        Property { name: "inCache"; type: "bool"; isReadonly: true }
        Property { name: "keepAlive"; type: "bool" }
        Property { name: "_object"; type: "QObject"; isReadonly: true; isPointer: true }
        Signal { name: "backwardItemChanged" }
        Signal { name: "forwardItemChanged" }
        Signal { name: "currentItemChanged" }
        Signal { name: "exposedChanged" }
        Signal { name: "firstItemChanged" }
        Signal { name: "lastItemChanged" }
        Signal { name: "transitionItemChanged" }
        Signal { name: "remove" }
        Signal { name: "cleanup" }
    }
    Component {
        name: "Slideable"
        defaultProperty: "data"
        prototype: "Silica::Control"
        exports: ["Sailfish.Silica.private/SlideableBase 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "currentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "alternateItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "_alternateItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "flow"; type: "Slide::Flow" }
        Property { name: "cacheSize"; type: "int" }
        Property { name: "cacheExpiry"; type: "int" }
        Signal { name: "exposedChanged" }
        Signal {
            name: "createAdjacentItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "direction"; type: "int" }
        }
        Method {
            name: "cache"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
    }
    Component {
        name: "StringListModel"
        prototype: "QAbstractItemModel"
        exports: ["Sailfish.Silica.private/StringListModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "propertyName"; type: "string" }
        Property { name: "strings"; type: "QStringList" }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "SwipeGestureArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/SwipeGestureArea 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Direction"
            values: {
                "DirectionNone": 0,
                "DirectionLeft": 1,
                "DirectionRight": 2,
                "DirectionUp": 4,
                "DirectionDown": 8,
                "DirectionHorizontal": 3,
                "DirectionVertical": 12,
                "DirectionAll": 15
            }
        }
        Enum {
            name: "Directions"
            values: {
                "DirectionNone": 0,
                "DirectionLeft": 1,
                "DirectionRight": 2,
                "DirectionUp": 4,
                "DirectionDown": 8,
                "DirectionHorizontal": 3,
                "DirectionVertical": 12,
                "DirectionAll": 15
            }
        }
        Property { name: "swipeEnabled"; type: "bool" }
        Property { name: "thresholdX"; type: "int" }
        Property { name: "thresholdY"; type: "int" }
        Property { name: "swipeAmount"; type: "int"; isReadonly: true }
        Property { name: "gestureInProgress"; type: "bool"; isReadonly: true }
        Property { name: "direction"; type: "Direction"; isReadonly: true }
        Property { name: "allowedDirections"; type: "SwipeGestureArea::Directions" }
        Property { name: "forceDirections"; type: "SwipeGestureArea::Directions" }
        Method { name: "endGesture" }
    }
    Component {
        name: "TextLayoutModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Silica.private/TextLayoutModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Role"
            values: {
                "LineNumberRole": 256,
                "TextRole": 257,
                "LengthRole": 258,
                "WidthRole": 259,
                "HeightRole": 260,
                "ElidedRole": 261
            }
        }
        Property { name: "text"; type: "string" }
        Property { name: "font"; type: "QFont" }
        Property { name: "width"; type: "float" }
        Property { name: "wrapMode"; type: "int" }
        Property { name: "maximumLineCount"; type: "int" }
        Property { name: "lineCount"; type: "int"; isReadonly: true }
    }
    Component {
        name: "TimePickerMode"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/TimePickerMode 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Mode"
            values: {
                "HoursAndMinutes": 0,
                "MinutesAndSeconds": 1
            }
        }
    }
    Component {
        name: "WallpaperWindow"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["Sailfish.Silica.private/WallpaperWindow 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "windowVisible"; type: "bool" }
        Property { name: "parentWindow"; type: "QQuickWindow"; isPointer: true }
        Property { name: "windowWidth"; type: "float" }
        Property { name: "windowHeight"; type: "float" }
    }
}
