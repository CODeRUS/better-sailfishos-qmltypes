import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated with the command '/usr/lib/qt5/bin/qmlplugindump -nonrelocatable Sailfish.Calculator 1.0'.

Module {
    Component {
        name: "DeclarativeCalculation"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Calculator/Calculation 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "Field": 0,
                "Operation": 1
            }
        }
        Property { name: "result"; type: "DeclarativeResult"; isReadonly: true; isPointer: true }
        Property { name: "focusField"; type: "DeclarativeField"; isReadonly: true; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "completed" }
        Signal { name: "emptyChanged" }
        Signal { name: "operationMadeToEmptyCalculation" }
        Method {
            name: "get"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "insert"
            Parameter { name: "character"; type: "string" }
        }
        Method { name: "changeSign" }
        Method { name: "add" }
        Method { name: "substract" }
        Method { name: "multiply" }
        Method { name: "divide" }
        Method { name: "backspace" }
        Method { name: "calculate" }
        Method { name: "clear" }
        Method { name: "paste" }
    }
    Component {
        name: "DeclarativeField"
        prototype: "QObject"
        exports: ["Sailfish.Calculator/Field 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "Value": 0,
                "Link": 1
            }
        }
        Property { name: "type"; type: "Type"; isReadonly: true }
        Property { name: "value"; type: "double"; isReadonly: true }
        Property { name: "numerator"; type: "string"; isReadonly: true }
        Property { name: "denominator"; type: "string"; isReadonly: true }
        Property { name: "focus"; type: "bool" }
        Property { name: "fraction"; type: "bool"; isReadonly: true }
        Property { name: "parentCalculation"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "linkText"; type: "string"; isReadonly: true }
        Method { name: "isValid"; type: "bool" }
        Method {
            name: "link"
            Parameter { name: "result"; type: "DeclarativeResult"; isPointer: true }
        }
        Method { name: "removeLink" }
    }
    Component {
        name: "DeclarativeOperation"
        prototype: "QObject"
        exports: ["Sailfish.Calculator/Operation 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "Add": 0,
                "Substract": 1,
                "Multiply": 2
            }
        }
        Property { name: "type"; type: "Type"; isReadonly: true }
    }
    Component {
        name: "DeclarativeResult"
        prototype: "QObject"
        exports: ["Sailfish.Calculator/Result 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "value"; type: "double"; isReadonly: true }
        Property { name: "valueText"; type: "string"; isReadonly: true }
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "linked"; type: "bool"; isReadonly: true }
        Property { name: "linkText"; type: "string"; isReadonly: true }
    }
}
