import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Sailfish.Weather 1.0'

Module {
    Component {
        name: "BluetoothInfo"
        prototype: "QObject"
        exports: ["com.jolla.settings.system/BluetoothInfo 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "adapterAddress"; type: "string"; isReadonly: true }
    }
    Component {
        name: "ConfigurationGroup"
        defaultProperty: "data"
        prototype: "MDConfGroup"
        exports: ["org.nemomobile.configuration/ConfigurationGroup 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "ConfigurationValue"
        prototype: "QObject"
        exports: ["org.nemomobile.configuration/ConfigurationValue 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "key"; type: "string" }
        Property { name: "value"; type: "QVariant" }
        Property { name: "defaultValue"; type: "QVariant" }
        Method { name: "sync" }
    }
    Component {
        name: "DeviceLockSettings"
        prototype: "QObject"
        exports: ["com.jolla.settings.system/DeviceLockSettings 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "automaticLocking"; type: "string"; isReadonly: true }
        Property { name: "maximumAttempts"; type: "string"; isReadonly: true }
        Property { name: "peekingAllowed"; type: "string"; isReadonly: true }
        Property { name: "sideloadingAllowed"; type: "string"; isReadonly: true }
        Property { name: "codeMaxLength"; type: "string"; isReadonly: true }
        Property { name: "codeMinLength"; type: "string"; isReadonly: true }
        Property { name: "codeCurrentLength"; type: "string"; isReadonly: true }
        Property { name: "codeCurrentIsDigitOnly"; type: "bool"; isReadonly: true }
        Property { name: "codeInputIsKeyboard"; type: "bool"; isReadonly: true }
        Method {
            name: "setAutomaticLocking"
            type: "bool"
            Parameter { name: "code"; type: "string" }
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "setMaximumAttempts"
            type: "bool"
            Parameter { name: "code"; type: "string" }
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "setPeekingAllowed"
            type: "bool"
            Parameter { name: "code"; type: "string" }
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "setSideloadingAllowed"
            type: "bool"
            Parameter { name: "code"; type: "string" }
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "setInputIsKeyboard"
            type: "bool"
            Parameter { name: "code"; type: "string" }
            Parameter { name: "value"; type: "bool" }
        }
    }
    Component {
        name: "LocationSettings"
        prototype: "QObject"
        exports: ["com.jolla.settings.system/LocationSettings 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HereState"
            values: {
                "HereNotAccepted": 0,
                "HereDisabled": 1,
                "HereEnabled": 2
            }
        }
        Property { name: "agreementText"; type: "string"; isReadonly: true }
        Property { name: "locationEnabled"; type: "bool" }
        Property { name: "hereState"; type: "HereState" }
    }
    Component {
        name: "MDConfGroup"
        prototype: "QObject"
        Property { name: "synchronous"; type: "bool" }
        Property { name: "path"; type: "string" }
        Property { name: "scope"; type: "MDConfGroup"; isPointer: true }
        Signal {
            name: "valueChanged"
            Parameter { name: "key"; type: "string" }
        }
        Signal { name: "valuesChanged" }
        Method { name: "sync" }
        Method { name: "clear" }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "QVariant" }
            Parameter { name: "typeHint"; type: "int" }
        }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "setValue"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        name: "SavedWeathersModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Weather/SavedWeathersModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "currentWeather"; type: "Weather"; isReadonly: true; isPointer: true }
        Property { name: "autoRefresh"; type: "bool" }
        Method {
            name: "setErrorStatus"
            Parameter { name: "locationId"; type: "int" }
        }
        Method {
            name: "addLocation"
            Parameter { name: "locationMap"; type: "QVariantMap" }
        }
        Method {
            name: "update"
            Parameter { name: "locationId"; type: "int" }
            Parameter { name: "weatherMap"; type: "QVariantMap" }
            Parameter { name: "status"; type: "Weather::Status" }
        }
        Method {
            name: "update"
            Parameter { name: "locationId"; type: "int" }
            Parameter { name: "weatherMap"; type: "QVariantMap" }
        }
        Method {
            name: "remove"
            Parameter { name: "locationId"; type: "int" }
        }
        Method {
            name: "get"
            type: "Weather*"
            Parameter { name: "locationId"; type: "int" }
        }
        Method {
            name: "moveToTop"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "save" }
        Method {
            name: "setCurrentWeather"
            Parameter { name: "locationMap"; type: "QVariantMap" }
            Parameter { name: "internal"; type: "bool" }
        }
        Method {
            name: "setCurrentWeather"
            Parameter { name: "locationMap"; type: "QVariantMap" }
        }
    }
    Component {
        name: "TohInfo"
        prototype: "QObject"
        exports: ["com.jolla.settings.system/TohInfo 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "tohId"; type: "string"; isReadonly: true }
        Property { name: "tohReady"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "Weather"
        prototype: "QObject"
        exports: ["Sailfish.Weather/Weather 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Null": 0,
                "Ready": 1,
                "Loading": 2,
                "Error": 3
            }
        }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "locationId"; type: "int"; isReadonly: true }
        Property { name: "city"; type: "string"; isReadonly: true }
        Property { name: "state"; type: "string"; isReadonly: true }
        Property { name: "country"; type: "string"; isReadonly: true }
        Property { name: "temperature"; type: "int"; isReadonly: true }
        Property { name: "temperatureFeel"; type: "int"; isReadonly: true }
        Property { name: "weatherType"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "timestamp"; type: "QDateTime"; isReadonly: true }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Method {
            name: "update"
            Parameter { name: "weatherMap"; type: "QVariantMap" }
        }
    }
    Component {
        name: "WeatherLauncher"
        prototype: "QObject"
        exports: ["Sailfish.Weather/WeatherLauncher 1.0"]
        exportMetaObjectRevisions: [0]
        Method { name: "launch" }
    }
    Component {
        prototype: "QQuickItem"
        name: "LocationDetection"
        exports: ["LocationDetection -1.-1"]
        exportMetaObjectRevisions: [-1]
        isSingleton: true
        defaultProperty: "data"
        Property { name: "ready"; type: "bool" }
        Property { name: "error"; type: "bool" }
        Property { name: "city"; type: "string" }
        Property { name: "locationId"; type: "string" }
        Property { name: "positioningAllowed"; type: "bool" }
        Property { name: "metric"; type: "bool" }
        Property { name: "model"; type: "QObject"; isPointer: true }
        Method { name: "updateLocation"; type: "QVariant" }
        Method { name: "reloadModel"; type: "QVariant" }
        Method { name: "handleLocationSetting"; type: "QVariant" }
    }
    Component {
        prototype: "QObject"
        name: "TemperatureConverter"
        exports: ["TemperatureConverter -1.-1"]
        exportMetaObjectRevisions: [-1]
        isSingleton: true
        Property { name: "key"; type: "string" }
        Property { name: "value"; type: "QVariant" }
        Property { name: "defaultValue"; type: "QVariant" }
        Method { name: "sync" }
        Property { name: "celsius"; type: "bool" }
        Method {
            name: "formatWithoutUnit"
            type: "QVariant"
            Parameter { name: "temperature"; type: "QVariant" }
        }
        Method {
            name: "format"
            type: "QVariant"
            Parameter { name: "temperature"; type: "QVariant" }
        }
    }
}
