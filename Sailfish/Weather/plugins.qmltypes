import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate Sailfish.Weather 1.0'

Module {
    dependencies: [
        "MeeGo.Connman 0.2",
        "Nemo.Connectivity 1.0",
        "QtPositioning 5.2",
        "QtQuick 2.6",
        "QtQuick.Window 2.1",
        "QtQuick.XmlListModel 2.0",
        "QtWebKit 3.0",
        "QtWebKit.experimental 1.0",
        "Sailfish.Silica 1.0",
        "Sailfish.Silica.private 1.0",
        "org.nemomobile.configuration 1.0",
        "org.nemomobile.keepalive 1.0",
        "org.nemomobile.systemsettings 1.0",
        "org.nemomobile.thumbnailer 1.0"
    ]
    Component {
        name: "SavedWeathersModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Weather/SavedWeathersModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "currentWeather"; type: "Weather"; isReadonly: true; isPointer: true }
        Property { name: "autoRefresh"; type: "bool" }
        Method {
            name: "setErrorStatus"
            Parameter { name: "locationId"; type: "int" }
        }
        Method {
            name: "addLocation"
            Parameter { name: "locationMap"; type: "QVariantMap" }
        }
        Method {
            name: "update"
            Parameter { name: "locationId"; type: "int" }
            Parameter { name: "weatherMap"; type: "QVariantMap" }
            Parameter { name: "status"; type: "Weather::Status" }
        }
        Method {
            name: "update"
            Parameter { name: "locationId"; type: "int" }
            Parameter { name: "weatherMap"; type: "QVariantMap" }
        }
        Method {
            name: "remove"
            Parameter { name: "locationId"; type: "int" }
        }
        Method {
            name: "get"
            type: "Weather*"
            Parameter { name: "locationId"; type: "int" }
        }
        Method {
            name: "moveToTop"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "save" }
        Method {
            name: "setCurrentWeather"
            Parameter { name: "locationMap"; type: "QVariantMap" }
            Parameter { name: "internal"; type: "bool" }
        }
        Method {
            name: "setCurrentWeather"
            Parameter { name: "locationMap"; type: "QVariantMap" }
        }
    }
    Component {
        name: "Weather"
        prototype: "QObject"
        exports: ["Sailfish.Weather/Weather 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Null": 0,
                "Ready": 1,
                "Loading": 2,
                "Error": 3
            }
        }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "locationId"; type: "int"; isReadonly: true }
        Property { name: "city"; type: "string"; isReadonly: true }
        Property { name: "state"; type: "string"; isReadonly: true }
        Property { name: "country"; type: "string"; isReadonly: true }
        Property { name: "temperature"; type: "int"; isReadonly: true }
        Property { name: "temperatureFeel"; type: "int"; isReadonly: true }
        Property { name: "weatherType"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "timestamp"; type: "QDateTime"; isReadonly: true }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Method {
            name: "update"
            Parameter { name: "weatherMap"; type: "QVariantMap" }
        }
    }
    Component {
        name: "WeatherLauncher"
        prototype: "QObject"
        exports: ["Sailfish.Weather/WeatherLauncher 1.0"]
        exportMetaObjectRevisions: [0]
        Method { name: "launch" }
    }
    Component {
        prototype: "QQuickItem"
        name: "LocationDetection 1.0"
        exports: ["LocationDetection 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "data"
        Property { name: "ready"; type: "bool" }
        Property { name: "error"; type: "bool" }
        Property { name: "city"; type: "string" }
        Property { name: "locationId"; type: "string" }
        Property { name: "positioningAllowed"; type: "bool" }
        Property { name: "metric"; type: "bool" }
        Property { name: "model"; type: "QObject"; isPointer: true }
        Method { name: "updateLocation"; type: "QVariant" }
        Method { name: "reloadModel"; type: "QVariant" }
        Method { name: "handleLocationSetting"; type: "QVariant" }
    }
    Component {
        prototype: "QObject"
        name: "Remorse 1.0"
        exports: ["Remorse 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "_itemComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "_popupComponent"; type: "QQmlComponent"; isPointer: true }
        Method {
            name: "_create"
            type: "QVariant"
            Parameter { name: "component"; type: "QVariant" }
            Parameter { name: "parent"; type: "QVariant" }
        }
        Method {
            name: "itemAction"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "action"; type: "QVariant" }
            Parameter { name: "timeout"; type: "QVariant" }
        }
        Method {
            name: "popupAction"
            type: "QVariant"
            Parameter { name: "page"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "action"; type: "QVariant" }
            Parameter { name: "timeout"; type: "QVariant" }
        }
    }
    Component {
        prototype: "ConfigurationValue"
        name: "TemperatureConverter 1.0"
        exports: ["TemperatureConverter 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "celsius"; type: "bool" }
        Method {
            name: "formatWithoutUnit"
            type: "QVariant"
            Parameter { name: "temperature"; type: "QVariant" }
        }
        Method {
            name: "format"
            type: "QVariant"
            Parameter { name: "temperature"; type: "QVariant" }
        }
    }
}
