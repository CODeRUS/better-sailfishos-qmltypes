import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate Sailfish.Lipstick 1.0'

Module {
    dependencies: []
    Component {
        name: "BluetoothObexSystemAgent"
        prototype: "BluezQt::ObexAgent"
        exports: ["Sailfish.Lipstick/BluetoothObexSystemAgent 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "replyToObexAgentRequest"
            Parameter { name: "transferPath"; type: "string" }
            Parameter { name: "acceptFile"; type: "bool" }
        }
        Method {
            name: "cancelTransfer"
            Parameter { name: "transferPath"; type: "string" }
        }
    }
    Component {
        name: "BluetoothStatus"
        prototype: "QObject"
        exports: ["Sailfish.Lipstick/BluetoothStatus 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "path"; type: "string"; isReadonly: true }
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "powered"; type: "bool"; isReadonly: true }
        Property { name: "enabled"; type: "bool"; isReadonly: true }
        Property { name: "connectedDeviceNames"; type: "QStringList"; isReadonly: true }
    }
    Component {
        name: "BluetoothSystemAgent"
        prototype: "BluezQt::Agent"
        exports: ["Sailfish.Lipstick/BluetoothSystemAgent 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Action"
            values: {
                "Compare": 0,
                "EnterPasskey": 1,
                "EnterPin": 2,
                "DisplayPasskey": 3,
                "DisplayPin": 4,
                "Authorize": 5,
                "AuthorizeServiceConnection": 6
            }
        }
        Signal { name: "pairingResultConfirmed" }
        Method {
            name: "replyToAgentRequest"
            Parameter { name: "requestId"; type: "int" }
            Parameter { name: "error"; type: "int" }
            Parameter { name: "passkey"; type: "string" }
        }
        Method {
            name: "pairWithDevice"
            Parameter { name: "deviceAddress"; type: "string" }
        }
    }
    Component {
        name: "BluezQt::Agent"
        prototype: "QObject"
        Enum {
            name: "Capability"
            values: {
                "DisplayOnly": 0,
                "DisplayYesNo": 1,
                "KeyboardOnly": 2,
                "NoInputNoOutput": 3
            }
        }
        Property { name: "capability"; type: "Capability"; isReadonly: true }
    }
    Component { name: "BluezQt::ObexAgent"; prototype: "QObject" }
    Component {
        name: "ItemStateUpdateBatcher"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Lipstick/ItemStateUpdateBatcher 1.0"]
        exportMetaObjectRevisions: [0]
        Signal { name: "stateUpdate" }
        Method { name: "requestStateUpdate" }
    }
    Component {
        name: "PeekFilter"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Lipstick/PeekFilter 1.0"]
        exportMetaObjectRevisions: [0]
        attachedType: "PeekFilterAttached"
        Enum {
            name: "AreaIndex"
            values: {
                "LeftIndex": 0,
                "TopIndex": 1,
                "RightIndex": 2,
                "BottomIndex": 3
            }
        }
        Enum {
            name: "Area"
            values: {
                "NoArea": 0,
                "Left": 1,
                "Top": 2,
                "Right": 4,
                "Bottom": 8
            }
        }
        Enum {
            name: "Areas"
            values: {
                "NoArea": 0,
                "Left": 1,
                "Top": 2,
                "Right": 4,
                "Bottom": 8
            }
        }
        Property { name: "progress"; type: "float"; isReadonly: true }
        Property { name: "absoluteProgress"; type: "float"; isReadonly: true }
        Property { name: "threshold"; type: "float" }
        Property { name: "boundaryWidth"; type: "float" }
        Property { name: "boundaryHeight"; type: "float" }
        Property { name: "extraGestureThreshold"; type: "float" }
        Property { name: "extraGestureDuration"; type: "int" }
        Property { name: "extraGestureThresholdExceeded"; type: "bool"; isReadonly: true }
        Property { name: "leftEnabled"; type: "bool" }
        Property { name: "rightEnabled"; type: "bool" }
        Property { name: "topEnabled"; type: "bool" }
        Property { name: "bottomEnabled"; type: "bool" }
        Property { name: "leftAcceptMargin"; type: "float" }
        Property { name: "rightAcceptMargin"; type: "float" }
        Property { name: "topAcceptMargin"; type: "float" }
        Property { name: "bottomAcceptMargin"; type: "float" }
        Property { name: "leftRejectMargin"; type: "float" }
        Property { name: "rightRejectMargin"; type: "float" }
        Property { name: "topRejectMargin"; type: "float" }
        Property { name: "bottomRejectMargin"; type: "float" }
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "leftActive"; type: "bool"; isReadonly: true }
        Property { name: "rightActive"; type: "bool"; isReadonly: true }
        Property { name: "topActive"; type: "bool"; isReadonly: true }
        Property { name: "bottomActive"; type: "bool"; isReadonly: true }
        Property { name: "windowLeftActive"; type: "bool"; isReadonly: true }
        Property { name: "windowRightActive"; type: "bool"; isReadonly: true }
        Property { name: "windowTopActive"; type: "bool"; isReadonly: true }
        Property { name: "windowBottomActive"; type: "bool"; isReadonly: true }
        Property { name: "orientation"; type: "Qt::ScreenOrientation" }
        Signal { name: "gestureStarted" }
        Signal { name: "gestureTriggered" }
        Signal { name: "gestureCanceled" }
        Signal { name: "extraGestureTriggered" }
        Signal { name: "activeAreaChanged" }
    }
    Component {
        name: "PeekFilterAttached"
        prototype: "QObject"
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "threshold"; type: "float" }
        Property { name: "boundaryWidth"; type: "float" }
        Property { name: "boundaryHeight"; type: "float" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "orientation"; type: "Qt::ScreenOrientation" }
        Property { name: "pressDelay"; type: "int" }
        Property { name: "activeTouches"; type: "int"; isReadonly: true }
        Method { name: "invalidate" }
        Method { name: "cancelGesture" }
    }
    Component {
        name: "PixelAlignedFocusScope"
        defaultProperty: "data"
        prototype: "PixelAlignedItem"
        exports: ["Sailfish.Lipstick/PixelAlignedFocusScope 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "PixelAlignedItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Lipstick/PixelAlignedItem 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "StackItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Lipstick/StackItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "firstItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "lastItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Signal { name: "itemsChanged" }
        Method {
            name: "prependItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "appendItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "insertItemBefore"
            Parameter { name: "before"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "lastItemAfter"
            type: "QQuickItem*"
            Parameter { name: "after"; type: "QQuickItem"; isPointer: true }
        }
    }
    Component {
        name: "SystemDialogWindow"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["Sailfish.Lipstick/SystemDialogWindow 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DialogCategory"
            values: {
                "Dialog": 0,
                "Alarm": 1,
                "Call": 2
            }
        }
        Property { name: "category"; type: "DialogCategory" }
        Property { name: "title"; type: "string" }
    }
}
