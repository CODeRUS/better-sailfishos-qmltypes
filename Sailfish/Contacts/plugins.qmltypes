import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies /home/nemo/qmlexport/empty.json Sailfish.Contacts 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "AutoFill"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/AutoFill 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "key"; type: "string" }
        Property { name: "partialText"; type: "string" }
        Property { name: "maximumSuggestions"; type: "int" }
        Property { name: "canRemove"; type: "bool" }
        Property { name: "suggestions"; type: "QStringList" }
        Property { name: "inputItem"; type: "QQuickItem"; isPointer: true }
        Signal {
            name: "suggestionRemoved"
            Parameter { name: "suggestion"; type: "string" }
        }
        Method {
            name: "insert"
            Parameter { name: "suggestion"; type: "string" }
        }
        Method {
            name: "remove"
            Parameter { name: "suggestion"; type: "string" }
        }
        Method { name: "save" }
    }
    Component {
        name: "AutoScroll"
        prototype: "QObject"
        Property { name: "keepVisible"; type: "bool" }
        Property { name: "restorePosition"; type: "bool" }
        Property { name: "modal"; type: "bool" }
        Property { name: "animated"; type: "bool" }
        Property { name: "hasCursor"; type: "bool"; isReadonly: true }
        Property { name: "cursorRectangle"; type: "QRectF" }
        Method { name: "fixup" }
        Method { name: "scroll" }
    }
    Component {
        name: "AutoScrollController"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/AutoScrollController 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "flickable"; type: "QQuickFlickable"; isReadonly: true; isPointer: true }
        Property { name: "horizontalScrollItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "verticalScrollItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "modal"; type: "bool"; isReadonly: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "scrollHorizontally"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "animated"; type: "bool" }
        }
        Signal {
            name: "scrollVertically"
            Parameter { name: "y"; type: "float" }
            Parameter { name: "animated"; type: "bool" }
        }
        Method { name: "scheduleHorizontalScroll" }
        Method { name: "scheduleVerticalScroll" }
    }
    Component {
        name: "BlurEffect"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/BlurEffect 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Kernel"
            values: {
                "Gaussian5": 0,
                "Gaussian9": 1,
                "Gaussian13": 2,
                "Gaussian17": 3,
                "Gaussian21": 4,
                "Gaussian25": 5,
                "Gaussian29": 6,
                "Gaussian33": 7
            }
        }
        Enum {
            name: "IterationBehavior"
            values: {
                "IterateAllLayers": 0,
                "IterateLastLayer": 1
            }
        }
        Property { name: "blur"; type: "bool" }
        Property { name: "sourceItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "kernel"; type: "Kernel" }
        Property { name: "levels"; type: "int" }
        Property { name: "iterations"; type: "int" }
        Property { name: "iterationBehavior"; type: "IterationBehavior" }
        Property { name: "deviation"; type: "float" }
        Property { name: "intensity"; type: "float" }
        Property { name: "overlayColor"; type: "QColor" }
    }
    Component {
        name: "BubbleBackgroundItem"
        defaultProperty: "data"
        prototype: "Silica::Item"
        exports: ["Sailfish.Silica.private/BubbleBackground 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Corners"
            values: {
                "NoCorners": 0,
                "TopLeft": 1,
                "TopRight": 2,
                "BottomRight": 4,
                "BottomLeft": 8,
                "AllCorners": 15
            }
        }
        Property { name: "radius"; type: "float" }
        Property { name: "color"; type: "QColor" }
        Property { name: "roundedCorners"; type: "BubbleBackgroundItem::Corners" }
    }
    Component {
        name: "ButtonLayout"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica/ButtonLayout 1.0"]
        exportMetaObjectRevisions: [0]
        attachedType: "ButtonLayoutAttached"
        Property { name: "rowSpacing"; type: "float" }
        Property { name: "columnSpacing"; type: "float" }
        Property { name: "preferredWidth"; type: "float" }
    }
    Component {
        name: "ButtonLayoutAttached"
        prototype: "QObject"
        Property { name: "newLine"; type: "bool" }
    }
    Component {
        name: "ContactDetailActionHelper"
        prototype: "QObject"
        exports: ["Sailfish.Contacts/ContactDetailActionHelper 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "handlerExistsForActionType"
            type: "bool"
            Parameter { name: "actionType"; type: "string" }
        }
    }
    Component {
        name: "ContactDetailSuggestions"
        prototype: "QObject"
        exports: ["Sailfish.Contacts/ContactDetailSuggestions 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Field"
            values: {
                "None": 0,
                "AddressStreet": 1,
                "AddressLocality": 2,
                "AddressRegion": 3,
                "AddressPostCode": 4,
                "AddressCountry": 5,
                "AddressPostOfficeBox": 6,
                "Hobby": 7,
                "OrganizationName": 8,
                "OrganizationDepartment": 9,
                "OrganizationLocation": 10,
                "OrganizationRole": 11,
                "OrganizationTitle": 12,
                "OrganizationAssistantName": 13
            }
        }
        Property { name: "suggestions"; type: "QStringList"; isReadonly: true }
        Property { name: "field"; type: "Field" }
        Property { name: "partialText"; type: "string" }
        Property { name: "maximumSuggesions"; type: "int" }
        Signal { name: "maximumSuggestionsChanged" }
    }
    Component {
        name: "ContactImporter"
        prototype: "QObject"
        exports: ["Sailfish.Contacts/ContactImporter 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "importing"; type: "bool"; isReadonly: true }
        Signal { name: "managerChanged" }
        Signal {
            name: "importFinished"
            Parameter { name: "readCount"; type: "int" }
            Parameter { name: "savedCount"; type: "int" }
        }
        Signal { name: "importFailed" }
        Signal {
            name: "fetchFirstSavedContactFinished"
            Parameter { name: "firstSavedContactId"; type: "int" }
        }
        Signal { name: "fetchFirstSavedContactFailed" }
        Method {
            name: "importContacts"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "importContactsData"
            Parameter { name: "vcard"; type: "string" }
        }
        Method { name: "cancel" }
        Method { name: "fetchFirstSavedContact" }
    }
    Component {
        name: "ContactSelectionModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Contacts/ContactSelectionModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "ContactIdRole": 257,
                "PropertyRole": 258,
                "PropertyTypeRole": 259
            }
        }
        Enum {
            name: "AddContactMode"
            values: {
                "SingleContactMode": 0,
                "BatchMode": 1
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal {
            name: "selectionAdded"
            Parameter { name: "propertyType"; type: "string" }
        }
        Signal { name: "selectionRemoved" }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "findContactId"
            type: "int"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "addContact"
            Parameter { name: "contactId"; type: "int" }
            Parameter { name: "property"; type: "QVariant" }
            Parameter { name: "propertyType"; type: "string" }
            Parameter { name: "mode"; type: "AddContactMode" }
        }
        Method {
            name: "addContact"
            Parameter { name: "contactId"; type: "int" }
            Parameter { name: "property"; type: "QVariant" }
            Parameter { name: "propertyType"; type: "string" }
        }
        Method {
            name: "removeContactAt"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "removeAllContacts" }
    }
    Component {
        name: "ContactsRemover"
        prototype: "QObject"
        exports: ["Sailfish.Contacts/ContactsRemover 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "removing"; type: "bool"; isReadonly: true }
        Signal {
            name: "removingFinished"
            Parameter { name: "removedCount"; type: "int" }
        }
        Signal { name: "removingFailed" }
        Method { name: "removeDeviceContacts" }
        Method { name: "cancel" }
    }
    Component {
        name: "DeclarativeBounceEffect"
        defaultProperty: "data"
        prototype: "QObject"
        exports: ["Sailfish.Silica/BounceEffect 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "difference"; type: "float"; isReadonly: true }
        Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Method {
            name: "handlePress"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method {
            name: "handleMove"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method { name: "handleRelease" }
    }
    Component {
        name: "DeclarativeBusyIndicatorSize"
        prototype: "QObject"
        exports: ["Sailfish.Silica/BusyIndicatorSize 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Size"
            values: {
                "ExtraSmall": 0,
                "Small": 1,
                "Medium": 2,
                "Large": 3
            }
        }
    }
    Component {
        name: "DeclarativeClipboard"
        prototype: "QObject"
        exports: ["Sailfish.Silica/Clipboard 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
        Property { name: "hasText"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "DeclarativeConfigApi"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/Config 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DemoMode"
            values: {
                "Normal": 0,
                "Demo": 1,
                "Retail": 2
            }
        }
        Property { name: "wayland"; type: "bool"; isReadonly: true }
        Property { name: "demoMode"; type: "DemoMode"; isReadonly: true }
        Property { name: "layoutGrid"; type: "bool"; isReadonly: true }
        Property { name: "sailfishVersion"; type: "float"; isReadonly: true }
        Property { name: "desktop"; type: "bool"; isReadonly: true }
        Method {
            name: "setCompositorWindows"
            Parameter { type: "QList<QObject*>" }
        }
    }
    Component {
        name: "DeclarativeCover"
        defaultProperty: "data"
        prototype: "Silica::Control"
        exports: ["Sailfish.Silica/Cover 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Inactive": 0,
                "Activating": 1,
                "Active": 2,
                "Deactivating": 3
            }
        }
        Enum {
            name: "Size"
            values: {
                "Small": 0,
                "Large": 1
            }
        }
        Property { name: "status"; type: "DeclarativeCover::Status"; isReadonly: true }
        Property { name: "allowResize"; type: "bool" }
        Property { name: "size"; type: "DeclarativeCover::Size"; isReadonly: true }
        Property { name: "transparent"; type: "bool" }
        Property { name: "coverActionArea"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Signal {
            name: "requestResize"
            Parameter { name: "w"; type: "float" }
            Parameter { name: "h"; type: "float" }
        }
        Signal { name: "applicationWindowChanged" }
        Method {
            name: "tryResize"
            Parameter { name: "w"; type: "float" }
            Parameter { name: "h"; type: "float" }
            Parameter { name: "allowResize"; type: "bool" }
        }
    }
    Component {
        name: "DeclarativeCoverAction"
        prototype: "QObject"
        exports: ["Sailfish.Silica/CoverAction 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "iconSource"; type: "QUrl" }
        Signal { name: "triggered" }
    }
    Component {
        name: "DeclarativeCoverActionList"
        defaultProperty: "actions"
        prototype: "QObject"
        exports: ["Sailfish.Silica/CoverActionList 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "actions"; type: "DeclarativeCoverAction"; isList: true; isReadonly: true }
        Property { name: "enabled"; type: "bool" }
        Property { name: "iconBackground"; type: "bool" }
        Property { name: "window"; type: "QWindow"; isPointer: true }
        Signal {
            name: "windowChanged"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method {
            name: "trigger"
            Parameter { name: "id"; type: "int" }
        }
    }
    Component {
        name: "DeclarativeCoverWindow"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["Sailfish.Silica.private/CoverWindow 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "cover"; type: "DeclarativeCover"; isPointer: true }
        Property { name: "mainWindow"; type: "QObject"; isPointer: true }
        Method {
            name: "setContentSize"
            Parameter { name: "w"; type: "float" }
            Parameter { name: "h"; type: "float" }
        }
    }
    Component {
        name: "DeclarativeDateTime"
        prototype: "QObject"
        exports: ["Sailfish.Silica/DateTime 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HourMode"
            values: {
                "DefaultHours": 0,
                "TwentyFourHours": 1,
                "TwelveHours": 2
            }
        }
    }
    Component {
        name: "DeclarativeDialogResult"
        prototype: "QObject"
        exports: ["Sailfish.Silica/DialogResult 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Result"
            values: {
                "None": 0,
                "Accepted": 1,
                "Rejected": 2
            }
        }
    }
    Component {
        name: "DeclarativeDialogStatus"
        prototype: "QObject"
        exports: ["Sailfish.Silica/DialogStatus 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Closed": 0,
                "Opening": 1,
                "Opened": 2,
                "Closing": 3
            }
        }
    }
    Component {
        name: "DeclarativeDimmedRegion"
        defaultProperty: "data"
        prototype: "Silica::Item"
        exports: ["Sailfish.Silica/DimmedRegion 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Property { name: "area"; type: "QRectF" }
        Property { name: "target"; type: "QQuickItem"; isPointer: true }
        Property { name: "exclude"; type: "QQuickItem"; isList: true; isReadonly: true }
        Method { name: "updateRegion" }
    }
    Component {
        name: "DeclarativeDock"
        prototype: "QObject"
        exports: ["Sailfish.Silica/Dock 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Dock"
            values: {
                "Left": 0,
                "Top": 1,
                "Right": 2,
                "Bottom": 3
            }
        }
    }
    Component {
        name: "DeclarativeDragFilter"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/DragFilter 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "canceled"; type: "bool"; isReadonly: true }
        Property { name: "screenMargin"; type: "float" }
        Property { name: "orientations"; type: "Qt::Orientations" }
        Method {
            name: "begin"
            Parameter { name: "x"; type: "float" }
            Parameter { name: "y"; type: "float" }
        }
        Method { name: "end" }
        Method { name: "cancelClick" }
    }
    Component {
        name: "DeclarativeEnterKey"
        prototype: "QObject"
        exports: ["Sailfish.Silica/EnterKey 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "text"; type: "string" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "highlighted"; type: "bool" }
        Signal { name: "clicked" }
    }
    Component {
        name: "DeclarativeFocusBehavior"
        prototype: "QObject"
        exports: ["Sailfish.Silica/FocusBehavior 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FocusBehavior"
            values: {
                "ClearItemFocus": 0,
                "ClearPageFocus": 1,
                "KeepFocus": 2
            }
        }
    }
    Component {
        name: "DeclarativeFormatter"
        prototype: "QObject"
        exports: [
            "Sailfish.Silica/Format 1.0",
            "Sailfish.Silica/Formatter 1.0"
        ]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0, 0]
        Enum {
            name: "FormatType"
            values: {
                "Timepoint": 0,
                "TimepointRelative": 1,
                "TimepointRelativeCurrentDay": 2,
                "TimepointRelativeCurrentDayDetailed": 3,
                "TimepointSectionRelative": 4,
                "TimepointSectionHistorical": 5,
                "WeekdayNameStandalone": 6,
                "DurationElapsed": 7,
                "DurationElapsedShort": 8,
                "TimeValueTwelveHours": 9,
                "TimeValueTwentyFourHours": 10,
                "TimeValue": 11,
                "DurationShort": 12,
                "DurationLong": 13,
                "DateFull": 14,
                "DateLong": 15,
                "MonthNameStandalone": 16,
                "MonthNameStandaloneShort": 17,
                "DateMedium": 18,
                "DateMediumWithoutYear": 19,
                "DateFullWithoutYear": 20
            }
        }
        Enum {
            name: "ArticleType"
            values: {
                "AnteMeridiemIndicator": 0,
                "PostMeridiemIndicator": 1
            }
        }
        Enum {
            name: "TextFormatType"
            values: {
                "Ascii7Bit": 0,
                "PortableFilename": 1
            }
        }
        Method {
            name: "formatDate"
            type: "string"
            Parameter { name: "dateTime"; type: "QDateTime" }
            Parameter { name: "formatType"; type: "int" }
        }
        Method {
            name: "formatArticle"
            type: "string"
            Parameter { name: "articleType"; type: "int" }
        }
        Method {
            name: "formatDuration"
            type: "string"
            Parameter { name: "seconds"; type: "int" }
            Parameter { name: "formatType"; type: "int" }
        }
        Method {
            name: "formatFileSize"
            type: "string"
            Parameter { name: "bytes"; type: "qlonglong" }
            Parameter { name: "precision"; type: "int" }
        }
        Method {
            name: "formatFileSize"
            type: "string"
            Parameter { name: "bytes"; type: "qlonglong" }
        }
        Method {
            name: "formatText"
            type: "string"
            Parameter { name: "input"; type: "string" }
            Parameter { name: "formatType"; type: "int" }
        }
        Method {
            name: "_needsSpaceBetweenNames"
            type: "bool"
            Parameter { name: "first"; type: "string" }
            Parameter { name: "second"; type: "string" }
        }
        Method {
            name: "_joinNames"
            type: "string"
            Parameter { name: "first"; type: "string" }
            Parameter { name: "second"; type: "string" }
        }
        Method {
            name: "trId"
            type: "string"
            Parameter { name: "id"; type: "string" }
            Parameter { name: "catalog"; type: "string" }
            Parameter { name: "n"; type: "int" }
            Parameter { name: "localeName"; type: "string" }
        }
        Method {
            name: "trId"
            type: "string"
            Parameter { name: "id"; type: "string" }
            Parameter { name: "catalog"; type: "string" }
            Parameter { name: "n"; type: "int" }
        }
        Method {
            name: "trId"
            type: "string"
            Parameter { name: "id"; type: "string" }
            Parameter { name: "catalog"; type: "string" }
        }
        Method {
            name: "textDirection"
            type: "int"
            Parameter { name: "s"; type: "string" }
        }
    }
    Component {
        name: "DeclarativeGlassItem"
        defaultProperty: "data"
        prototype: "Silica::Item"
        exports: ["Sailfish.Silica/GlassItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Property { name: "backgroundColor"; type: "QColor" }
        Property { name: "pattern"; type: "QUrl" }
        Property { name: "dimmed"; type: "bool" }
        Property { name: "cache"; type: "bool" }
        Property { name: "radius"; type: "float" }
        Property { name: "falloffRadius"; type: "float" }
        Property { name: "defaultFalloffRadius"; type: "float"; isReadonly: true }
        Property { name: "ratio"; type: "float" }
        Property { name: "dashed"; type: "bool" }
        Property { name: "dashOffset"; type: "float" }
        Property { name: "dashLength"; type: "float" }
        Property { name: "dashMargin"; type: "float" }
        Property { name: "brightness"; type: "float" }
    }
    Component {
        name: "DeclarativeOpacityRamp"
        prototype: "QObject"
        exports: ["Sailfish.Silica/OpacityRamp 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Direction"
            values: {
                "LeftToRight": 0,
                "RightToLeft": 1,
                "TopToBottom": 2,
                "BottomToTop": 3
            }
        }
    }
    Component {
        name: "DeclarativeOrientation"
        prototype: "QObject"
        exports: ["Sailfish.Silica/Orientation 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Orientation"
            values: {
                "None": 0,
                "Portrait": 1,
                "Landscape": 2,
                "PortraitInverted": 4,
                "LandscapeInverted": 8,
                "PortraitMask": 5,
                "LandscapeMask": 10,
                "All": 15
            }
        }
        Enum {
            name: "Orientations"
            values: {
                "None": 0,
                "Portrait": 1,
                "Landscape": 2,
                "PortraitInverted": 4,
                "LandscapeInverted": 8,
                "PortraitMask": 5,
                "LandscapeMask": 10,
                "All": 15
            }
        }
    }
    Component {
        name: "DeclarativePageNavigation"
        prototype: "QObject"
        exports: ["Sailfish.Silica/PageNavigation 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Navigation"
            values: {
                "NoNavigation": 0,
                "Back": 1,
                "Forward": 2,
                "None": 0
            }
        }
        Enum {
            name: "Direction"
            values: {
                "NoDirection": 0,
                "Up": 1,
                "Down": 2,
                "Left": 3,
                "Right": 4
            }
        }
        Enum {
            name: "Style"
            values: {
                "Horizontal": 0,
                "Vertical": 1
            }
        }
    }
    Component {
        name: "DeclarativePageStackAction"
        prototype: "QObject"
        exports: ["Sailfish.Silica/PageStackAction 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Action"
            values: {
                "Push": 0,
                "Replace": 1,
                "Pop": 2
            }
        }
        Enum {
            name: "OperationType"
            values: {
                "Animated": 0,
                "Immediate": 1
            }
        }
    }
    Component {
        name: "DeclarativePageStackBase"
        defaultProperty: "data"
        prototype: "Silica::Control"
        exports: ["Sailfish.Silica/PageStackBase 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Property { name: "depth"; type: "int" }
        Property { name: "backNavigation"; type: "bool" }
        Property { name: "forwardNavigation"; type: "bool" }
        Property { name: "horizontalNavigationStyle"; type: "bool"; isReadonly: true }
        Property { name: "navigationStyle"; type: "DeclarativePageNavigation::Style" }
        Property { name: "_leftFlickDifference"; type: "float"; isReadonly: true }
        Property { name: "_rightFlickDifference"; type: "float"; isReadonly: true }
        Property { name: "_upFlickDifference"; type: "float"; isReadonly: true }
        Property { name: "_downFlickDifference"; type: "float"; isReadonly: true }
        Property { name: "_ongoingTransitionCount"; type: "int" }
        Property { name: "_currentContainer"; type: "QQuickItem"; isPointer: true }
        Property { name: "currentPage"; type: "QQuickItem"; isPointer: true }
        Property { name: "_noGrabbing"; type: "bool" }
        Signal { name: "backFlickDifferenceChanged" }
        Signal { name: "forwardFlickDifferenceChanged" }
        Signal { name: "upFlickDifferenceChanged" }
        Signal { name: "downFlickDifferenceChanged" }
        Signal { name: "ongoingTransitionCountChanged" }
        Signal { name: "currentContainerChanged" }
        Signal { name: "noGrabbingChanged" }
        Signal { name: "pressed" }
        Signal { name: "released" }
        Signal { name: "canceled" }
        Method {
            name: "handlePress"
            type: "bool"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method {
            name: "handleMove"
            type: "bool"
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method { name: "handleRelease" }
        Method {
            name: "resolveImportPage"
            type: "string"
            Parameter { name: "page"; type: "string" }
        }
        Method { name: "_grabMouse" }
    }
    Component {
        name: "DeclarativePageStatus"
        prototype: "QObject"
        exports: ["Sailfish.Silica/PageStatus 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Inactive": 0,
                "Activating": 1,
                "Active": 2,
                "Deactivating": 3
            }
        }
    }
    Component {
        name: "DeclarativePreeditText"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/PreeditText 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
    }
    Component {
        name: "DeclarativeQuickScrollButtonBase"
        defaultProperty: "data"
        prototype: "Silica::Control"
        exports: ["Sailfish.Silica.private/QuickScrollButtonBase 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "flickable"; type: "QQuickItem"; isPointer: true }
        Signal { name: "clicked" }
    }
    Component {
        name: "DeclarativeStandardPaths"
        prototype: "QObject"
        exports: ["Sailfish.Silica/StandardPaths 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "cache"; type: "string"; isReadonly: true }
        Property { name: "data"; type: "string"; isReadonly: true }
        Property { name: "documents"; type: "string"; isReadonly: true }
        Property { name: "download"; type: "string"; isReadonly: true }
        Property { name: "genericData"; type: "string"; isReadonly: true }
        Property { name: "music"; type: "string"; isReadonly: true }
        Property { name: "pictures"; type: "string"; isReadonly: true }
        Property { name: "videos"; type: "string"; isReadonly: true }
        Property { name: "home"; type: "string"; isReadonly: true }
        Property { name: "temporary"; type: "string"; isReadonly: true }
    }
    Component {
        name: "DeclarativeTabViewAction"
        prototype: "QObject"
        exports: ["Sailfish.Silica/TabViewAction 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "OperationType"
            values: {
                "Animated": 0,
                "Immediate": 1
            }
        }
    }
    Component {
        name: "DeclarativeTextBaseItem"
        defaultProperty: "data"
        prototype: "Silica::Control"
        exports: ["Sailfish.Silica.private/TextBaseItem 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HAlignment"
            values: {
                "AlignLeft": 1,
                "AlignRight": 2,
                "AlignHCenter": 4
            }
        }
        Property { name: "horizontalAlignment"; type: "HAlignment" }
        Property { name: "explicitHorizontalAlignment"; type: "bool"; isReadonly: true }
        Method {
            name: "setImplicitHorizontalAlignment"
            Parameter { name: "alignment"; type: "HAlignment" }
        }
    }
    Component {
        name: "DeclarativeTouchBlocker"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica/TouchBlocker 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "target"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        name: "DeclarativeTouchInteraction"
        prototype: "QObject"
        exports: ["Sailfish.Silica/TouchInteraction 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Direction"
            values: {
                "Left": 0,
                "Up": 1,
                "Right": 2,
                "Down": 3
            }
        }
        Enum {
            name: "Mode"
            values: {
                "Swipe": 0,
                "EdgeSwipe": 1,
                "Pull": 2
            }
        }
    }
    Component {
        name: "DeclarativeTruncationMode"
        prototype: "QObject"
        exports: ["Sailfish.Silica/TruncationMode 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Mode"
            values: {
                "None": 0,
                "Elide": 1,
                "Fade": 2
            }
        }
    }
    Component {
        name: "DeclarativeUnderline"
        defaultProperty: "data"
        prototype: "Silica::Item"
        exports: ["Sailfish.Silica.private/Underline 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "primaryColor"; type: "QColor" }
        Property { name: "secondaryColor"; type: "QColor" }
    }
    Component {
        name: "DeclarativeUtil"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/Util 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "weekNumberList"
            type: "QList<int>"
            Parameter { name: "year"; type: "int" }
            Parameter { name: "month"; type: "int" }
            Parameter { name: "day"; type: "int" }
            Parameter { name: "amount"; type: "int" }
        }
        Method {
            name: "asyncInvoke"
            Parameter { name: "callable"; type: "QJSValue" }
        }
        Method {
            name: "instanceOf"
            type: "bool"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
            Parameter { name: "className"; type: "string" }
        }
    }
    Component {
        name: "DeclarativeVariantInterpolator"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/VariantInterpolator 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "from"; type: "QVariant" }
        Property { name: "to"; type: "QVariant" }
        Property { name: "progress"; type: "float" }
        Property { name: "value"; type: "QVariant"; isReadonly: true }
    }
    Component {
        name: "DeclarativeVisibilityCull"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/VisibilityCull 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "target"; type: "QQuickItem"; isPointer: true }
        Property { name: "enabled"; type: "bool" }
    }
    Component {
        name: "DeclarativeWindow"
        defaultProperty: "data"
        prototype: "Silica::Control"
        exports: ["Sailfish.Silica.private/Window 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "orientation"; type: "DeclarativeOrientation::Orientation"; isReadonly: true }
        Property { name: "_pageOrientation"; type: "DeclarativeOrientation::Orientation" }
        Property { name: "deviceOrientation"; type: "DeclarativeOrientation::Orientation" }
        Property {
            name: "defaultAllowedOrientations"
            type: "DeclarativeOrientation::Orientations"
            isReadonly: true
        }
        Property { name: "_allowedOrientations"; type: "DeclarativeOrientation::Orientations" }
        Property { name: "screenRotation"; type: "int"; isReadonly: true }
        Property { name: "_backgroundVisible"; type: "bool" }
        Property { name: "_persistentOpenGLContext"; type: "bool" }
        Property { name: "_persistentSceneGraph"; type: "bool" }
        Property { name: "_haveCoverHint"; type: "bool" }
        Property { name: "_backgroundColor"; type: "QColor" }
        Property { name: "_coverIsPrimaryWindow"; type: "bool" }
        Property { name: "_coverVisible"; type: "bool" }
        Property { name: "_proxyWindow"; type: "QQuickWindow"; isPointer: true }
        Property { name: "_mainWindow"; type: "QWindow"; isPointer: true }
        Property { name: "_windowOpacity"; type: "float" }
        Property { name: "_backgroundRect"; type: "QRectF" }
        Signal { name: "_orientationLockedChanged" }
        Signal { name: "backgroundColorChanged" }
        Signal { name: "backgroundVisibleChanged" }
        Signal { name: "coverIsPrimaryWindowChanged" }
        Signal { name: "coverVisibleChanged" }
        Signal { name: "proxyWindowChanged" }
        Signal { name: "mainWindowChanged" }
        Signal {
            name: "switcherWindowChanged"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Signal { name: "haveCoverChanged" }
        Signal { name: "windowOpacityChanged" }
        Signal { name: "backgroundRectChanged" }
        Method { name: "activate" }
        Method { name: "deactivate" }
        Method { name: "_processPendingDeletions" }
        Method {
            name: "_selectOrientation"
            type: "int"
            Parameter { type: "int" }
            Parameter { type: "int" }
        }
        Method {
            name: "_selectOrientation"
            type: "int"
            Parameter { type: "int" }
        }
        Method {
            name: "_setCover"
            Parameter { name: "window"; type: "QObject"; isPointer: true }
        }
        Method { name: "_updateCoverVisibility" }
    }
    Component {
        name: "DragDetectorItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/DragDetectorItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "flickable"; type: "QQuickItem"; isPointer: true }
        Property { name: "horizontalDragUnused"; type: "bool"; isReadonly: true }
        Property { name: "verticalDragUnused"; type: "bool"; isReadonly: true }
        Method { name: "reset" }
    }
    Component {
        name: "FilterType"
        prototype: "QObject"
        exports: ["Sailfish.Contacts/FilterType 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "All": 0,
                "FavoritesOnly": 1,
                "OnlineOnly": 2
            }
        }
    }
    Component {
        name: "FormattingProxyModel"
        prototype: "QIdentityProxyModel"
        exports: ["Sailfish.Silica/FormattingProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "formattedProperties"; type: "QVariantList" }
    }
    Component {
        name: "GlassBackground"
        defaultProperty: "data"
        prototype: "Silica::Item"
        exports: ["Sailfish.Silica.private/GlassBackgroundBase 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FillMode"
            values: {
                "PreserveAspectWidth": 0,
                "PreserveAspectSquare": 1
            }
        }
        Property { name: "patternItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "transformItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "radius"; type: "float" }
        Property { name: "contentAngle"; type: "float" }
        Property { name: "color"; type: "QColor" }
        Property { name: "patternOpacity"; type: "float" }
        Property { name: "fillMode"; type: "FillMode" }
        Property { name: "blending"; type: "bool" }
    }
    Component {
        name: "HorizontalAutoScroll"
        prototype: "AutoScroll"
        exports: ["Sailfish.Silica/HorizontalAutoScroll 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "leftMargin"; type: "float" }
        Property { name: "rightMargin"; type: "float" }
    }
    Component {
        name: "KnownContacts"
        prototype: "QObject"
        exports: ["org.nemomobile.contacts/KnownContacts 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "storeContact"
            type: "bool"
            Parameter { name: "contact"; type: "QVariantMap" }
        }
        Method {
            name: "storeContacts"
            type: "bool"
            Parameter { name: "contacts"; type: "QVariantList" }
        }
    }
    Component {
        name: "MInverseMouseArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica/InverseMouseArea 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "enabled"; type: "bool" }
        Property { name: "stealPress"; type: "bool" }
        Signal {
            name: "pressedOutside"
            Parameter { name: "mouseX"; type: "int" }
            Parameter { name: "mouseY"; type: "int" }
        }
        Signal {
            name: "clickedOutside"
            Parameter { name: "mouseX"; type: "int" }
            Parameter { name: "mouseY"; type: "int" }
        }
        Method { name: "cancelTouch" }
    }
    Component {
        name: "OverlayBackground"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/OverlayBackground 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "OverlayBackgroundSource"; isPointer: true }
        Property { name: "capture"; type: "bool" }
    }
    Component {
        name: "OverlayBackgroundSource"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica.private/OverlayBackgroundSource 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "live"; type: "bool" }
        Property { name: "backgroundItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "sourceItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "capturing"; type: "bool"; isReadonly: true }
        Method { name: "scheduleUpdate" }
    }
    Component {
        name: "OverlayGradient"
        defaultProperty: "data"
        prototype: "Silica::Item"
        exports: ["Sailfish.Silica.private/OverlayGradientBase 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Direction"
            values: {
                "LeftToRight": 0,
                "RightToLeft": 1,
                "TopToBottom": 2,
                "BottomToTop": 3
            }
        }
        Property { name: "startColor"; type: "QColor" }
        Property { name: "endColor"; type: "QColor" }
        Property { name: "noise"; type: "QUrl" }
        Property { name: "noiseWeight"; type: "float" }
        Property { name: "direction"; type: "Direction" }
    }
    Component {
        name: "PresenceListener"
        prototype: "QObject"
        exports: ["Sailfish.Contacts/PresenceListener 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "ready"; type: "bool"; isReadonly: true }
        Property { name: "globalPresenceState"; type: "int"; isReadonly: true }
        Property { name: "accounts"; type: "QVariantList"; isReadonly: true }
        Property { name: "selfDetails"; type: "QVariantMap"; isReadonly: true }
        Method {
            name: "presenceStateText"
            type: "string"
            Parameter { name: "presenceState"; type: "int" }
        }
    }
    Component {
        name: "PulleyMenuLogic"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/PulleyMenuLogic 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pullDownType"; type: "bool" }
        Property { name: "flickable"; type: "QObject"; isPointer: true }
        Property { name: "dragDistance"; type: "float"; isReadonly: true }
        Signal { name: "finalPositionReached" }
        Signal {
            name: "flickableChanged"
            Parameter { name: "arg"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "pullDownTypeChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "animateFlick"
            Parameter { name: "duration"; type: "float" }
            Parameter { name: "position"; type: "float" }
        }
        Method { name: "outOfBounds"; type: "bool" }
        Method { name: "monitorFlick" }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component { name: "QIdentityProxyModel"; prototype: "QAbstractProxyModel" }
    Component {
        name: "QQuickWindow"
        defaultProperty: "data"
        prototype: "QWindow"
        Enum {
            name: "SceneGraphError"
            values: {
                "ContextNotAvailable": 1
            }
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal {
            name: "openglContextCreated"
            revision: 2
            Parameter { name: "context"; type: "QOpenGLContext"; isPointer: true }
        }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "afterSynchronizing"; revision: 2 }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "afterAnimating"; revision: 2 }
        Signal { name: "sceneGraphAboutToStop"; revision: 2 }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal { name: "activeFocusItemChanged"; revision: 1 }
        Signal {
            name: "sceneGraphError"
            revision: 2
            Parameter { name: "error"; type: "QQuickWindow::SceneGraphError" }
            Parameter { name: "message"; type: "string" }
        }
        Method { name: "update" }
        Method { name: "releaseResources" }
    }
    Component {
        name: "QWindow"
        prototype: "QObject"
        Enum {
            name: "Visibility"
            values: {
                "Hidden": 0,
                "AutomaticVisibility": 1,
                "Windowed": 2,
                "Minimized": 3,
                "Maximized": 4,
                "FullScreen": 5
            }
        }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "visible"; type: "bool" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "visibility"; revision: 1; type: "Visibility" }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "float" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 2
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            revision: 1
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Signal { name: "activeChanged"; revision: 1 }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "float" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "requestUpdate"; revision: 3 }
    }
    Component {
        name: "RemorseCache"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/RemorseCache 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "item"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        name: "SeasideDisplayLabelGroupModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.contacts/PeopleDisplayLabelGroupModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Role"
            values: {
                "NameRole": 256,
                "CompressedRole": 257,
                "CompressedContentRole": 258
            }
        }
        Enum {
            name: "RequiredPropertyType"
            values: {
                "NoPropertyRequired": 0,
                "AccountUriRequired": 1,
                "PhoneNumberRequired": 2,
                "EmailAddressRequired": 4
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "minimumCount"; type: "int"; isReadonly: true }
        Property { name: "maximumCount"; type: "int" }
        Property { name: "requiredProperty"; type: "int" }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
    }
    Component {
        name: "SeasideFilteredModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.contacts/PeopleModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FilterType"
            values: {
                "FilterNone": 0,
                "FilterAll": 1,
                "FilterFavorites": 2,
                "FilterOnline": 3,
                "FilterTypesCount": 4
            }
        }
        Enum {
            name: "RequiredPropertyType"
            values: {
                "NoPropertyRequired": 0,
                "AccountUriRequired": 1,
                "PhoneNumberRequired": 2,
                "EmailAddressRequired": 4,
                "OrganizationRequired": 8
            }
        }
        Enum {
            name: "SearchablePropertyType"
            values: {
                "NoPropertySearchable": 0,
                "AccountUriSearchable": 1,
                "PhoneNumberSearchable": 2,
                "EmailAddressSearchable": 4,
                "OrganizationSearchable": 8
            }
        }
        Enum {
            name: "DisplayLabelOrder"
            values: {
                "FirstNameFirst": 0,
                "LastNameFirst": 1
            }
        }
        Enum {
            name: "PeopleRoles"
            values: {
                "FirstNameRole": 256,
                "LastNameRole": 257,
                "FavoriteRole": 258,
                "AvatarRole": 259,
                "AvatarUrlRole": 260,
                "SectionBucketRole": 261,
                "GlobalPresenceStateRole": 262,
                "ContactIdRole": 263,
                "PhoneNumbersRole": 264,
                "EmailAddressesRole": 265,
                "AccountUrisRole": 266,
                "AccountPathsRole": 267,
                "PersonRole": 268,
                "PrimaryNameRole": 269,
                "SecondaryNameRole": 270,
                "NicknameDetailsRole": 271,
                "PhoneDetailsRole": 272,
                "EmailDetailsRole": 273,
                "AccountDetailsRole": 274,
                "NoteDetailsRole": 275,
                "CompanyNameRole": 276,
                "TitleRole": 277,
                "RoleRole": 278,
                "NameDetailsRole": 279,
                "FilterMatchDataRole": 280
            }
        }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Property { name: "filterType"; type: "FilterType" }
        Property { name: "displayLabelOrder"; type: "DisplayLabelOrder" }
        Property { name: "sortProperty"; type: "string"; isReadonly: true }
        Property { name: "groupProperty"; type: "string"; isReadonly: true }
        Property { name: "filterPattern"; type: "string" }
        Property { name: "requiredProperty"; type: "int" }
        Property { name: "searchableProperty"; type: "int" }
        Property { name: "searchByFirstNameCharacter"; type: "bool" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "placeholderDisplayLabel"; type: "string"; isReadonly: true }
        Signal {
            name: "savePersonSucceeded"
            Parameter { name: "localId"; type: "int" }
            Parameter { name: "aggregateId"; type: "int" }
        }
        Signal { name: "savePersonFailed" }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "savePerson"
            type: "bool"
            Parameter { name: "person"; type: "SeasidePerson"; isPointer: true }
        }
        Method {
            name: "personByRow"
            type: "SeasidePerson*"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "personById"
            type: "SeasidePerson*"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "personByPhoneNumber"
            type: "SeasidePerson*"
            Parameter { name: "number"; type: "string" }
            Parameter { name: "requireComplete"; type: "bool" }
        }
        Method {
            name: "personByPhoneNumber"
            type: "SeasidePerson*"
            Parameter { name: "number"; type: "string" }
        }
        Method {
            name: "personByEmailAddress"
            type: "SeasidePerson*"
            Parameter { name: "email"; type: "string" }
            Parameter { name: "requireComplete"; type: "bool" }
        }
        Method {
            name: "personByEmailAddress"
            type: "SeasidePerson*"
            Parameter { name: "email"; type: "string" }
        }
        Method {
            name: "personByOnlineAccount"
            type: "SeasidePerson*"
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUid"; type: "string" }
            Parameter { name: "requireComplete"; type: "bool" }
        }
        Method {
            name: "personByOnlineAccount"
            type: "SeasidePerson*"
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUid"; type: "string" }
        }
        Method { name: "selfPerson"; type: "SeasidePerson*" }
        Method {
            name: "removePerson"
            Parameter { name: "person"; type: "SeasidePerson"; isPointer: true }
        }
        Method {
            name: "removePeople"
            Parameter { name: "people"; type: "QVariantList" }
        }
        Method {
            name: "importContacts"
            type: "int"
            Parameter { name: "path"; type: "string" }
        }
        Method { name: "exportContacts"; type: "string" }
        Method { name: "prepareSearchFilters" }
        Method {
            name: "firstIndexInGroup"
            type: "int"
            Parameter { name: "sectionBucket"; type: "string" }
        }
        Method {
            name: "setFilter"
            Parameter { name: "type"; type: "FilterType" }
        }
        Method {
            name: "search"
            Parameter { name: "pattern"; type: "string" }
        }
    }
    Component {
        name: "SeasidePerson"
        prototype: "QObject"
        exports: ["org.nemomobile.contacts/Person 1.0"]
        exportMetaObjectRevisions: [0]
        attachedType: "SeasidePersonAttached"
        Enum {
            name: "DetailType"
            values: {
                "NoType": 0,
                "FirstNameType": 1,
                "LastNameType": 2,
                "MiddleNameType": 3,
                "PrefixType": 4,
                "SuffixType": 5,
                "CompanyType": 6,
                "TitleType": 7,
                "RoleType": 8,
                "DepartmentType": 9,
                "NicknameType": 10,
                "PhoneNumberType": 11,
                "EmailAddressType": 12,
                "OnlineAccountType": 13,
                "AddressType": 14,
                "WebsiteType": 15,
                "BirthdayType": 16,
                "AnniversaryType": 17,
                "GlobalPresenceStateType": 18,
                "NoteType": 19
            }
        }
        Enum {
            name: "DetailSubType"
            values: {
                "NoSubType": 0,
                "PhoneSubTypeLandline": 1,
                "PhoneSubTypeMobile": 2,
                "PhoneSubTypeFax": 3,
                "PhoneSubTypePager": 4,
                "PhoneSubTypeVoice": 5,
                "PhoneSubTypeModem": 6,
                "PhoneSubTypeVideo": 7,
                "PhoneSubTypeCar": 8,
                "PhoneSubTypeBulletinBoardSystem": 9,
                "PhoneSubTypeMessagingCapable": 10,
                "PhoneSubTypeAssistant": 11,
                "PhoneSubTypeDtmfMenu": 12,
                "AddressSubTypeParcel": 13,
                "AddressSubTypePostal": 14,
                "AddressSubTypeDomestic": 15,
                "AddressSubTypeInternational": 16,
                "OnlineAccountSubTypeSip": 17,
                "OnlineAccountSubTypeSipVoip": 18,
                "OnlineAccountSubTypeImpp": 19,
                "OnlineAccountSubTypeVideoShare": 20,
                "WebsiteSubTypeHomePage": 21,
                "WebsiteSubTypeBlog": 22,
                "WebsiteSubTypeFavorite": 23,
                "AnniversarySubTypeWedding": 24,
                "AnniversarySubTypeEngagement": 25,
                "AnniversarySubTypeHouse": 26,
                "AnniversarySubTypeEmployment": 27,
                "AnniversarySubTypeMemorial": 28
            }
        }
        Enum {
            name: "AddressField"
            values: {
                "AddressStreetField": 0,
                "AddressLocalityField": 1,
                "AddressRegionField": 2,
                "AddressPostcodeField": 3,
                "AddressCountryField": 4,
                "AddressPOBoxField": 5
            }
        }
        Enum {
            name: "DetailLabel"
            values: {
                "NoLabel": 0,
                "HomeLabel": 1,
                "WorkLabel": 2,
                "OtherLabel": 3
            }
        }
        Enum {
            name: "PresenceState"
            values: {
                "PresenceUnknown": 0,
                "PresenceAvailable": 1,
                "PresenceHidden": 2,
                "PresenceBusy": 3,
                "PresenceAway": 4,
                "PresenceExtendedAway": 5,
                "PresenceOffline": 6
            }
        }
        Property { name: "id"; type: "int"; isReadonly: true }
        Property { name: "complete"; type: "bool"; isReadonly: true }
        Property { name: "firstName"; type: "string" }
        Property { name: "lastName"; type: "string" }
        Property { name: "middleName"; type: "string" }
        Property { name: "namePrefix"; type: "string" }
        Property { name: "nameSuffix"; type: "string" }
        Property { name: "sectionBucket"; type: "string"; isReadonly: true }
        Property { name: "displayLabel"; type: "string"; isReadonly: true }
        Property { name: "primaryName"; type: "string"; isReadonly: true }
        Property { name: "secondaryName"; type: "string"; isReadonly: true }
        Property { name: "companyName"; type: "string" }
        Property { name: "title"; type: "string" }
        Property { name: "role"; type: "string" }
        Property { name: "department"; type: "string" }
        Property { name: "favorite"; type: "bool" }
        Property { name: "avatarPath"; type: "QUrl" }
        Property { name: "avatarUrl"; type: "QUrl" }
        Property { name: "nicknameDetails"; type: "QVariantList" }
        Property { name: "phoneDetails"; type: "QVariantList" }
        Property { name: "emailDetails"; type: "QVariantList" }
        Property { name: "addressDetails"; type: "QVariantList" }
        Property { name: "websiteDetails"; type: "QVariantList" }
        Property { name: "birthday"; type: "QDateTime" }
        Property { name: "anniversaryDetails"; type: "QVariantList" }
        Property { name: "globalPresenceState"; type: "PresenceState"; isReadonly: true }
        Property { name: "accountDetails"; type: "QVariantList" }
        Property { name: "noteDetails"; type: "QVariantList" }
        Property { name: "syncTarget"; type: "string"; isReadonly: true }
        Property { name: "constituents"; type: "QList<int>"; isReadonly: true }
        Property { name: "mergeCandidates"; type: "QList<int>"; isReadonly: true }
        Property { name: "resolving"; type: "bool"; isReadonly: true }
        Signal { name: "contactChanged" }
        Signal { name: "contactRemoved" }
        Signal { name: "aggregationOperationFinished" }
        Signal { name: "addressResolved" }
        Signal { name: "dataChanged" }
        Method {
            name: "recalculateDisplayLabel"
            Parameter { name: "order"; type: "SeasideCache::DisplayLabelOrder" }
        }
        Method { name: "recalculateDisplayLabel" }
        Method {
            name: "filteredAvatarUrl"
            type: "QUrl"
            Parameter { name: "metadataFragments"; type: "QStringList" }
        }
        Method { name: "filteredAvatarUrl"; type: "QUrl" }
        Method { name: "ensureComplete" }
        Method { name: "contactData"; type: "QVariant" }
        Method {
            name: "setContactData"
            Parameter { name: "data"; type: "QVariant" }
        }
        Method { name: "resetContactData" }
        Method { name: "vCard"; type: "string" }
        Method { name: "avatarUrls"; type: "QStringList" }
        Method {
            name: "avatarUrlsExcluding"
            type: "QStringList"
            Parameter { name: "excludeMetadata"; type: "QStringList" }
        }
        Method { name: "hasValidPhoneNumber"; type: "bool" }
        Method {
            name: "aggregateInto"
            Parameter { name: "person"; type: "SeasidePerson"; isPointer: true }
        }
        Method {
            name: "disaggregateFrom"
            Parameter { name: "person"; type: "SeasidePerson"; isPointer: true }
        }
        Method { name: "fetchConstituents" }
        Method { name: "fetchMergeCandidates" }
        Method {
            name: "resolvePhoneNumber"
            Parameter { name: "number"; type: "string" }
            Parameter { name: "requireComplete"; type: "bool" }
        }
        Method {
            name: "resolvePhoneNumber"
            Parameter { name: "number"; type: "string" }
        }
        Method {
            name: "resolveEmailAddress"
            Parameter { name: "address"; type: "string" }
            Parameter { name: "requireComplete"; type: "bool" }
        }
        Method {
            name: "resolveEmailAddress"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "resolveOnlineAccount"
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUid"; type: "string" }
            Parameter { name: "requireComplete"; type: "bool" }
        }
        Method {
            name: "resolveOnlineAccount"
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUid"; type: "string" }
        }
        Method {
            name: "removeDuplicatePhoneNumbers"
            type: "QVariantList"
            Parameter { name: "phoneNumbers"; type: "QVariantList" }
        }
        Method {
            name: "removeDuplicateOnlineAccounts"
            type: "QVariantList"
            Parameter { name: "onlineAccounts"; type: "QVariantList" }
        }
        Method {
            name: "removeDuplicateEmailAddresses"
            type: "QVariantList"
            Parameter { name: "emailAddresses"; type: "QVariantList" }
        }
    }
    Component {
        name: "SeasidePersonAttached"
        prototype: "QObject"
        Property { name: "selfPerson"; type: "SeasidePerson"; isReadonly: true; isPointer: true }
        Method {
            name: "normalizePhoneNumber"
            type: "string"
            Parameter { name: "input"; type: "string" }
        }
        Method {
            name: "minimizePhoneNumber"
            type: "string"
            Parameter { name: "input"; type: "string" }
        }
        Method {
            name: "validatePhoneNumber"
            type: "string"
            Parameter { name: "input"; type: "string" }
        }
        Method {
            name: "removeDuplicatePhoneNumbers"
            type: "QVariantList"
            Parameter { name: "phoneNumbers"; type: "QVariantList" }
        }
        Method {
            name: "removeDuplicateOnlineAccounts"
            type: "QVariantList"
            Parameter { name: "onlineAccounts"; type: "QVariantList" }
        }
        Method {
            name: "removeDuplicateEmailAddresses"
            type: "QVariantList"
            Parameter { name: "emailAddresses"; type: "QVariantList" }
        }
    }
    Component {
        name: "SeasideVCardModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.contacts/PeopleVCardModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "VCardRoles"
            values: {
                "PrimaryNameRole": 256,
                "SecondaryNameRole": 257,
                "AvatarRole": 258,
                "AvatarUrlRole": 259,
                "PhoneNumbersRole": 260,
                "EmailAddressesRole": 261,
                "NicknameDetailsRole": 262,
                "PhoneDetailsRole": 263,
                "EmailDetailsRole": 264,
                "PersonRole": 265
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "displayLabelOrder"; type: "DisplayLabelOrder"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "defaultCodec"; type: "string" }
        Method {
            name: "getPerson"
            type: "SeasidePerson*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "Silica::Control"
        defaultProperty: "data"
        prototype: "Silica::Item"
        exports: ["Sailfish.Silica/SilicaControl 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Silica::HighlightImageBase"
        defaultProperty: "data"
        prototype: "QQuickImageBase"
        exports: ["Sailfish.Silica.private/HighlightImageBase 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "palette"; type: "Silica::Palette"; isReadonly: true; isPointer: true }
        Property { name: "highlighted"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "colorWeight"; type: "float" }
        Property { name: "monochromeWeight"; type: "float" }
        Property { name: "fillMode"; type: "QQuickImage::FillMode" }
        Property { name: "horizontalAlignment"; type: "QQuickImage::HAlignment" }
        Property { name: "verticalAlignment"; type: "QQuickImage::VAlignment" }
    }
    Component {
        name: "Silica::Item"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Sailfish.Silica/SilicaItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "palette"; type: "Silica::Palette"; isReadonly: true; isPointer: true }
        Property { name: "highlighted"; type: "bool" }
    }
    Component {
        name: "Silica::LinkParser"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/LinkParser 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
        Property { name: "shortenUrl"; type: "bool" }
        Property { name: "linkedText"; type: "string"; isReadonly: true }
        Property { name: "parsing"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "Silica::MouseArea"
        defaultProperty: "data"
        prototype: "QQuickMouseArea"
        exports: ["Sailfish.Silica.private/SilicaMouseArea 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "palette"; type: "Silica::Palette"; isReadonly: true; isPointer: true }
        Property { name: "highlighted"; type: "bool" }
    }
    Component {
        name: "Silica::Palette"
        prototype: "QObject"
        exports: ["Sailfish.Silica/Palette 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "colorScheme"; type: "Silica::Theme::ColorScheme" }
        Property { name: "primaryColor"; type: "QColor" }
        Property { name: "secondaryColor"; type: "QColor" }
        Property { name: "highlightColor"; type: "QColor" }
        Property { name: "secondaryHighlightColor"; type: "QColor" }
        Property { name: "highlightBackgroundColor"; type: "QColor" }
        Property { name: "highlightDimmerColor"; type: "QColor" }
        Property { name: "overlayBackgroundColor"; type: "QColor" }
        Property { name: "backgroundGlowColor"; type: "QColor" }
        Property { name: "errorColor"; type: "QColor" }
        Property { name: "_wallpaperOverlayColor"; type: "QColor"; isReadonly: true }
        Property { name: "_coverOverlayColor"; type: "QColor"; isReadonly: true }
        Signal { name: "wallpaperOverlayColorChanged" }
        Signal { name: "coverOverlayColorChanged" }
    }
    Component {
        name: "Silica::Rectangle"
        defaultProperty: "data"
        prototype: "QQuickRectangle"
        exports: ["Sailfish.Silica.private/SilicaRectangle 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "palette"; type: "Silica::Palette"; isReadonly: true; isPointer: true }
        Property { name: "highlighted"; type: "bool" }
    }
    Component {
        name: "Silica::Screen"
        prototype: "QObject"
        exports: ["Sailfish.Silica/Screen 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SizeCategory"
            values: {
                "Small": 0,
                "Medium": 1,
                "Large": 2,
                "ExtraLarge": 3
            }
        }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
        Property { name: "widthRatio"; type: "float"; isReadonly: true }
        Property { name: "sizeCategory"; type: "SizeCategory"; isReadonly: true }
    }
    Component {
        name: "Silica::Text"
        defaultProperty: "data"
        prototype: "QQuickText"
        exports: ["Sailfish.Silica.private/SilicaText 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "palette"; type: "Silica::Palette"; isReadonly: true; isPointer: true }
        Property { name: "highlighted"; type: "bool" }
    }
    Component {
        name: "Silica::Theme"
        prototype: "QObject"
        exports: ["Sailfish.Silica/Theme 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PresenceMode"
            values: {
                "PresenceAvailable": 0,
                "PresenceAway": 1,
                "PresenceBusy": 2,
                "PresenceOffline": 3
            }
        }
        Enum {
            name: "ColorScheme"
            values: {
                "LightOnDark": 0,
                "DarkOnLight": 1
            }
        }
        Property { name: "pixelRatio"; type: "float"; isReadonly: true }
        Property { name: "colorScheme"; type: "ColorScheme"; isReadonly: true }
        Property { name: "fontFamilyHeading"; type: "string"; isReadonly: true }
        Property { name: "fontFamily"; type: "string"; isReadonly: true }
        Property { name: "fontSizeTiny"; type: "int"; isReadonly: true }
        Property { name: "fontSizeExtraSmall"; type: "int"; isReadonly: true }
        Property { name: "fontSizeSmall"; type: "int"; isReadonly: true }
        Property { name: "fontSizeMedium"; type: "int"; isReadonly: true }
        Property { name: "fontSizeLarge"; type: "int"; isReadonly: true }
        Property { name: "fontSizeExtraLarge"; type: "int"; isReadonly: true }
        Property { name: "fontSizeHuge"; type: "int"; isReadonly: true }
        Property { name: "fontSizeTinyBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeExtraSmallBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeSmallBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeMediumBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeLargeBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeExtraLargeBase"; type: "int"; isReadonly: true }
        Property { name: "fontSizeHugeBase"; type: "int"; isReadonly: true }
        Property { name: "itemSizeExtraSmall"; type: "float"; isReadonly: true }
        Property { name: "itemSizeSmall"; type: "float"; isReadonly: true }
        Property { name: "itemSizeMedium"; type: "float"; isReadonly: true }
        Property { name: "itemSizeLarge"; type: "float"; isReadonly: true }
        Property { name: "itemSizeExtraLarge"; type: "float"; isReadonly: true }
        Property { name: "itemSizeHuge"; type: "float"; isReadonly: true }
        Property { name: "iconSizeExtraSmall"; type: "float"; isReadonly: true }
        Property { name: "iconSizeSmall"; type: "float"; isReadonly: true }
        Property { name: "iconSizeSmallPlus"; type: "float"; isReadonly: true }
        Property { name: "iconSizeMedium"; type: "float"; isReadonly: true }
        Property { name: "iconSizeLarge"; type: "float"; isReadonly: true }
        Property { name: "iconSizeExtraLarge"; type: "float"; isReadonly: true }
        Property { name: "iconSizeLauncher"; type: "float"; isReadonly: true }
        Property { name: "launcherIconDirectories"; type: "QStringList"; isReadonly: true }
        Property { name: "buttonWidthExtraSmall"; type: "float"; isReadonly: true }
        Property { name: "buttonWidthSmall"; type: "float"; isReadonly: true }
        Property { name: "buttonWidthMedium"; type: "float"; isReadonly: true }
        Property { name: "buttonWidthLarge"; type: "float"; isReadonly: true }
        Property { name: "coverSizeSmall"; type: "QSize"; isReadonly: true }
        Property { name: "coverSizeLarge"; type: "QSize"; isReadonly: true }
        Property { name: "paddingSmall"; type: "float"; isReadonly: true }
        Property { name: "paddingMedium"; type: "float"; isReadonly: true }
        Property { name: "paddingLarge"; type: "float"; isReadonly: true }
        Property { name: "horizontalPageMargin"; type: "float"; isReadonly: true }
        Property { name: "_homePageMargin"; type: "float"; isReadonly: true }
        Property { name: "flickDeceleration"; type: "float"; isReadonly: true }
        Property { name: "maximumFlickVelocity"; type: "float"; isReadonly: true }
        Property { name: "pageStackIndicatorWidth"; type: "float"; isReadonly: true }
        Property { name: "highlightBackgroundOpacity"; type: "float"; isReadonly: true }
        Property { name: "highlightColor"; type: "QColor"; isReadonly: true }
        Property { name: "highlightBackgroundColor"; type: "QColor"; isReadonly: true }
        Property { name: "highlightDimmerColor"; type: "QColor"; isReadonly: true }
        Property { name: "primaryColor"; type: "QColor"; isReadonly: true }
        Property { name: "secondaryColor"; type: "QColor"; isReadonly: true }
        Property { name: "overlayBackgroundColor"; type: "QColor"; isReadonly: true }
        Property { name: "secondaryHighlightColor"; type: "QColor"; isReadonly: true }
        Property { name: "backgroundGlowColor"; type: "QColor"; isReadonly: true }
        Property { name: "errorColor"; type: "QColor"; isReadonly: true }
        Property { name: "_wallpaperOverlayColor"; type: "QColor"; isReadonly: true }
        Property { name: "_coverOverlayColor"; type: "QColor"; isReadonly: true }
        Property { name: "backgroundImage"; type: "QUrl"; isReadonly: true }
        Property { name: "_homeBackgroundImage"; type: "QUrl"; isReadonly: true }
        Property { name: "lightPrimaryColor"; type: "QColor"; isReadonly: true }
        Property { name: "lightSecondaryColor"; type: "QColor"; isReadonly: true }
        Property { name: "darkPrimaryColor"; type: "QColor"; isReadonly: true }
        Property { name: "darkSecondaryColor"; type: "QColor"; isReadonly: true }
        Property { name: "startDragDistance"; type: "int"; isReadonly: true }
        Property { name: "minimumPressHighlightTime"; type: "int"; isReadonly: true }
        Property { name: "_webviewCustomLayoutWidthScalingFactor"; type: "float"; isReadonly: true }
        Property { name: "opacityFaint"; type: "float"; isReadonly: true }
        Property { name: "opacityLow"; type: "float"; isReadonly: true }
        Property { name: "opacityHigh"; type: "float"; isReadonly: true }
        Property { name: "opacityOverlay"; type: "float"; isReadonly: true }
        Signal { name: "homeBackgroundImageChanged" }
        Signal { name: "wallpaperOverlayColorChanged" }
        Signal { name: "coverOverlayColorChanged" }
        Method {
            name: "setColorScheme"
            Parameter { name: "colorScheme"; type: "ColorScheme" }
        }
        Method {
            name: "_setHighlightColor"
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "highlightText"
            type: "string"
            Parameter { name: "text"; type: "string" }
            Parameter { name: "pattern"; type: "QVariant" }
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "rgba"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "opacity"; type: "float" }
        }
        Method {
            name: "presenceColor"
            type: "QColor"
            Parameter { name: "presenceMode"; type: "PresenceMode" }
        }
        Method {
            name: "iconForMimeType"
            type: "string"
            Parameter { name: "mimeType"; type: "string" }
        }
        Method {
            name: "highlightFromColor"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "scheme"; type: "Silica::Theme::ColorScheme" }
        }
        Method {
            name: "secondaryHighlightFromColor"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "scheme"; type: "Silica::Theme::ColorScheme" }
        }
        Method {
            name: "highlightBackgroundFromColor"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "scheme"; type: "Silica::Theme::ColorScheme" }
        }
        Method {
            name: "highlightDimmerFromColor"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
            Parameter { name: "scheme"; type: "Silica::Theme::ColorScheme" }
        }
    }
    Component {
        name: "Silica::ThemeTransaction"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/ThemeTransaction 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "deferAmbience"; type: "bool" }
        Signal { name: "ambienceAboutToChange" }
    }
    Component {
        name: "Slide"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/Slide 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Flow"
            values: {
                "LeftToRight": 0,
                "RightToLeft": 180,
                "TopToBottom": 90,
                "BottomToTop": 270
            }
        }
        Enum {
            name: "Direction"
            values: {
                "NoDirection": 0,
                "Forward": 1,
                "Backward": -1
            }
        }
        Property { name: "view"; type: "Slideable"; isReadonly: true; isPointer: true }
        Property { name: "_view"; type: "Slideable"; isPointer: true }
        Property { name: "backward"; type: "QQuickItem"; isPointer: true }
        Property { name: "forward"; type: "QQuickItem"; isPointer: true }
        Property { name: "offset"; type: "float"; isReadonly: true }
        Property { name: "_offset"; type: "float" }
        Property { name: "isCurrent"; type: "bool"; isReadonly: true }
        Property { name: "isExposed"; type: "bool"; isReadonly: true }
        Property { name: "isFirst"; type: "bool" }
        Property { name: "isLast"; type: "bool" }
        Property { name: "inCache"; type: "bool"; isReadonly: true }
        Property { name: "keepAlive"; type: "bool" }
        Property { name: "_object"; type: "QObject"; isReadonly: true; isPointer: true }
        Signal { name: "backwardItemChanged" }
        Signal { name: "forwardItemChanged" }
        Signal { name: "currentItemChanged" }
        Signal { name: "exposedChanged" }
        Signal { name: "firstItemChanged" }
        Signal { name: "lastItemChanged" }
        Signal { name: "transitionItemChanged" }
        Signal { name: "remove" }
        Signal { name: "cleanup" }
    }
    Component {
        name: "Slideable"
        defaultProperty: "data"
        prototype: "Silica::Control"
        exports: ["Sailfish.Silica.private/SlideableBase 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "currentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "alternateItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "_alternateItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "flow"; type: "Slide::Flow" }
        Property { name: "cacheSize"; type: "int" }
        Property { name: "cacheExpiry"; type: "int" }
        Signal { name: "exposedChanged" }
        Signal {
            name: "createAdjacentItem"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "direction"; type: "int" }
        }
        Method {
            name: "cache"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
    }
    Component {
        name: "StringListModel"
        prototype: "QAbstractItemModel"
        exports: ["Sailfish.Silica.private/StringListModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "propertyName"; type: "string" }
        Property { name: "strings"; type: "QStringList" }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "TextLayoutModel"
        prototype: "QAbstractListModel"
        exports: ["Sailfish.Silica.private/TextLayoutModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Role"
            values: {
                "LineNumberRole": 256,
                "TextRole": 257,
                "LengthRole": 258,
                "WidthRole": 259,
                "HeightRole": 260,
                "ElidedRole": 261
            }
        }
        Property { name: "text"; type: "string" }
        Property { name: "font"; type: "QFont" }
        Property { name: "width"; type: "float" }
        Property { name: "wrapMode"; type: "int" }
        Property { name: "maximumLineCount"; type: "int" }
        Property { name: "lineCount"; type: "int"; isReadonly: true }
    }
    Component {
        name: "TimePickerMode"
        prototype: "QObject"
        exports: ["Sailfish.Silica.private/TimePickerMode 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Mode"
            values: {
                "HoursAndMinutes": 0,
                "MinutesAndSeconds": 1
            }
        }
    }
    Component {
        name: "VerticalAutoScroll"
        prototype: "AutoScroll"
        exports: ["Sailfish.Silica/VerticalAutoScroll 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "topMargin"; type: "float" }
        Property { name: "bottomMargin"; type: "float" }
    }
    Component {
        prototype: "QObject"
        name: "ContactCreator 1.0"
        exports: ["ContactCreator 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "lastCreatedContact"; type: "QVariant" }
        Property { name: "_emptyContactComponent"; type: "QQmlComponent"; isPointer: true }
        Method {
            name: "createContact"
            type: "QVariant"
            Parameter { name: "attributes"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QObject"
        name: "ContactModelCache 1.0"
        exports: ["ContactModelCache 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "_unfilteredModel"; type: "QVariant" }
        Property { name: "_deletingContactId"; type: "int" }
        Property { name: "_unfilteredModelComponent"; type: "QQmlComponent"; isPointer: true }
        Method { name: "unfilteredModel"; type: "QVariant" }
    }
    Component {
        prototype: "QObject"
        name: "Remorse 1.0"
        exports: ["Remorse 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "_itemComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "_popupComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "deletedText"; type: "string"; isReadonly: true }
        Method {
            name: "_create"
            type: "QVariant"
            Parameter { name: "component"; type: "QVariant" }
            Parameter { name: "parent"; type: "QVariant" }
        }
        Method {
            name: "itemAction"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "callback"; type: "QVariant" }
            Parameter { name: "timeout"; type: "QVariant" }
        }
        Method {
            name: "popupAction"
            type: "QVariant"
            Parameter { name: "page"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "callback"; type: "QVariant" }
            Parameter { name: "timeout"; type: "QVariant" }
        }
    }
}
