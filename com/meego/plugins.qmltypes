import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable com.meego 2.0'

Module {
    Component {
        name: "MDateTimeHelper"
        prototype: "QObject"
        exports: ["com.meego/DateTime 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "TimeUnit"
            values: {
                "Hours": 1,
                "Minutes": 2,
                "Seconds": 4,
                "All": 7
            }
        }
        Enum {
            name: "HourMode"
            values: {
                "TwelveHours": 1,
                "TwentyFourHours": 2
            }
        }
        Method {
            name: "shortMonthName"
            type: "string"
            Parameter { name: "month"; type: "int" }
        }
        Method {
            name: "isLeapYear"
            type: "bool"
            Parameter { name: "year"; type: "int" }
        }
        Method {
            name: "daysInMonth"
            type: "int"
            Parameter { name: "year"; type: "int" }
            Parameter { name: "month"; type: "int" }
        }
        Method { name: "currentYear"; type: "int" }
        Method { name: "amText"; type: "string" }
        Method { name: "pmText"; type: "string" }
        Method { name: "hourMode"; type: "int" }
    }
    Component {
        name: "MDeclarativeIMAttributeExtension"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["com.meego/SipAttributes 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "actionKeyHighlighted"; type: "bool" }
        Property { name: "actionKeyEnabled"; type: "bool" }
        Property { name: "actionKeyLabel"; type: "string" }
        Property { name: "actionKeyIcon"; type: "string" }
        Method {
            name: "registerInputElement"
            Parameter { name: "element"; type: "QQuickItem"; isPointer: true }
        }
    }
    Component {
        name: "MDeclarativeIMObserver"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["com.meego/InputMethodObserver 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "preedit"; type: "string"; isReadonly: true }
        Property { name: "preeditCursorPosition"; type: "int"; isReadonly: true }
    }
    Component {
        name: "MDeclarativeImplicitSizeItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["com.meego/ImplicitSizeItem 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "implicitWidth"; type: "float" }
        Property { name: "implicitHeight"; type: "float" }
        Property { name: "focusable"; type: "bool" }
        Property { name: "platformFocusable"; type: "bool" }
    }
    Component {
        name: "MDeclarativeInputContext"
        prototype: "QObject"
        exports: ["com.meego/InputContext 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "softwareInputPanelVisible"; type: "bool"; isReadonly: true }
        Property { name: "softwareInputPanelRect"; type: "QRect"; isReadonly: true }
        Property { name: "microFocus"; type: "QRectF"; isReadonly: true }
        Property { name: "softwareInputPanelEvent"; type: "QVariant" }
        Property { name: "customSoftwareInputPanelComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "customSoftwareInputPanelTextField"; type: "QQuickItem"; isPointer: true }
        Property { name: "customSoftwareInputPanelVisible"; type: "bool" }
        Signal { name: "minimizedChanged" }
        Method { name: "updateMicroFocus" }
        Method { name: "reset" }
        Method { name: "update" }
        Method {
            name: "setPreeditText"
            type: "bool"
            Parameter { name: "newPreedit"; type: "string" }
            Parameter { name: "eventCursorPosition"; type: "int" }
            Parameter { name: "replacementStart"; type: "int" }
            Parameter { name: "replacementLength"; type: "int" }
        }
        Method {
            name: "targetInputFor"
            type: "QQuickItem*"
            Parameter { name: "customSoftwareInputPanelComponent"; type: "QQmlComponent"; isPointer: true }
        }
        Method { name: "simulateSipOpen" }
        Method { name: "simulateSipClose" }
        Method { name: "clearClipboard" }
    }
    Component {
        name: "MDeclarativeMouseEvent"
        prototype: "QObject"
        exports: ["com.meego/MMouseEvent 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "int"; isReadonly: true }
        Property { name: "y"; type: "int"; isReadonly: true }
        Property { name: "filtered"; type: "bool" }
    }
    Component {
        name: "MDeclarativeMouseFilter"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["com.meego/MouseFilter 2.0"]
        exportMetaObjectRevisions: [0]
        Signal {
            name: "mousePositionChanged"
            Parameter { name: "mouse"; type: "MDeclarativeMouseEvent"; isPointer: true }
        }
        Signal {
            name: "pressed"
            Parameter { name: "mouse"; type: "MDeclarativeMouseEvent"; isPointer: true }
        }
        Signal { name: "delayedPressSent" }
        Signal {
            name: "pressAndHold"
            Parameter { name: "mouse"; type: "MDeclarativeMouseEvent"; isPointer: true }
        }
        Signal {
            name: "released"
            Parameter { name: "mouse"; type: "MDeclarativeMouseEvent"; isPointer: true }
        }
        Signal { name: "finished" }
        Signal { name: "horizontalDrag" }
        Signal {
            name: "doubleClicked"
            Parameter { name: "mouse"; type: "MDeclarativeMouseEvent"; isPointer: true }
        }
    }
    Component {
        name: "MDeclarativeScreen"
        prototype: "QObject"
        exports: ["com.meego/Screen 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Orientation"
            values: {
                "Default": 0,
                "Portrait": 1,
                "Landscape": 2,
                "PortraitInverted": 4,
                "LandscapeInverted": 8,
                "All": 15
            }
        }
        Enum {
            name: "Orientations"
            values: {
                "Default": 0,
                "Portrait": 1,
                "Landscape": 2,
                "PortraitInverted": 4,
                "LandscapeInverted": 8,
                "All": 15
            }
        }
        Enum {
            name: "Direction"
            values: {
                "Clockwise": -1,
                "NoDirection": 0,
                "CounterClockwise": 1
            }
        }
        Enum {
            name: "OrientationAngle"
            values: {
                "PortraitAngle": 0,
                "LandscapeAngle": 90,
                "PortraitInvertedAngle": 180,
                "LandscapeInvertedAngle": 270
            }
        }
        Enum {
            name: "DisplayCategory"
            values: {
                "Small": 0,
                "Normal": 1,
                "Large": 2,
                "ExtraLarge": 3
            }
        }
        Enum {
            name: "Density"
            values: {
                "Low": 0,
                "Medium": 1,
                "High": 2,
                "ExtraHigh": 3
            }
        }
        Property { name: "currentOrientation"; type: "Orientation"; isReadonly: true }
        Property { name: "allowedOrientations"; type: "Orientations" }
        Property { name: "orientationString"; type: "string"; isReadonly: true }
        Property { name: "covered"; type: "bool"; isReadonly: true }
        Property { name: "keyboardOpen"; type: "bool"; isReadonly: true }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
        Property { name: "displayWidth"; type: "int"; isReadonly: true }
        Property { name: "displayHeight"; type: "int"; isReadonly: true }
        Property { name: "rotation"; type: "int"; isReadonly: true }
        Property { name: "rotationDirection"; type: "Direction"; isReadonly: true }
        Property { name: "minimized"; type: "bool" }
        Property { name: "allowSwipe"; type: "bool" }
        Property { name: "isPortrait"; type: "bool"; isReadonly: true }
        Property { name: "windowState"; type: "MWindowState"; isReadonly: true; isPointer: true }
        Property { name: "dpi"; type: "float"; isReadonly: true }
        Property { name: "displayCategory"; type: "DisplayCategory"; isReadonly: true }
        Property { name: "density"; type: "Density"; isReadonly: true }
        Property { name: "platformWidth"; type: "int"; isReadonly: true }
        Property { name: "platformHeight"; type: "int"; isReadonly: true }
        Property { name: "isDisplayLandscape"; type: "bool"; isReadonly: true }
        Property { name: "frameBufferRotation"; type: "int"; isReadonly: true }
        Signal { name: "displayChanged" }
        Signal { name: "physicalDisplayChanged" }
        Method {
            name: "setAllowedOrientations"
            Parameter { name: "orientation"; type: "Orientations" }
        }
        Method {
            name: "updatePlatformStatusBarRect"
            Parameter { name: "statusBar"; type: "QQuickItem"; isPointer: true }
        }
    }
    Component {
        name: "MDialogStatus"
        prototype: "QObject"
        exports: ["com.meego/DialogStatus 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Opening": 0,
                "Open": 1,
                "Closing": 2,
                "Closed": 3
            }
        }
    }
    Component {
        name: "MInverseMouseArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["com.meego/InverseMouseArea 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "enabled"; type: "bool" }
        Signal {
            name: "pressedOutside"
            Parameter { name: "mouseX"; type: "int" }
            Parameter { name: "mouseY"; type: "int" }
        }
        Signal {
            name: "clickedOutside"
            Parameter { name: "mouseX"; type: "int" }
            Parameter { name: "mouseY"; type: "int" }
        }
    }
    Component {
        name: "MLocaleWrapper"
        prototype: "QObject"
        exports: ["com.meego/Locale 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DateType"
            values: {
                "DateNone": 0,
                "DateShort": 1,
                "DateMedium": 2,
                "DateLong": 3,
                "DateFull": 4,
                "DateYearAndMonth": 5
            }
        }
        Enum {
            name: "TimeType"
            values: {
                "TimeNone": 0,
                "TimeShort": 1,
                "TimeMedium": 2,
                "TimeLong": 3,
                "TimeFull": 4
            }
        }
        Enum {
            name: "Category"
            values: {
                "MLcMessages": 0,
                "MLcTime": 1,
                "MLcCollate": 2,
                "MLcNumeric": 3,
                "MLcMonetary": 4,
                "MLcName": 5,
                "MLcTelephone": 6
            }
        }
        Enum {
            name: "Collation"
            values: {
                "DefaultCollation": 0,
                "PhonebookCollation": 1,
                "PinyinCollation": 2,
                "TraditionalCollation": 3,
                "StrokeCollation": 4,
                "DirectCollation": 5,
                "PosixCollation": 6,
                "Big5hanCollation": 7,
                "Gb2312hanCollation": 8
            }
        }
        Enum {
            name: "CalendarType"
            values: {
                "DefaultCalendar": 0,
                "GregorianCalendar": 1,
                "IslamicCalendar": 2,
                "ChineseCalendar": 3,
                "IslamicCivilCalendar": 4,
                "HebrewCalendar": 5,
                "JapaneseCalendar": 6,
                "BuddhistCalendar": 7,
                "PersianCalendar": 8,
                "CopticCalendar": 9,
                "EthiopicCalendar": 10
            }
        }
        Enum {
            name: "TimeFormat24h"
            values: {
                "LocaleDefaultTimeFormat24h": 0,
                "TwelveHourTimeFormat24h": 1,
                "TwentyFourHourTimeFormat24h": 2
            }
        }
        Enum {
            name: "Weekday"
            values: {
                "Monday": 1,
                "Tuesday": 2,
                "Wednesday": 3,
                "Thursday": 4,
                "Friday": 5,
                "Saturday": 6,
                "Sunday": 7
            }
        }
    }
    Component {
        name: "MPageOrientation"
        prototype: "QObject"
        exports: ["com.meego/PageOrientation 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PageOrientation"
            values: {
                "Automatic": 0,
                "LockPortrait": 1,
                "LockLandscape": 2,
                "LockPrevious": 3
            }
        }
    }
    Component {
        name: "MPageStatus"
        prototype: "QObject"
        exports: ["com.meego/PageStatus 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Inactive": 0,
                "Activating": 1,
                "Active": 2,
                "Deactivating": 3
            }
        }
    }
    Component {
        name: "MScrollDecoratorSizer"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["com.meego/ScrollDecoratorSizerCPP 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "positionRatio"; type: "float" }
        Property { name: "sizeRatio"; type: "float" }
        Property { name: "maxPosition"; type: "float" }
        Property { name: "minSize"; type: "float" }
        Property { name: "position"; type: "int"; isReadonly: true }
        Property { name: "size"; type: "int"; isReadonly: true }
    }
    Component {
        name: "MTextTranslator"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["com.meego/TextTranslator 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "translate"
            type: "string"
            Parameter { name: "textId"; type: "string" }
        }
    }
    Component {
        name: "MThemePlugin"
        prototype: "QObject"
        exports: ["com.meego/Theme 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "inverted"; type: "bool" }
        Property { name: "colorScheme"; type: "string" }
        Property { name: "colorString"; type: "string"; isReadonly: true }
        Property { name: "selectionColor"; type: "string"; isReadonly: true }
    }
    Component {
        name: "MToolBarVisibility"
        prototype: "QObject"
        exports: ["com.meego/ToolBarVisibility 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Visibility"
            values: {
                "Visible": 0,
                "Hidden": 1,
                "HiddenImmediately": 2
            }
        }
    }
    Component {
        name: "MWindowState"
        prototype: "QObject"
        exports: ["com.meego/WindowState 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ViewMode"
            values: {
                "Fullsize": 0,
                "Thumbnail": 1
            }
        }
        Property { name: "visible"; type: "bool"; isReadonly: true }
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "animating"; type: "bool" }
        Property { name: "viewMode"; type: "ViewMode"; isReadonly: true }
        Property { name: "viewModeString"; type: "string"; isReadonly: true }
        Method {
            name: "startSipOrientationChange"
            Parameter { name: "newOrientation"; type: "int" }
        }
        Method {
            name: "finishSipOrientationChange"
            Parameter { name: "newOrientation"; type: "int" }
        }
    }
}
