import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate com.jolla.mediaplayer 1.0'

Module {
    dependencies: [
        "QtMultimedia 5.6",
        "QtQuick 2.6",
        "QtQuick.Window 2.1",
        "QtWebKit 3.0",
        "QtWebKit.experimental 1.0",
        "Sailfish.Media 1.0",
        "Sailfish.Silica 1.0",
        "Sailfish.Silica.private 1.0",
        "org.nemomobile.configuration 1.0",
        "org.nemomobile.dbus 2.0",
        "org.nemomobile.grilo 0.1",
        "org.nemomobile.mpris 1.0",
        "org.nemomobile.policy 1.0",
        "org.nemomobile.thumbnailer 1.0"
    ]
    Component {
        name: "AggregateModel"
        prototype: "QAbstractListModel"
        exports: ["com.jolla.mediaplayer/AggregateModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "shuffled"; type: "bool" }
        Property { name: "currentIndex"; type: "int" }
        Signal { name: "updateCurrentItem" }
        Method {
            name: "setModel"
            Parameter { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        }
        Method {
            name: "addModel"
            Parameter { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        }
        Method {
            name: "addMedia"
            Parameter { name: "media"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "removeIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "clear" }
        Method { name: "shuffle" }
        Method {
            name: "appendUrl"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "shuffledIndex"
            type: "int"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "media"; type: "QObject"; isPointer: true }
            Parameter { name: "from"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "media"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "BluetoothMediaPlayer"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/BluetoothMediaPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Equalizer"
            values: {
                "EqualizerOff": 0,
                "EqualizerOn": 1
            }
        }
        Enum {
            name: "Repeat"
            values: {
                "RepeatOff": 0,
                "RepeatSingleTrack": 1,
                "RepeatAllTracks": 2,
                "RepeatGroup": 3
            }
        }
        Enum {
            name: "Shuffle"
            values: {
                "ShuffleOff": 0,
                "ShuffleAllTracks": 1,
                "ShuffleGroup": 2
            }
        }
        Enum {
            name: "Scan"
            values: {
                "ScanOff": 0,
                "ScanAllTracks": 1,
                "ScanGroup": 2
            }
        }
        Enum {
            name: "Status"
            values: {
                "Playing": 0,
                "Stopped": 1,
                "Paused": 2,
                "ForwardSeek": 3,
                "ReverseSeek": 4,
                "Error": 5
            }
        }
        Property { name: "equalizer"; type: "Equalizer" }
        Property { name: "repeat"; type: "Repeat" }
        Property { name: "shuffle"; type: "Shuffle" }
        Property { name: "scan"; type: "Scan" }
        Property { name: "status"; type: "Status" }
        Property { name: "position"; type: "int" }
        Property { name: "metadata"; type: "QVariantMap" }
        Signal {
            name: "changeEqualizer"
            Parameter { name: "equalizer"; type: "Equalizer" }
        }
        Signal {
            name: "changeRepeat"
            Parameter { name: "repeat"; type: "Repeat" }
        }
        Signal {
            name: "changeShuffle"
            Parameter { name: "shuffle"; type: "Shuffle" }
        }
        Signal {
            name: "changeScan"
            Parameter { name: "scan"; type: "Scan" }
        }
        Signal { name: "release" }
        Signal { name: "pauseRequested" }
        Signal { name: "playRequested" }
        Signal { name: "nextRequested" }
        Signal { name: "previousRequested" }
        Signal {
            name: "seekRequested"
            Parameter { name: "offset"; type: "qlonglong" }
        }
    }
    Component {
        name: "DeclarativeAlbumArtProvider"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/AlbumArtProvider 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "albumArt"
            type: "QUrl"
            Parameter { name: "album"; type: "string" }
            Parameter { name: "artist"; type: "string" }
        }
        Method {
            name: "albumThumbnail"
            type: "QUrl"
            Parameter { name: "album"; type: "string" }
            Parameter { name: "artist"; type: "string" }
        }
    }
    Component {
        name: "DeclarativeAudio"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/Audio 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "State"
            values: {
                "Stopped": 0,
                "Playing": 1,
                "Paused": 2
            }
        }
        Property { name: "duration"; type: "qlonglong"; isReadonly: true }
        Property { name: "position"; type: "qlonglong" }
        Property { name: "state"; type: "State"; isReadonly: true }
        Property { name: "currentItem"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "model"; type: "AggregateModel"; isReadonly: true; isPointer: true }
        Signal { name: "endOfMedia" }
        Method { name: "play" }
        Method { name: "pause" }
        Method { name: "stop" }
        Method { name: "toggle" }
        Method {
            name: "setPlayModel"
            Parameter { name: "model"; type: "QVariant" }
        }
        Method {
            name: "addToQueue"
            Parameter { name: "mediaOrModel"; type: "QVariant" }
        }
        Method {
            name: "removeFromQueue"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "isEndOfMedia"; type: "bool" }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "media"; type: "QVariant" }
            Parameter { name: "from"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "media"; type: "QVariant" }
        }
    }
    Component {
        name: "DeclarativeFile"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/File 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "removeFile"
            type: "bool"
            Parameter { name: "path"; type: "QUrl" }
        }
    }
    Component {
        name: "DeclarativeFilterModel"
        prototype: "QSortFilterProxyModel"
        exports: ["com.jolla.mediaplayer/FilterModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "sourceModel"; type: "QObject"; isPointer: true }
        Method {
            name: "mapRowToSource"
            type: "int"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "DeclarativePlaylistModel"
        prototype: "QAbstractListModel"
        exports: ["com.jolla.mediaplayer/PlaylistModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "QUrl" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "storeChanged" }
        Method { name: "populate" }
        Method {
            name: "append"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "author"; type: "string" }
            Parameter { name: "duration"; type: "int" }
        }
        Method {
            name: "remove"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "removeItemByUrl"
            type: "int"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "getUrl"
            type: "QUrl"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "clear" }
    }
    Component {
        name: "DeclarativePlaylistSaver"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/PlaylistSaver 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "create"
            type: "QUrl"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "path"; type: "string" }
            Parameter { name: "media"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "create"
            type: "QUrl"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "save"
            type: "bool"
            Parameter { name: "model"; type: "DeclarativePlaylistModel"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "path"; type: "QUrl" }
        }
        Method {
            name: "clear"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "isEditable"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "parent"; type: "string" }
        }
        Method {
            name: "removePlaylist"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
        }
    }
    Component {
        name: "DeclarativeTrackerStore"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/TrackerStore 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "updateEntryCounter"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "counter"; type: "int" }
        }
        Method {
            name: "updateAccessTime"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "addPlaylist"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "items"; type: "int" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
    Component {
        prototype: "QObject"
        name: "AudioPlayer 1.0"
        exports: ["AudioPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "data"
        Property { name: "shuffle"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "repeatOne"; type: "bool" }
        Property { name: "rewinding"; type: "bool" }
        Property { name: "forwarding"; type: "bool" }
        Property { name: "_resume"; type: "bool" }
        Property { name: "_seekOffset"; type: "int" }
        Property { name: "_seekRepeat"; type: "bool" }
        Property { name: "_metadata"; type: "QVariant" }
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "position"; type: "int"; isReadonly: true }
        Property { name: "playing"; type: "bool"; isReadonly: true }
        Property { name: "_seeking"; type: "bool"; isReadonly: true }
        Property { name: "currentItem"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "metadata"; type: "QVariant"; isReadonly: true }
        Property { name: "duration"; type: "qlonglong"; isReadonly: true }
        Property { name: "state"; type: "int"; isReadonly: true }
        Property { name: "playModel"; type: "AggregateModel"; isReadonly: true; isPointer: true }
        Signal { name: "tryingToPlay" }
        Method {
            name: "setPosition"
            type: "QVariant"
            Parameter { name: "position"; type: "QVariant" }
        }
        Method {
            name: "setSeekRepeat"
            type: "QVariant"
            Parameter { name: "repeat"; type: "QVariant" }
        }
        Method {
            name: "seekForward"
            type: "QVariant"
            Parameter { name: "time"; type: "QVariant" }
        }
        Method {
            name: "seekBackward"
            type: "QVariant"
            Parameter { name: "time"; type: "QVariant" }
        }
        Method {
            name: "playIndex"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "play"
            type: "QVariant"
            Parameter { name: "model"; type: "QVariant" }
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "shuffleAndPlay"
            type: "QVariant"
            Parameter { name: "model"; type: "QVariant" }
            Parameter { name: "modelSize"; type: "QVariant" }
        }
        Method {
            name: "addToQueue"
            type: "QVariant"
            Parameter { name: "mediaOrModel"; type: "QVariant" }
        }
        Method {
            name: "removeFromQueue"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "removeItemFromQueue"
            type: "QVariant"
            Parameter { name: "mediaItem"; type: "QVariant" }
        }
        Method {
            name: "playUrl"
            type: "QVariant"
            Parameter { name: "url"; type: "QVariant" }
        }
        Method { name: "playPause"; type: "QVariant" }
        Method { name: "_play"; type: "QVariant" }
        Method { name: "pause"; type: "QVariant" }
        Method { name: "stop"; type: "QVariant" }
        Method {
            name: "playPrevious"
            type: "QVariant"
            Parameter { name: "warn"; type: "QVariant" }
        }
        Method {
            name: "playNext"
            type: "QVariant"
            Parameter { name: "warn"; type: "QVariant" }
        }
        Property { name: "_data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "Container -1.-1"
        exports: ["Container -1.-1"]
        exportMetaObjectRevisions: [-1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "_data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "Remorse 1.0"
        exports: ["Remorse 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "_itemComponent"; type: "QQmlComponent"; isPointer: true }
        Property { name: "_popupComponent"; type: "QQmlComponent"; isPointer: true }
        Method {
            name: "_create"
            type: "QVariant"
            Parameter { name: "component"; type: "QVariant" }
            Parameter { name: "parent"; type: "QVariant" }
        }
        Method {
            name: "itemAction"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "action"; type: "QVariant" }
            Parameter { name: "timeout"; type: "QVariant" }
        }
        Method {
            name: "popupAction"
            type: "QVariant"
            Parameter { name: "page"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
            Parameter { name: "action"; type: "QVariant" }
            Parameter { name: "timeout"; type: "QVariant" }
        }
    }
}
