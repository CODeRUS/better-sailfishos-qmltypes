import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies /home/nemo/qmlexport/empty.json com.jolla.mediaplayer 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "AggregateModel"
        prototype: "QAbstractListModel"
        exports: ["com.jolla.mediaplayer/AggregateModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "shuffled"; type: "bool" }
        Property { name: "currentIndex"; type: "int" }
        Signal { name: "updateCurrentItem" }
        Method {
            name: "setModel"
            Parameter { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        }
        Method {
            name: "addModel"
            Parameter { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        }
        Method {
            name: "addMedia"
            Parameter { name: "media"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "removeIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "clear" }
        Method { name: "shuffle" }
        Method {
            name: "appendUrl"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "shuffledIndex"
            type: "int"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "media"; type: "QObject"; isPointer: true }
            Parameter { name: "from"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "media"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "BluetoothMediaPlayer"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/BluetoothMediaPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Equalizer"
            values: {
                "EqualizerOff": 0,
                "EqualizerOn": 1
            }
        }
        Enum {
            name: "Repeat"
            values: {
                "RepeatOff": 0,
                "RepeatSingleTrack": 1,
                "RepeatAllTracks": 2,
                "RepeatGroup": 3
            }
        }
        Enum {
            name: "Shuffle"
            values: {
                "ShuffleOff": 0,
                "ShuffleAllTracks": 1,
                "ShuffleGroup": 2
            }
        }
        Enum {
            name: "Scan"
            values: {
                "ScanOff": 0,
                "ScanAllTracks": 1,
                "ScanGroup": 2
            }
        }
        Enum {
            name: "Status"
            values: {
                "Playing": 0,
                "Stopped": 1,
                "Paused": 2,
                "ForwardSeek": 3,
                "ReverseSeek": 4,
                "Error": 5
            }
        }
        Property { name: "equalizer"; type: "Equalizer" }
        Property { name: "repeat"; type: "Repeat" }
        Property { name: "shuffle"; type: "Shuffle" }
        Property { name: "scan"; type: "Scan" }
        Property { name: "status"; type: "Status" }
        Property { name: "position"; type: "int" }
        Property { name: "metadata"; type: "QVariantMap" }
        Signal {
            name: "changeEqualizer"
            Parameter { name: "equalizer"; type: "Equalizer" }
        }
        Signal {
            name: "changeRepeat"
            Parameter { name: "repeat"; type: "Repeat" }
        }
        Signal {
            name: "changeShuffle"
            Parameter { name: "shuffle"; type: "Shuffle" }
        }
        Signal {
            name: "changeScan"
            Parameter { name: "scan"; type: "Scan" }
        }
        Signal { name: "release" }
        Signal { name: "pauseRequested" }
        Signal { name: "playRequested" }
        Signal { name: "nextRequested" }
        Signal { name: "previousRequested" }
        Signal {
            name: "seekRequested"
            Parameter { name: "offset"; type: "qlonglong" }
        }
    }
    Component {
        name: "DeclarativeAlbumArtProvider"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/AlbumArtProvider 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "songsModel"; type: "QObject"; isPointer: true }
        Property { name: "extracting"; type: "bool"; isReadonly: true }
        Method {
            name: "albumArt"
            type: "QUrl"
            Parameter { name: "album"; type: "string" }
            Parameter { name: "artist"; type: "string" }
        }
        Method {
            name: "albumThumbnail"
            type: "QUrl"
            Parameter { name: "album"; type: "string" }
            Parameter { name: "artist"; type: "string" }
        }
    }
    Component {
        name: "DeclarativeAudio"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/Audio 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "State"
            values: {
                "Stopped": 0,
                "Playing": 1,
                "Paused": 2
            }
        }
        Enum {
            name: "Error"
            values: {
                "NoError": 0,
                "ResourceError": 1,
                "FormatError": 2,
                "NetworkError": 3,
                "AccessDeniedError": 4,
                "ServiceMissingError": 5,
                "MediaIsPlaylist": 6
            }
        }
        Property { name: "duration"; type: "qlonglong"; isReadonly: true }
        Property { name: "position"; type: "qlonglong" }
        Property { name: "state"; type: "State"; isReadonly: true }
        Property { name: "currentItem"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "model"; type: "AggregateModel"; isReadonly: true; isPointer: true }
        Property { name: "error"; type: "Error"; isReadonly: true }
        Property { name: "errorString"; type: "string"; isReadonly: true }
        Signal { name: "endOfMedia" }
        Signal {
            name: "error"
            Parameter { name: "error"; type: "DeclarativeAudio::Error" }
            Parameter { name: "errorString"; type: "string" }
        }
        Method { name: "play" }
        Method { name: "pause" }
        Method { name: "stop" }
        Method { name: "toggle" }
        Method {
            name: "setPlayModel"
            Parameter { name: "model"; type: "QVariant" }
        }
        Method {
            name: "addToQueue"
            Parameter { name: "mediaOrModel"; type: "QVariant" }
        }
        Method {
            name: "removeFromQueue"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "isEndOfMedia"; type: "bool" }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "media"; type: "QVariant" }
            Parameter { name: "from"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "media"; type: "QVariant" }
        }
    }
    Component {
        name: "DeclarativeFile"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/File 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "removeFile"
            type: "bool"
            Parameter { name: "path"; type: "QUrl" }
        }
    }
    Component {
        name: "DeclarativeFilterModel"
        prototype: "QSortFilterProxyModel"
        exports: ["com.jolla.mediaplayer/FilterModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "sourceModel"; type: "QObject"; isPointer: true }
        Method {
            name: "mapRowToSource"
            type: "int"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "DeclarativePlaylistModel"
        prototype: "QAbstractListModel"
        exports: ["com.jolla.mediaplayer/PlaylistModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "QUrl" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "storeChanged" }
        Method { name: "populate" }
        Method {
            name: "append"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "author"; type: "string" }
            Parameter { name: "duration"; type: "int" }
        }
        Method {
            name: "remove"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "removeItemByUrl"
            type: "int"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "getUrl"
            type: "QUrl"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "clear" }
    }
    Component {
        name: "DeclarativePlaylistSaver"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/PlaylistSaver 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "create"
            type: "QUrl"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "path"; type: "string" }
            Parameter { name: "media"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "create"
            type: "QUrl"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "save"
            type: "bool"
            Parameter { name: "model"; type: "DeclarativePlaylistModel"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "path"; type: "QUrl" }
        }
        Method {
            name: "clear"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "isEditable"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "parent"; type: "string" }
        }
        Method {
            name: "removePlaylist"
            type: "bool"
            Parameter { name: "url"; type: "QUrl" }
        }
    }
    Component {
        name: "DeclarativeTrackerStore"
        prototype: "QObject"
        exports: ["com.jolla.mediaplayer/TrackerStore 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "updateEntryCounter"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "counter"; type: "int" }
        }
        Method {
            name: "updateAccessTime"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method {
            name: "addPlaylist"
            Parameter { name: "url"; type: "QUrl" }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "items"; type: "int" }
        }
    }
    Component {
        name: "Mpris"
        prototype: "QObject"
        exports: ["org.nemomobile.mpris/Mpris 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PlaybackStatus"
            values: {
                "InvalidPlaybackStatus": -1,
                "Playing": 0,
                "Paused": 1,
                "Stopped": 2
            }
        }
        Enum {
            name: "LoopStatus"
            values: {
                "InvalidLoopStatus": -1,
                "None": 0,
                "Track": 1,
                "Playlist": 2
            }
        }
        Enum {
            name: "Metadata"
            values: {
                "InvalidMetadata": -1,
                "TrackId": 0,
                "Length": 1,
                "ArtUrl": 2,
                "Album": 3,
                "AlbumArtist": 4,
                "Artist": 5,
                "AsText": 6,
                "AudioBPM": 7,
                "AutoRating": 8,
                "Comment": 9,
                "Composer": 10,
                "ContentCreated": 11,
                "DiscNumber": 12,
                "FirstUsed": 13,
                "Genre": 14,
                "LastUsed": 15,
                "Lyricist": 16,
                "Title": 17,
                "TrackNumber": 18,
                "Url": 19,
                "UseCount": 20,
                "UserRating": 21
            }
        }
        Method {
            name: "metadataToString"
            type: "string"
            Parameter { name: "metadata"; type: "Metadata" }
        }
    }
    Component {
        name: "MprisManager"
        prototype: "QObject"
        exports: ["org.nemomobile.mpris/MprisManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "singleService"; type: "bool" }
        Property { name: "currentService"; type: "string" }
        Property { name: "availableServices"; type: "QStringList"; isReadonly: true }
        Property { name: "canQuit"; type: "bool"; isReadonly: true }
        Property { name: "canRaise"; type: "bool"; isReadonly: true }
        Property { name: "canSetFullscreen"; type: "bool"; isReadonly: true }
        Property { name: "desktopEntry"; type: "string"; isReadonly: true }
        Property { name: "fullscreen"; type: "bool" }
        Property { name: "hasTrackList"; type: "bool"; isReadonly: true }
        Property { name: "identity"; type: "string"; isReadonly: true }
        Property { name: "supportedUriSchemes"; type: "QStringList"; isReadonly: true }
        Property { name: "supportedMimeTypes"; type: "QStringList"; isReadonly: true }
        Property { name: "canControl"; type: "bool"; isReadonly: true }
        Property { name: "canGoNext"; type: "bool"; isReadonly: true }
        Property { name: "canGoPrevious"; type: "bool"; isReadonly: true }
        Property { name: "canPause"; type: "bool"; isReadonly: true }
        Property { name: "canPlay"; type: "bool"; isReadonly: true }
        Property { name: "canSeek"; type: "bool"; isReadonly: true }
        Property { name: "loopStatus"; type: "Mpris::LoopStatus" }
        Property { name: "maximumRate"; type: "double"; isReadonly: true }
        Property { name: "metadata"; type: "QVariantMap"; isReadonly: true }
        Property { name: "minimumRate"; type: "double"; isReadonly: true }
        Property { name: "playbackStatus"; type: "Mpris::PlaybackStatus"; isReadonly: true }
        Property { name: "position"; type: "qlonglong"; isReadonly: true }
        Property { name: "rate"; type: "double" }
        Property { name: "shuffle"; type: "bool" }
        Property { name: "volume"; type: "double" }
        Signal {
            name: "positionChanged"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal {
            name: "seeked"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "singleService"; type: "bool" }
        Method {
            name: "setSingleService"
            Parameter { name: "single"; type: "bool" }
        }
        Method { name: "currentService"; type: "string" }
        Method {
            name: "setCurrentService"
            Parameter { name: "service"; type: "string" }
        }
        Method { name: "availableServices"; type: "QStringList" }
        Method { name: "canQuit"; type: "bool" }
        Method { name: "canRaise"; type: "bool" }
        Method { name: "canSetFullscreen"; type: "bool" }
        Method { name: "desktopEntry"; type: "string" }
        Method { name: "fullscreen"; type: "bool" }
        Method {
            name: "setFullscreen"
            Parameter { name: "fullscreen"; type: "bool" }
        }
        Method { name: "hasTrackList"; type: "bool" }
        Method { name: "identity"; type: "string" }
        Method { name: "supportedUriSchemes"; type: "QStringList" }
        Method { name: "supportedMimeTypes"; type: "QStringList" }
        Method { name: "canControl"; type: "bool" }
        Method { name: "canGoNext"; type: "bool" }
        Method { name: "canGoPrevious"; type: "bool" }
        Method { name: "canPause"; type: "bool" }
        Method { name: "canPlay"; type: "bool" }
        Method { name: "canSeek"; type: "bool" }
        Method { name: "loopStatus"; type: "Mpris::LoopStatus" }
        Method {
            name: "setLoopStatus"
            Parameter { name: "loopStatus"; type: "Mpris::LoopStatus" }
        }
        Method { name: "maximumRate"; type: "double" }
        Method { name: "metadata"; type: "QVariantMap" }
        Method { name: "minimumRate"; type: "double" }
        Method { name: "playbackStatus"; type: "Mpris::PlaybackStatus" }
        Method { name: "position"; type: "qlonglong" }
        Method { name: "requestPosition" }
        Method { name: "rate"; type: "double" }
        Method {
            name: "setRate"
            Parameter { name: "rate"; type: "double" }
        }
        Method { name: "shuffle"; type: "bool" }
        Method {
            name: "setShuffle"
            Parameter { name: "shuffle"; type: "bool" }
        }
        Method { name: "volume"; type: "double" }
        Method {
            name: "setVolume"
            Parameter { name: "volume"; type: "double" }
        }
        Method { name: "quit"; type: "bool" }
        Method { name: "raise"; type: "bool" }
        Method { name: "next"; type: "bool" }
        Method {
            name: "openUri"
            type: "bool"
            Parameter { name: "uri"; type: "QUrl" }
        }
        Method { name: "pause"; type: "bool" }
        Method { name: "play"; type: "bool" }
        Method { name: "playPause"; type: "bool" }
        Method { name: "previous"; type: "bool" }
        Method {
            name: "seek"
            type: "bool"
            Parameter { name: "offset"; type: "qlonglong" }
        }
        Method {
            name: "setPosition"
            type: "bool"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method {
            name: "setPosition"
            type: "bool"
            Parameter { name: "trackId"; type: "string" }
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "stop"; type: "bool" }
    }
    Component {
        name: "MprisPlayer"
        prototype: "QObject"
        exports: ["org.nemomobile.mpris/MprisPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "serviceName"; type: "string" }
        Property { name: "canQuit"; type: "bool" }
        Property { name: "canRaise"; type: "bool" }
        Property { name: "canSetFullscreen"; type: "bool" }
        Property { name: "desktopEntry"; type: "string" }
        Property { name: "fullscreen"; type: "bool" }
        Property { name: "hasTrackList"; type: "bool" }
        Property { name: "identity"; type: "string" }
        Property { name: "supportedUriSchemes"; type: "QStringList" }
        Property { name: "supportedMimeTypes"; type: "QStringList" }
        Property { name: "canControl"; type: "bool" }
        Property { name: "canGoNext"; type: "bool" }
        Property { name: "canGoPrevious"; type: "bool" }
        Property { name: "canPause"; type: "bool" }
        Property { name: "canPlay"; type: "bool" }
        Property { name: "canSeek"; type: "bool" }
        Property { name: "loopStatus"; type: "Mpris::LoopStatus" }
        Property { name: "maximumRate"; type: "double" }
        Property { name: "metadata"; type: "QVariantMap" }
        Property { name: "minimumRate"; type: "double" }
        Property { name: "playbackStatus"; type: "Mpris::PlaybackStatus" }
        Property { name: "position"; type: "qlonglong" }
        Property { name: "rate"; type: "double" }
        Property { name: "shuffle"; type: "bool" }
        Property { name: "volume"; type: "double" }
        Signal {
            name: "fullscreenRequested"
            Parameter { name: "fullscreen"; type: "bool" }
        }
        Signal { name: "quitRequested" }
        Signal { name: "raiseRequested" }
        Signal {
            name: "loopStatusRequested"
            Parameter { name: "loopStatus"; type: "Mpris::LoopStatus" }
        }
        Signal {
            name: "rateRequested"
            Parameter { name: "rate"; type: "double" }
        }
        Signal {
            name: "shuffleRequested"
            Parameter { name: "shuffle"; type: "bool" }
        }
        Signal {
            name: "volumeRequested"
            Parameter { name: "volume"; type: "double" }
        }
        Signal { name: "nextRequested" }
        Signal {
            name: "openUriRequested"
            Parameter { name: "url"; type: "QUrl" }
        }
        Signal { name: "pauseRequested" }
        Signal { name: "playRequested" }
        Signal { name: "playPauseRequested" }
        Signal { name: "previousRequested" }
        Signal {
            name: "seekRequested"
            Parameter { name: "offset"; type: "qlonglong" }
        }
        Signal {
            name: "seeked"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal {
            name: "setPositionRequested"
            Parameter { name: "trackId"; type: "QDBusObjectPath" }
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal { name: "stopRequested" }
        Method { name: "serviceName"; type: "string" }
        Method {
            name: "setServiceName"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method { name: "canQuit"; type: "bool" }
        Method {
            name: "setCanQuit"
            Parameter { name: "canQuit"; type: "bool" }
        }
        Method { name: "canRaise"; type: "bool" }
        Method {
            name: "setCanRaise"
            Parameter { name: "canRaise"; type: "bool" }
        }
        Method { name: "canSetFullscreen"; type: "bool" }
        Method {
            name: "setCanSetFullscreen"
            Parameter { name: "canSetFullscreen"; type: "bool" }
        }
        Method { name: "desktopEntry"; type: "string" }
        Method {
            name: "setDesktopEntry"
            Parameter { name: "desktopEntry"; type: "string" }
        }
        Method { name: "fullscreen"; type: "bool" }
        Method {
            name: "setFullscreen"
            Parameter { name: "fullscreen"; type: "bool" }
        }
        Method { name: "hasTrackList"; type: "bool" }
        Method {
            name: "setHasTrackList"
            Parameter { name: "hasTrackList"; type: "bool" }
        }
        Method { name: "identity"; type: "string" }
        Method {
            name: "setIdentity"
            Parameter { name: "identity"; type: "string" }
        }
        Method { name: "supportedUriSchemes"; type: "QStringList" }
        Method {
            name: "setSupportedUriSchemes"
            Parameter { name: "supportedUriSchemes"; type: "QStringList" }
        }
        Method { name: "supportedMimeTypes"; type: "QStringList" }
        Method {
            name: "setSupportedMimeTypes"
            Parameter { name: "supportedMimeTypes"; type: "QStringList" }
        }
        Method { name: "canControl"; type: "bool" }
        Method {
            name: "setCanControl"
            Parameter { name: "canControl"; type: "bool" }
        }
        Method { name: "canGoNext"; type: "bool" }
        Method {
            name: "setCanGoNext"
            Parameter { name: "canGoNext"; type: "bool" }
        }
        Method { name: "canGoPrevious"; type: "bool" }
        Method {
            name: "setCanGoPrevious"
            Parameter { name: "canGoPrevious"; type: "bool" }
        }
        Method { name: "canPause"; type: "bool" }
        Method {
            name: "setCanPause"
            Parameter { name: "canPause"; type: "bool" }
        }
        Method { name: "canPlay"; type: "bool" }
        Method {
            name: "setCanPlay"
            Parameter { name: "canPlay"; type: "bool" }
        }
        Method { name: "canSeek"; type: "bool" }
        Method {
            name: "setCanSeek"
            Parameter { name: "canSeek"; type: "bool" }
        }
        Method { name: "loopStatus"; type: "Mpris::LoopStatus" }
        Method {
            name: "setLoopStatus"
            Parameter { name: "loopStatus"; type: "Mpris::LoopStatus" }
        }
        Method { name: "maximumRate"; type: "double" }
        Method {
            name: "setMaximumRate"
            Parameter { name: "maximumRate"; type: "double" }
        }
        Method { name: "metadata"; type: "QVariantMap" }
        Method {
            name: "setMetadata"
            Parameter { name: "metadata"; type: "QVariantMap" }
        }
        Method { name: "minimumRate"; type: "double" }
        Method {
            name: "setMinimumRate"
            Parameter { name: "minimumRate"; type: "double" }
        }
        Method { name: "playbackStatus"; type: "Mpris::PlaybackStatus" }
        Method {
            name: "setPlaybackStatus"
            Parameter { name: "playbackStatus"; type: "Mpris::PlaybackStatus" }
        }
        Method { name: "position"; type: "qlonglong" }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "rate"; type: "double" }
        Method {
            name: "setRate"
            Parameter { name: "rate"; type: "double" }
        }
        Method { name: "shuffle"; type: "bool" }
        Method {
            name: "setShuffle"
            Parameter { name: "shuffle"; type: "bool" }
        }
        Method { name: "volume"; type: "double" }
        Method {
            name: "setVolume"
            Parameter { name: "volume"; type: "double" }
        }
    }
    Component {
        name: "Notification"
        prototype: "QObject"
        exports: ["Nemo.Notifications/Notification 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Urgency"
            values: {
                "Low": 0,
                "Normal": 1,
                "Critical": 2
            }
        }
        Enum {
            name: "CloseReason"
            values: {
                "Expired": 0,
                "DismissedByUser": 1,
                "Closed": 2
            }
        }
        Enum {
            name: "Progress"
            values: {
                "ProgressIndeterminate": -1
            }
        }
        Property { name: "category"; type: "string" }
        Property { name: "appName"; type: "string" }
        Property { name: "replacesId"; type: "uint" }
        Property { name: "icon"; type: "string" }
        Property { name: "appIcon"; type: "string" }
        Property { name: "summary"; type: "string" }
        Property { name: "body"; type: "string" }
        Property { name: "urgency"; type: "Urgency" }
        Property { name: "expireTimeout"; type: "int" }
        Property { name: "timestamp"; type: "QDateTime" }
        Property { name: "previewSummary"; type: "string" }
        Property { name: "previewBody"; type: "string" }
        Property { name: "itemCount"; type: "int" }
        Property { name: "remoteDBusCallServiceName"; type: "string" }
        Property { name: "remoteDBusCallObjectPath"; type: "string" }
        Property { name: "remoteDBusCallInterface"; type: "string" }
        Property { name: "remoteDBusCallMethodName"; type: "string" }
        Property { name: "remoteDBusCallArguments"; type: "QVariantList" }
        Property { name: "remoteActions"; type: "QVariantList" }
        Property { name: "origin"; type: "string" }
        Property { name: "maxContentLines"; type: "int" }
        Property { name: "isTransient"; type: "bool" }
        Property { name: "progress"; type: "QVariant" }
        Signal { name: "clicked" }
        Signal {
            name: "closed"
            Parameter { name: "reason"; type: "uint" }
        }
        Signal { name: "remoteDBusCallChanged" }
        Method { name: "publish" }
        Method { name: "close" }
        Method { name: "notifications"; type: "QList<QObject*>" }
        Method {
            name: "notifications"
            type: "QList<QObject*>"
            Parameter { name: "owner"; type: "string" }
        }
        Method {
            name: "notificationsByCategory"
            type: "QList<QObject*>"
            Parameter { name: "category"; type: "string" }
        }
        Method {
            name: "remoteAction"
            type: "QVariant"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "displayName"; type: "string" }
            Parameter { name: "service"; type: "string" }
            Parameter { name: "path"; type: "string" }
            Parameter { name: "iface"; type: "string" }
            Parameter { name: "method"; type: "string" }
            Parameter { name: "arguments"; type: "QVariantList" }
        }
        Method {
            name: "remoteAction"
            type: "QVariant"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "displayName"; type: "string" }
            Parameter { name: "service"; type: "string" }
            Parameter { name: "path"; type: "string" }
            Parameter { name: "iface"; type: "string" }
            Parameter { name: "method"; type: "string" }
        }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
    Component {
        prototype: "QObject"
        name: "AudioPlayer 1.0"
        exports: ["AudioPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "data"
        Property { name: "shuffle"; type: "bool" }
        Property { name: "repeat"; type: "bool" }
        Property { name: "repeatOne"; type: "bool" }
        Property { name: "rewinding"; type: "bool" }
        Property { name: "forwarding"; type: "bool" }
        Property { name: "playerVisible"; type: "bool" }
        Property { name: "_resume"; type: "bool" }
        Property { name: "_seekOffset"; type: "int" }
        Property { name: "_seekRepeat"; type: "bool" }
        Property { name: "_metadata"; type: "QVariant" }
        Property { name: "mprisPlayerOverride"; type: "ProxyMprisPlayer_QMLTYPE_0"; isPointer: true }
        Property { name: "_mprisPlayer"; type: "ProxyMprisPlayer_QMLTYPE_0"; isPointer: true }
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "position"; type: "int"; isReadonly: true }
        Property { name: "playing"; type: "bool"; isReadonly: true }
        Property { name: "_seeking"; type: "bool"; isReadonly: true }
        Property { name: "currentItem"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "metadata"; type: "QVariant"; isReadonly: true }
        Property { name: "duration"; type: "qlonglong"; isReadonly: true }
        Property { name: "state"; type: "int"; isReadonly: true }
        Property { name: "playModel"; type: "AggregateModel"; isReadonly: true; isPointer: true }
        Signal { name: "tryingToPlay" }
        Method {
            name: "setPosition"
            type: "QVariant"
            Parameter { name: "position"; type: "QVariant" }
        }
        Method {
            name: "setSeekRepeat"
            type: "QVariant"
            Parameter { name: "repeat"; type: "QVariant" }
        }
        Method {
            name: "seekForward"
            type: "QVariant"
            Parameter { name: "time"; type: "QVariant" }
        }
        Method {
            name: "seekBackward"
            type: "QVariant"
            Parameter { name: "time"; type: "QVariant" }
        }
        Method {
            name: "playIndex"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "play"
            type: "QVariant"
            Parameter { name: "model"; type: "QVariant" }
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "shuffleAndPlay"
            type: "QVariant"
            Parameter { name: "model"; type: "QVariant" }
            Parameter { name: "modelSize"; type: "QVariant" }
        }
        Method {
            name: "addToQueue"
            type: "QVariant"
            Parameter { name: "mediaOrModel"; type: "QVariant" }
        }
        Method {
            name: "removeFromQueue"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "removeItemFromQueue"
            type: "QVariant"
            Parameter { name: "mediaItem"; type: "QVariant" }
        }
        Method {
            name: "playUrl"
            type: "QVariant"
            Parameter { name: "url"; type: "QVariant" }
        }
        Method { name: "playPause"; type: "QVariant" }
        Method { name: "_play"; type: "QVariant" }
        Method { name: "pause"; type: "QVariant" }
        Method { name: "stop"; type: "QVariant" }
        Method {
            name: "playPrevious"
            type: "QVariant"
            Parameter { name: "warn"; type: "QVariant" }
        }
        Method {
            name: "playNext"
            type: "QVariant"
            Parameter { name: "warn"; type: "QVariant" }
        }
        Method {
            name: "remove"
            type: "QVariant"
            Parameter { name: "itemMedia"; type: "QVariant" }
            Parameter { name: "listItem"; type: "QVariant" }
            Parameter { name: "playlists"; type: "QVariant" }
        }
        Property { name: "_data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "Container -1.-1"
        exports: ["Container -1.-1"]
        exportMetaObjectRevisions: [-1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "_data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        prototype: "QObject"
        name: "ProxyMprisPlayer -1.-1"
        exports: ["ProxyMprisPlayer -1.-1"]
        exportMetaObjectRevisions: [-1]
        isComposite: true
        Property { name: "canControl"; type: "bool" }
        Property { name: "canGoNext"; type: "bool" }
        Property { name: "canGoPrevious"; type: "bool" }
        Property { name: "canPause"; type: "bool" }
        Property { name: "canPlay"; type: "bool" }
        Property { name: "canSeek"; type: "bool" }
        Property { name: "loopStatus"; type: "int" }
        Property { name: "maximumRate"; type: "double" }
        Property { name: "metadata"; type: "QVariant" }
        Property { name: "minimumRate"; type: "double" }
        Property { name: "playbackStatus"; type: "int" }
        Property { name: "position"; type: "int" }
        Property { name: "rate"; type: "double" }
        Property { name: "shuffle"; type: "bool" }
        Property { name: "volume"; type: "double" }
        Method { name: "onPauseRequested"; type: "QVariant" }
        Method { name: "onPlayRequested"; type: "QVariant" }
        Method { name: "onPlayPauseRequested"; type: "QVariant" }
        Method { name: "onStopRequested"; type: "QVariant" }
        Method { name: "onNextRequested"; type: "QVariant" }
        Method { name: "onPreviousRequested"; type: "QVariant" }
        Method {
            name: "onSeekRequested"
            type: "QVariant"
            Parameter { name: "offset"; type: "QVariant" }
        }
        Method {
            name: "onSetPositionRequested"
            type: "QVariant"
            Parameter { name: "trackId"; type: "QVariant" }
            Parameter { name: "position"; type: "QVariant" }
        }
        Method {
            name: "onOpenUriRequested"
            type: "QVariant"
            Parameter { name: "url"; type: "QVariant" }
        }
        Method {
            name: "onLoopStatusRequested"
            type: "QVariant"
            Parameter { name: "loopStatus"; type: "QVariant" }
        }
        Method {
            name: "onShuffleRequested"
            type: "QVariant"
            Parameter { name: "shuffle"; type: "QVariant" }
        }
    }
}
