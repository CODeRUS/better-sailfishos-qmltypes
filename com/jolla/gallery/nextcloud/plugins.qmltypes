import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies /home/nemo/qmlexport/empty.json com.jolla.gallery.nextcloud 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "NextcloudAlbumModel"
        prototype: "QAbstractListModel"
        exports: ["com.jolla.gallery.nextcloud/NextcloudAlbumModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "AccountIdRole": 257,
                "UserIdRole": 258,
                "AlbumIdRole": 259,
                "ParentAlbumIdRole": 260,
                "AlbumNameRole": 261,
                "PhotoCountRole": 262,
                "ThumbnailUrlRole": 263,
                "ThumbnailPathRole": 264,
                "ThumbnailFileNameRole": 265
            }
        }
        Property { name: "imageCache"; type: "SyncCache::ImageCache"; isPointer: true }
        Property { name: "accountId"; type: "int" }
        Property { name: "userId"; type: "string" }
        Property { name: "userDisplayName"; type: "string"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "rowCountChanged" }
        Method {
            name: "at"
            type: "QVariantMap"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "NextcloudImageCache"
        prototype: "SyncCache::ImageCache"
        exports: ["com.jolla.gallery.nextcloud/NextcloudImageCache 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "NextcloudImageDownloader"
        prototype: "QObject"
        exports: ["com.jolla.gallery.nextcloud/NextcloudImageDownloader 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Null": 0,
                "Ready": 1,
                "Downloading": 2,
                "Error": 3
            }
        }
        Property { name: "imageCache"; type: "SyncCache::ImageCache"; isPointer: true }
        Property { name: "accountId"; type: "int" }
        Property { name: "userId"; type: "string" }
        Property { name: "albumId"; type: "string" }
        Property { name: "photoId"; type: "string" }
        Property { name: "downloadThumbnail"; type: "bool" }
        Property { name: "downloadImage"; type: "bool" }
        Property { name: "imagePath"; type: "QUrl"; isReadonly: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
    }
    Component {
        name: "NextcloudPhotoCounter"
        prototype: "QObject"
        exports: ["com.jolla.gallery.nextcloud/NextcloudPhotoCounter 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "imageCache"; type: "SyncCache::ImageCache"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "NextcloudPhotoModel"
        prototype: "QAbstractListModel"
        exports: ["com.jolla.gallery.nextcloud/NextcloudPhotoModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "AccountIdRole": 257,
                "UserIdRole": 258,
                "AlbumIdRole": 259,
                "PhotoIdRole": 260,
                "CreatedTimestampRole": 261,
                "UpdatedTimestampRole": 262,
                "FileNameRole": 263,
                "AlbumPathRole": 264,
                "DescriptionRole": 265,
                "ThumbnailUrlRole": 266,
                "ThumbnailPathRole": 267,
                "ImageUrlRole": 268,
                "ImagePathRole": 269,
                "ImageWidthRole": 270,
                "ImageHeightRole": 271,
                "FileSizeRole": 272,
                "FileTypeRole": 273
            }
        }
        Property { name: "imageCache"; type: "SyncCache::ImageCache"; isPointer: true }
        Property { name: "accountId"; type: "int" }
        Property { name: "userId"; type: "string" }
        Property { name: "albumId"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "rowCountChanged" }
        Method {
            name: "at"
            type: "QVariantMap"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "NextcloudUserModel"
        prototype: "QAbstractListModel"
        exports: ["com.jolla.gallery.nextcloud/NextcloudUserModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "AccountIdRole": 257,
                "UserIdRole": 258,
                "DisplayNameRole": 259,
                "ThumbnailUrlRole": 260,
                "ThumbnailPathRole": 261
            }
        }
        Property { name: "imageCache"; type: "SyncCache::ImageCache"; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "rowCountChanged" }
        Method {
            name: "at"
            type: "QVariantMap"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "SyncCache::ImageCache"
        prototype: "QObject"
        Signal {
            name: "openDatabaseFailed"
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal { name: "openDatabaseFinished" }
        Signal {
            name: "requestUserFailed"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "requestUserFinished"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "user"; type: "SyncCache::User" }
        }
        Signal {
            name: "requestUsersFailed"
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "requestUsersFinished"
            Parameter { name: "users"; type: "QVector<SyncCache::User>" }
        }
        Signal {
            name: "requestAlbumsFailed"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "requestAlbumsFinished"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "albums"; type: "QVector<SyncCache::Album>" }
        }
        Signal {
            name: "requestPhotosFailed"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "albumId"; type: "string" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "requestPhotosFinished"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "albumId"; type: "string" }
            Parameter { name: "photos"; type: "QVector<SyncCache::Photo>" }
        }
        Signal {
            name: "requestPhotoCountFailed"
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "requestPhotoCountFinished"
            Parameter { name: "photoCount"; type: "int" }
        }
        Signal {
            name: "populateUserThumbnailFailed"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "populateUserThumbnailFinished"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "populateAlbumThumbnailFailed"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "populateAlbumThumbnailFinished"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "populatePhotoThumbnailFailed"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "populatePhotoThumbnailFinished"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "populatePhotoImageFailed"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "populatePhotoImageFinished"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "usersStored"
            Parameter { name: "users"; type: "QVector<SyncCache::User>" }
        }
        Signal {
            name: "albumsStored"
            Parameter { name: "albums"; type: "QVector<SyncCache::Album>" }
        }
        Signal {
            name: "photosStored"
            Parameter { name: "photos"; type: "QVector<SyncCache::Photo>" }
        }
        Signal {
            name: "usersDeleted"
            Parameter { name: "users"; type: "QVector<SyncCache::User>" }
        }
        Signal {
            name: "albumsDeleted"
            Parameter { name: "albums"; type: "QVector<SyncCache::Album>" }
        }
        Signal {
            name: "photosDeleted"
            Parameter { name: "photos"; type: "QVector<SyncCache::Photo>" }
        }
        Method {
            name: "openDatabase"
            Parameter { name: "accountType"; type: "string" }
        }
        Method {
            name: "requestUser"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
        }
        Method { name: "requestUsers" }
        Method {
            name: "requestAlbums"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
        }
        Method {
            name: "requestPhotos"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "albumId"; type: "string" }
        }
        Method { name: "requestPhotoCount" }
        Method {
            name: "populateUserThumbnail"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "requestTemplate"; type: "QNetworkRequest" }
        }
        Method {
            name: "populateAlbumThumbnail"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "albumId"; type: "string" }
            Parameter { name: "requestTemplate"; type: "QNetworkRequest" }
        }
        Method {
            name: "populatePhotoThumbnail"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "albumId"; type: "string" }
            Parameter { name: "photoId"; type: "string" }
            Parameter { name: "requestTemplate"; type: "QNetworkRequest" }
        }
        Method {
            name: "populatePhotoImage"
            Parameter { name: "idempToken"; type: "int" }
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "albumId"; type: "string" }
            Parameter { name: "photoId"; type: "string" }
            Parameter { name: "requestTemplate"; type: "QNetworkRequest" }
        }
    }
}
