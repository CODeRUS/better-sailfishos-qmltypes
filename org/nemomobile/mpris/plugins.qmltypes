import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable org.nemomobile.mpris 1.0'

Module {
    Component {
        name: "Mpris"
        prototype: "QObject"
        exports: ["org.nemomobile.mpris/Mpris 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PlaybackStatus"
            values: {
                "InvalidPlaybackStatus": -1,
                "Playing": 0,
                "Paused": 1,
                "Stopped": 2
            }
        }
        Enum {
            name: "LoopStatus"
            values: {
                "InvalidLoopStatus": -1,
                "None": 0,
                "Track": 1,
                "Playlist": 2
            }
        }
        Enum {
            name: "Metadata"
            values: {
                "InvalidMetadata": -1,
                "TrackId": 0,
                "Length": 1,
                "ArtUrl": 2,
                "Album": 3,
                "AlbumArtist": 4,
                "Artist": 5,
                "AsText": 6,
                "AudioBPM": 7,
                "AutoRating": 8,
                "Comment": 9,
                "Composer": 10,
                "ContentCreated": 11,
                "DiscNumber": 12,
                "FirstUsed": 13,
                "Genre": 14,
                "LastUsed": 15,
                "Lyricist": 16,
                "Title": 17,
                "TrackNumber": 18,
                "Url": 19,
                "UseCount": 20,
                "UserRating": 21
            }
        }
        Method {
            name: "metadataToString"
            type: "string"
            Parameter { name: "metadata"; type: "Metadata" }
        }
    }
    Component {
        name: "MprisManager"
        prototype: "QObject"
        exports: ["org.nemomobile.mpris/MprisManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "singleService"; type: "bool" }
        Property { name: "currentService"; type: "string" }
        Property { name: "availableServices"; type: "QStringList"; isReadonly: true }
        Property { name: "canQuit"; type: "bool"; isReadonly: true }
        Property { name: "canRaise"; type: "bool"; isReadonly: true }
        Property { name: "canSetFullscreen"; type: "bool"; isReadonly: true }
        Property { name: "desktopEntry"; type: "string"; isReadonly: true }
        Property { name: "fullscreen"; type: "bool" }
        Property { name: "hasTrackList"; type: "bool"; isReadonly: true }
        Property { name: "identity"; type: "string"; isReadonly: true }
        Property { name: "supportedUriSchemes"; type: "QStringList"; isReadonly: true }
        Property { name: "supportedMimeTypes"; type: "QStringList"; isReadonly: true }
        Property { name: "canControl"; type: "bool"; isReadonly: true }
        Property { name: "canGoNext"; type: "bool"; isReadonly: true }
        Property { name: "canGoPrevious"; type: "bool"; isReadonly: true }
        Property { name: "canPause"; type: "bool"; isReadonly: true }
        Property { name: "canPlay"; type: "bool"; isReadonly: true }
        Property { name: "canSeek"; type: "bool"; isReadonly: true }
        Property { name: "loopStatus"; type: "Mpris::LoopStatus" }
        Property { name: "maximumRate"; type: "double"; isReadonly: true }
        Property { name: "metadata"; type: "QVariantMap"; isReadonly: true }
        Property { name: "minimumRate"; type: "double"; isReadonly: true }
        Property { name: "playbackStatus"; type: "Mpris::PlaybackStatus"; isReadonly: true }
        Property { name: "position"; type: "qlonglong"; isReadonly: true }
        Property { name: "rate"; type: "double" }
        Property { name: "shuffle"; type: "bool" }
        Property { name: "volume"; type: "double" }
        Signal {
            name: "positionChanged"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal {
            name: "seeked"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "singleService"; type: "bool" }
        Method {
            name: "setSingleService"
            Parameter { name: "single"; type: "bool" }
        }
        Method { name: "currentService"; type: "string" }
        Method {
            name: "setCurrentService"
            Parameter { name: "service"; type: "string" }
        }
        Method { name: "availableServices"; type: "QStringList" }
        Method { name: "canQuit"; type: "bool" }
        Method { name: "canRaise"; type: "bool" }
        Method { name: "canSetFullscreen"; type: "bool" }
        Method { name: "desktopEntry"; type: "string" }
        Method { name: "fullscreen"; type: "bool" }
        Method {
            name: "setFullscreen"
            Parameter { name: "fullscreen"; type: "bool" }
        }
        Method { name: "hasTrackList"; type: "bool" }
        Method { name: "identity"; type: "string" }
        Method { name: "supportedUriSchemes"; type: "QStringList" }
        Method { name: "supportedMimeTypes"; type: "QStringList" }
        Method { name: "canControl"; type: "bool" }
        Method { name: "canGoNext"; type: "bool" }
        Method { name: "canGoPrevious"; type: "bool" }
        Method { name: "canPause"; type: "bool" }
        Method { name: "canPlay"; type: "bool" }
        Method { name: "canSeek"; type: "bool" }
        Method { name: "loopStatus"; type: "Mpris::LoopStatus" }
        Method {
            name: "setLoopStatus"
            Parameter { name: "loopStatus"; type: "Mpris::LoopStatus" }
        }
        Method { name: "maximumRate"; type: "double" }
        Method { name: "metadata"; type: "QVariantMap" }
        Method { name: "minimumRate"; type: "double" }
        Method { name: "playbackStatus"; type: "Mpris::PlaybackStatus" }
        Method { name: "position"; type: "qlonglong" }
        Method { name: "requestPosition" }
        Method { name: "rate"; type: "double" }
        Method {
            name: "setRate"
            Parameter { name: "rate"; type: "double" }
        }
        Method { name: "shuffle"; type: "bool" }
        Method {
            name: "setShuffle"
            Parameter { name: "shuffle"; type: "bool" }
        }
        Method { name: "volume"; type: "double" }
        Method {
            name: "setVolume"
            Parameter { name: "volume"; type: "double" }
        }
        Method { name: "quit"; type: "bool" }
        Method { name: "raise"; type: "bool" }
        Method { name: "next"; type: "bool" }
        Method {
            name: "openUri"
            type: "bool"
            Parameter { name: "uri"; type: "QUrl" }
        }
        Method { name: "pause"; type: "bool" }
        Method { name: "play"; type: "bool" }
        Method { name: "playPause"; type: "bool" }
        Method { name: "previous"; type: "bool" }
        Method {
            name: "seek"
            type: "bool"
            Parameter { name: "offset"; type: "qlonglong" }
        }
        Method {
            name: "setPosition"
            type: "bool"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method {
            name: "setPosition"
            type: "bool"
            Parameter { name: "trackId"; type: "string" }
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "stop"; type: "bool" }
    }
    Component {
        name: "MprisPlayer"
        prototype: "QObject"
        exports: ["org.nemomobile.mpris/MprisPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "serviceName"; type: "string" }
        Property { name: "canQuit"; type: "bool" }
        Property { name: "canRaise"; type: "bool" }
        Property { name: "canSetFullscreen"; type: "bool" }
        Property { name: "desktopEntry"; type: "string" }
        Property { name: "fullscreen"; type: "bool" }
        Property { name: "hasTrackList"; type: "bool" }
        Property { name: "identity"; type: "string" }
        Property { name: "supportedUriSchemes"; type: "QStringList" }
        Property { name: "supportedMimeTypes"; type: "QStringList" }
        Property { name: "canControl"; type: "bool" }
        Property { name: "canGoNext"; type: "bool" }
        Property { name: "canGoPrevious"; type: "bool" }
        Property { name: "canPause"; type: "bool" }
        Property { name: "canPlay"; type: "bool" }
        Property { name: "canSeek"; type: "bool" }
        Property { name: "loopStatus"; type: "Mpris::LoopStatus" }
        Property { name: "maximumRate"; type: "double" }
        Property { name: "metadata"; type: "QVariantMap" }
        Property { name: "minimumRate"; type: "double" }
        Property { name: "playbackStatus"; type: "Mpris::PlaybackStatus" }
        Property { name: "position"; type: "qlonglong" }
        Property { name: "rate"; type: "double" }
        Property { name: "shuffle"; type: "bool" }
        Property { name: "volume"; type: "double" }
        Signal {
            name: "fullscreenRequested"
            Parameter { name: "fullscreen"; type: "bool" }
        }
        Signal { name: "quitRequested" }
        Signal { name: "raiseRequested" }
        Signal {
            name: "loopStatusRequested"
            Parameter { name: "loopStatus"; type: "Mpris::LoopStatus" }
        }
        Signal {
            name: "rateRequested"
            Parameter { name: "rate"; type: "double" }
        }
        Signal {
            name: "shuffleRequested"
            Parameter { name: "shuffle"; type: "bool" }
        }
        Signal {
            name: "volumeRequested"
            Parameter { name: "volume"; type: "double" }
        }
        Signal { name: "nextRequested" }
        Signal {
            name: "openUriRequested"
            Parameter { name: "url"; type: "QUrl" }
        }
        Signal { name: "pauseRequested" }
        Signal { name: "playRequested" }
        Signal { name: "playPauseRequested" }
        Signal { name: "previousRequested" }
        Signal {
            name: "seekRequested"
            Parameter { name: "offset"; type: "qlonglong" }
        }
        Signal {
            name: "seeked"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal {
            name: "setPositionRequested"
            Parameter { name: "trackId"; type: "QDBusObjectPath" }
            Parameter { name: "position"; type: "qlonglong" }
        }
        Signal { name: "stopRequested" }
        Method { name: "serviceName"; type: "string" }
        Method {
            name: "setServiceName"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method { name: "canQuit"; type: "bool" }
        Method {
            name: "setCanQuit"
            Parameter { name: "canQuit"; type: "bool" }
        }
        Method { name: "canRaise"; type: "bool" }
        Method {
            name: "setCanRaise"
            Parameter { name: "canRaise"; type: "bool" }
        }
        Method { name: "canSetFullscreen"; type: "bool" }
        Method {
            name: "setCanSetFullscreen"
            Parameter { name: "canSetFullscreen"; type: "bool" }
        }
        Method { name: "desktopEntry"; type: "string" }
        Method {
            name: "setDesktopEntry"
            Parameter { name: "desktopEntry"; type: "string" }
        }
        Method { name: "fullscreen"; type: "bool" }
        Method {
            name: "setFullscreen"
            Parameter { name: "fullscreen"; type: "bool" }
        }
        Method { name: "hasTrackList"; type: "bool" }
        Method {
            name: "setHasTrackList"
            Parameter { name: "hasTrackList"; type: "bool" }
        }
        Method { name: "identity"; type: "string" }
        Method {
            name: "setIdentity"
            Parameter { name: "identity"; type: "string" }
        }
        Method { name: "supportedUriSchemes"; type: "QStringList" }
        Method {
            name: "setSupportedUriSchemes"
            Parameter { name: "supportedUriSchemes"; type: "QStringList" }
        }
        Method { name: "supportedMimeTypes"; type: "QStringList" }
        Method {
            name: "setSupportedMimeTypes"
            Parameter { name: "supportedMimeTypes"; type: "QStringList" }
        }
        Method { name: "canControl"; type: "bool" }
        Method {
            name: "setCanControl"
            Parameter { name: "canControl"; type: "bool" }
        }
        Method { name: "canGoNext"; type: "bool" }
        Method {
            name: "setCanGoNext"
            Parameter { name: "canGoNext"; type: "bool" }
        }
        Method { name: "canGoPrevious"; type: "bool" }
        Method {
            name: "setCanGoPrevious"
            Parameter { name: "canGoPrevious"; type: "bool" }
        }
        Method { name: "canPause"; type: "bool" }
        Method {
            name: "setCanPause"
            Parameter { name: "canPause"; type: "bool" }
        }
        Method { name: "canPlay"; type: "bool" }
        Method {
            name: "setCanPlay"
            Parameter { name: "canPlay"; type: "bool" }
        }
        Method { name: "canSeek"; type: "bool" }
        Method {
            name: "setCanSeek"
            Parameter { name: "canSeek"; type: "bool" }
        }
        Method { name: "loopStatus"; type: "Mpris::LoopStatus" }
        Method {
            name: "setLoopStatus"
            Parameter { name: "loopStatus"; type: "Mpris::LoopStatus" }
        }
        Method { name: "maximumRate"; type: "double" }
        Method {
            name: "setMaximumRate"
            Parameter { name: "maximumRate"; type: "double" }
        }
        Method { name: "metadata"; type: "QVariantMap" }
        Method {
            name: "setMetadata"
            Parameter { name: "metadata"; type: "QVariantMap" }
        }
        Method { name: "minimumRate"; type: "double" }
        Method {
            name: "setMinimumRate"
            Parameter { name: "minimumRate"; type: "double" }
        }
        Method { name: "playbackStatus"; type: "Mpris::PlaybackStatus" }
        Method {
            name: "setPlaybackStatus"
            Parameter { name: "playbackStatus"; type: "Mpris::PlaybackStatus" }
        }
        Method { name: "position"; type: "qlonglong" }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "rate"; type: "double" }
        Method {
            name: "setRate"
            Parameter { name: "rate"; type: "double" }
        }
        Method { name: "shuffle"; type: "bool" }
        Method {
            name: "setShuffle"
            Parameter { name: "shuffle"; type: "bool" }
        }
        Method { name: "volume"; type: "double" }
        Method {
            name: "setVolume"
            Parameter { name: "volume"; type: "double" }
        }
    }
}
