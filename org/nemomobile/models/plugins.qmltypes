import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate org.nemomobile.models 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "BaseFilterModel"
        prototype: "QAbstractListModel"
        Property { name: "sourceModel"; type: "QObject"; isPointer: true }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "getRole"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "roleName"; type: "string" }
        }
        Method {
            name: "getRole"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "getRoles"
            type: "QVariantMap"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
    }
    Component {
        name: "CompositeModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.models/CompositeModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "models"; type: "QList<QObject*>" }
    }
    Component {
        name: "FilterModel"
        prototype: "BaseFilterModel"
        exports: ["org.nemomobile.models/FilterModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FilterRequirement"
            values: {
                "PassAllFilters": 0,
                "PassAnyFilter": 1
            }
        }
        Property { name: "filters"; type: "QVariantList" }
        Property { name: "filterRequirement"; type: "FilterRequirement" }
    }
    Component {
        name: "ObjectListModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.models/ObjectListModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "automaticRoles"; type: "bool" }
        Property { name: "populated"; type: "bool" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal {
            name: "itemAdded"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "itemRemoved"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "insertItem"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "appendItem"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "removeItem"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "removeItemAt"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "clear" }
        Method {
            name: "get"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "SearchModel"
        prototype: "BaseFilterModel"
        exports: ["org.nemomobile.models/SearchModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MatchType"
            values: {
                "MatchBeginning": 0,
                "MatchAnywhere": 1
            }
        }
        Property { name: "searchRoles"; type: "QStringList" }
        Property { name: "searchProperties"; type: "QStringList" }
        Property { name: "pattern"; type: "string" }
        Property { name: "caseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "matchType"; type: "MatchType" }
    }
}
