import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate org.nemomobile.lipstick 0.1'

Module {
    Component {
        name: "HwcImage"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["org.nemomobile.lipstick/HwcImage 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Null": 0,
                "Ready": 1,
                "Loading": 2,
                "Error": 3
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "overlayColor"; type: "QColor" }
        Property { name: "pixelRatio"; type: "float" }
        Property { name: "textureSize"; type: "QSize" }
        Property { name: "maxTextureSize"; type: "int" }
        Property { name: "effect"; type: "string" }
        Property { name: "rotationHandler"; type: "QQuickItem"; isPointer: true }
        Property { name: "asynchronous"; type: "bool" }
    }
    Component {
        name: "LauncherFolderItem"
        prototype: "QObjectListModel"
        exports: ["org.nemomobile.lipstick/LauncherFolderItem 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "type"; type: "LauncherModel::ItemType"; isReadonly: true }
        Property { name: "title"; type: "string" }
        Property { name: "iconId"; type: "string" }
        Property { name: "isUpdating"; type: "bool"; isReadonly: true }
        Property { name: "updatingProgress"; type: "int"; isReadonly: true }
        Property { name: "parentFolder"; type: "LauncherFolderItem"; isReadonly: true; isPointer: true }
        Signal { name: "directoryFileChanged" }
        Signal { name: "saveNeeded" }
        Method {
            name: "createFolder"
            type: "LauncherFolderItem*"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "name"; type: "string" }
        }
        Method { name: "destroyFolder" }
    }
    Component {
        name: "LauncherFolderModel"
        prototype: "LauncherFolderItem"
        Property { name: "scope"; type: "string" }
        Property { name: "directories"; type: "QStringList" }
        Property { name: "iconDirectories"; type: "QStringList" }
        Property { name: "categories"; type: "QStringList" }
        Signal {
            name: "notifyLaunching"
            Parameter { name: "item"; type: "LauncherItem"; isPointer: true }
        }
        Signal {
            name: "applicationRemoved"
            Parameter { name: "item"; type: "LauncherItem"; isPointer: true }
        }
        Method { name: "load" }
        Method { name: "save" }
        Method {
            name: "moveToFolder"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
            Parameter { name: "folder"; type: "LauncherFolderItem"; isPointer: true }
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "moveToFolder"
            type: "bool"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
            Parameter { name: "folder"; type: "LauncherFolderItem"; isPointer: true }
        }
    }
    Component {
        name: "LauncherFolderModelType"
        prototype: "LauncherFolderModel"
        exports: ["org.nemomobile.lipstick/LauncherFolderModel 0.1"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "LauncherItem"
        prototype: "QObject"
        exports: ["org.nemomobile.lipstick/LauncherItem 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "type"; type: "LauncherModel::ItemType"; isReadonly: true }
        Property { name: "filePath"; type: "string" }
        Property { name: "fileID"; type: "string"; isReadonly: true }
        Property { name: "exec"; type: "string"; isReadonly: true }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "entryType"; type: "string"; isReadonly: true }
        Property { name: "iconId"; type: "string"; isReadonly: true }
        Property { name: "desktopCategories"; type: "QStringList"; isReadonly: true }
        Property { name: "titleUnlocalized"; type: "string"; isReadonly: true }
        Property { name: "shouldDisplay"; type: "bool"; isReadonly: true }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Property { name: "isLaunching"; type: "bool" }
        Property { name: "isUpdating"; type: "bool" }
        Property { name: "isTemporary"; type: "bool" }
        Property { name: "dBusActivated"; type: "bool"; isReadonly: true }
        Property { name: "packageName"; type: "string" }
        Property { name: "updatingProgress"; type: "int" }
        Signal { name: "itemChanged" }
        Method {
            name: "setIsLaunching"
            Parameter { name: "isLaunching"; type: "bool" }
        }
        Method { name: "setIsLaunching" }
        Method { name: "launchApplication" }
        Method {
            name: "readValue"
            type: "string"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "LauncherModel"
        prototype: "QObjectListModel"
        Enum {
            name: "ItemType"
            values: {
                "Application": 0,
                "Folder": 1
            }
        }
        Property { name: "directories"; type: "QStringList" }
        Property { name: "iconDirectories"; type: "QStringList" }
        Property { name: "categories"; type: "QStringList" }
        Property { name: "scope"; type: "string" }
        Signal {
            name: "notifyLaunching"
            Parameter { name: "item"; type: "LauncherItem"; isPointer: true }
        }
        Method { name: "savePositions" }
        Method { name: "removeTemporaryLaunchers" }
    }
    Component {
        name: "LauncherModelType"
        prototype: "LauncherModel"
        exports: ["org.nemomobile.lipstick/LauncherModel 0.1"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "LauncherWatcherModel"
        prototype: "QObjectListModel"
        exports: ["org.nemomobile.lipstick/LauncherWatcherModel 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "filePaths"; type: "QStringList" }
    }
    Component {
        name: "LipstickApi"
        prototype: "QObject"
        exports: ["org.nemomobile.lipstick/Lipstick 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "active"; type: "bool"; isReadonly: true }
        Property { name: "compositor"; type: "QObject"; isReadonly: true; isPointer: true }
        Method {
            name: "takeScreenshot"
            Parameter { name: "path"; type: "string" }
        }
        Method { name: "takeScreenshot" }
    }
    Component {
        name: "LipstickCompositor"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["org.nemomobile.lipstick/Compositor 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "windowCount"; type: "int"; isReadonly: true }
        Property { name: "ghostWindowCount"; type: "int"; isReadonly: true }
        Property { name: "homeActive"; type: "bool" }
        Property { name: "debug"; type: "bool"; isReadonly: true }
        Property { name: "fullscreenSurface"; type: "QWaylandSurface"; isPointer: true }
        Property { name: "directRenderingActive"; type: "bool"; isReadonly: true }
        Property { name: "topmostWindowId"; type: "int" }
        Property { name: "topmostWindowOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "screenOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "sensorOrientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "keymap"; type: "LipstickKeymap"; isPointer: true }
        Property { name: "clipboard"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "orientationLock"; type: "QVariant"; isReadonly: true }
        Property { name: "displayDimmed"; type: "bool"; isReadonly: true }
        Property { name: "completed"; type: "bool"; isReadonly: true }
        Signal {
            name: "windowAdded"
            Parameter { name: "window"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "windowRemoved"
            Parameter { name: "window"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "windowRaised"
            Parameter { name: "window"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "windowLowered"
            Parameter { name: "window"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "windowHidden"
            Parameter { name: "window"; type: "QObject"; isPointer: true }
        }
        Signal { name: "availableWinIdsChanged" }
        Signal {
            name: "privateTopmostWindowProcessIdChanged"
            Parameter { name: "pid"; type: "int" }
        }
        Signal { name: "displayOn" }
        Signal { name: "displayOff" }
        Signal { name: "displayAboutToBeOn" }
        Signal { name: "displayAboutToBeOff" }
        Signal { name: "showUnlockScreen" }
        Method {
            name: "windowForId"
            type: "QObject*"
            Parameter { type: "int" }
        }
        Method {
            name: "closeClientForWindowId"
            Parameter { type: "int" }
        }
        Method { name: "clearKeyboardFocus" }
        Method { name: "setDisplayOff" }
        Method {
            name: "settingsValue"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "settingsValue"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "LipstickCompositorWindow"
        defaultProperty: "data"
        prototype: "QWaylandSurfaceItem"
        Property { name: "windowId"; type: "int"; isReadonly: true }
        Property { name: "isInProcess"; type: "bool"; isReadonly: true }
        Property { name: "delayRemove"; type: "bool" }
        Property { name: "userData"; type: "QVariant" }
        Property { name: "category"; type: "string"; isReadonly: true }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "processId"; type: "qlonglong"; isReadonly: true }
        Property { name: "mouseRegionBounds"; type: "QRect"; isReadonly: true }
        Property { name: "focusOnTouch"; type: "bool" }
        Signal { name: "committed" }
        Method {
            name: "terminateProcess"
            Parameter { name: "killTimeout"; type: "int" }
        }
    }
    Component {
        name: "LipstickKeymap"
        prototype: "QObject"
        exports: ["org.nemomobile.lipstick/Keymap 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "rules"; type: "string" }
        Property { name: "model"; type: "string" }
        Property { name: "layout"; type: "string" }
        Property { name: "variant"; type: "string" }
        Property { name: "options"; type: "string" }
    }
    Component {
        name: "LipstickNotification"
        prototype: "QObject"
        exports: ["org.nemomobile.lipstick/Notification 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "appName"; type: "string"; isReadonly: true }
        Property { name: "disambiguatedAppName"; type: "string"; isReadonly: true }
        Property { name: "replacesId"; type: "uint"; isReadonly: true }
        Property { name: "appIcon"; type: "string"; isReadonly: true }
        Property { name: "summary"; type: "string"; isReadonly: true }
        Property { name: "body"; type: "string"; isReadonly: true }
        Property { name: "actions"; type: "QStringList"; isReadonly: true }
        Property { name: "hints"; type: "QVariantMap"; isReadonly: true }
        Property { name: "expireTimeout"; type: "int"; isReadonly: true }
        Property { name: "icon"; type: "string"; isReadonly: true }
        Property { name: "timestamp"; type: "QDateTime"; isReadonly: true }
        Property { name: "previewIcon"; type: "string"; isReadonly: true }
        Property { name: "previewSummary"; type: "string"; isReadonly: true }
        Property { name: "previewBody"; type: "string"; isReadonly: true }
        Property { name: "urgency"; type: "int"; isReadonly: true }
        Property { name: "itemCount"; type: "int"; isReadonly: true }
        Property { name: "priority"; type: "int"; isReadonly: true }
        Property { name: "category"; type: "string"; isReadonly: true }
        Property { name: "userRemovable"; type: "bool"; isReadonly: true }
        Property { name: "remoteActions"; type: "QVariantList"; isReadonly: true }
        Property { name: "origin"; type: "string"; isReadonly: true }
        Property { name: "owner"; type: "string"; isReadonly: true }
        Property { name: "maxContentLines"; type: "int"; isReadonly: true }
        Signal {
            name: "actionInvoked"
            Parameter { name: "action"; type: "string" }
        }
        Signal { name: "removeRequested" }
    }
    Component {
        name: "NotificationFeedbackPlayer"
        prototype: "QObject"
        exports: ["org.nemomobile.lipstick/NotificationFeedbackPlayer 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "minimumPriority"; type: "int" }
    }
    Component {
        name: "NotificationListModel"
        prototype: "QObjectListModel"
        exports: ["org.nemomobile.lipstick/NotificationListModel 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Signal {
            name: "populatedChanged"
            Parameter { name: "populated"; type: "bool" }
        }
        Signal { name: "clearRequested" }
    }
    Component {
        name: "NotificationPreviewPresenter"
        prototype: "QObject"
        exports: ["org.nemomobile.lipstick/NotificationPreviewPresenter 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "notification"; type: "LipstickNotification"; isReadonly: true; isPointer: true }
        Signal {
            name: "notificationPresented"
            Parameter { name: "id"; type: "uint" }
        }
        Method { name: "showNextNotification" }
    }
    Component {
        name: "QObjectListModel"
        prototype: "QAbstractListModel"
        Property { name: "itemCount"; type: "int"; isReadonly: true }
        Signal {
            name: "itemAdded"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "itemRemoved"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method { name: "reset" }
        Method {
            name: "move"
            Parameter { name: "oldRow"; type: "int" }
            Parameter { name: "newRow"; type: "int" }
        }
        Method {
            name: "update"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "get"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "QQuickWindow"
        defaultProperty: "data"
        prototype: "QWindow"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "color"; type: "QColor" }
        Property { name: "contentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property {
            name: "activeFocusItem"
            revision: 1
            type: "QQuickItem"
            isReadonly: true
            isPointer: true
        }
        Signal { name: "frameSwapped" }
        Signal { name: "sceneGraphInitialized" }
        Signal { name: "sceneGraphInvalidated" }
        Signal { name: "beforeSynchronizing" }
        Signal { name: "beforeRendering" }
        Signal { name: "afterRendering" }
        Signal { name: "sceneGraphAboutToStop" }
        Signal {
            name: "closing"
            revision: 1
            Parameter { name: "close"; type: "QQuickCloseEvent"; isPointer: true }
        }
        Signal {
            name: "colorChanged"
            Parameter { type: "QColor" }
        }
        Signal { name: "activeFocusItemChanged"; revision: 1 }
        Method { name: "update" }
        Method { name: "releaseResources" }
    }
    Component {
        name: "QWaylandSurface"
        prototype: "QObject"
        exports: ["org.nemomobile.lipstick/WaylandSurface 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "WindowFlag"
            values: {
                "OverridesSystemGestures": 1,
                "StaysOnTop": 2,
                "BypassWindowManager": 4
            }
        }
        Enum {
            name: "WindowFlags"
            values: {
                "OverridesSystemGestures": 1,
                "StaysOnTop": 2,
                "BypassWindowManager": 4
            }
        }
        Enum {
            name: "WindowType"
            values: {
                "None": 0,
                "Toplevel": 1,
                "Transient": 2,
                "Popup": 3
            }
        }
        Property { name: "size"; type: "QSize"; isReadonly: true }
        Property { name: "windowFlags"; type: "QWaylandSurface::WindowFlags"; isReadonly: true }
        Property { name: "windowType"; type: "QWaylandSurface::WindowType"; isReadonly: true }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "className"; type: "string"; isReadonly: true }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "orientationUpdateMask"; type: "Qt::ScreenOrientations"; isReadonly: true }
        Property { name: "visibility"; type: "QWindow::Visibility" }
        Property { name: "transientParent"; type: "QWaylandSurface"; isReadonly: true; isPointer: true }
        Property { name: "transientOffset"; type: "QPointF"; isReadonly: true }
        Signal { name: "mapped" }
        Signal { name: "unmapped" }
        Signal {
            name: "damaged"
            Parameter { name: "rect"; type: "QRegion" }
        }
        Signal {
            name: "parentChanged"
            Parameter { name: "newParent"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "oldParent"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "windowPropertyChanged"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Signal {
            name: "windowFlagsChanged"
            Parameter { name: "flags"; type: "WindowFlags" }
        }
        Signal {
            name: "windowTypeChanged"
            Parameter { name: "type"; type: "WindowType" }
        }
        Signal { name: "extendedSurfaceReady" }
        Signal { name: "raiseRequested" }
        Signal { name: "lowerRequested" }
        Signal { name: "pong" }
        Signal { name: "surfaceDestroyed" }
        Signal {
            name: "configure"
            Parameter { name: "hasBuffer"; type: "bool" }
        }
        Signal { name: "redraw" }
        Method { name: "updateSelection" }
        Method {
            name: "requestSize"
            Parameter { name: "size"; type: "QSize" }
        }
        Method {
            name: "sendOnScreenVisibilityChange"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "destroy" }
        Method { name: "destroySurface" }
        Method { name: "destroySurfaceByForce" }
        Method { name: "ping" }
    }
    Component {
        name: "QWaylandSurfaceItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "surface"; type: "QWaylandSurface"; isReadonly: true; isPointer: true }
        Property { name: "paintEnabled"; type: "bool" }
        Property { name: "touchEventsEnabled"; type: "bool" }
        Property { name: "isYInverted"; type: "bool"; isReadonly: true }
        Property { name: "resizeSurfaceToItem"; type: "bool" }
        Signal { name: "yInvertedChanged" }
        Signal { name: "surfaceDestroyed" }
        Method { name: "takeFocus" }
        Method {
            name: "setPaintEnabled"
            Parameter { name: "paintEnabled"; type: "bool" }
        }
        Method { name: "isYInverted"; type: "bool" }
    }
    Component {
        name: "QWindow"
        prototype: "QObject"
        Enum {
            name: "Visibility"
            values: {
                "Hidden": 0,
                "AutomaticVisibility": 1,
                "Windowed": 2,
                "Minimized": 3,
                "Maximized": 4,
                "FullScreen": 5
            }
        }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "visible"; type: "bool" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "visibility"; revision: 1; type: "Visibility" }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "float" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            revision: 1
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Signal { name: "activeChanged"; revision: 1 }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "float" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "requestUpdate"; revision: 3 }
    }
    Component {
        name: "ShutdownScreen"
        prototype: "QObject"
        exports: ["org.nemomobile.lipstick/ShutdownScreen 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "windowVisible"; type: "bool" }
    }
    Component {
        name: "USBModeSelector"
        prototype: "QObject"
        exports: ["org.nemomobile.lipstick/USBModeSelector 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "windowVisible"; type: "bool" }
        Property { name: "supportedUSBModes"; type: "QStringList"; isReadonly: true }
        Signal { name: "dialogShown" }
        Signal { name: "showUnlockScreen" }
        Method {
            name: "setUSBMode"
            Parameter { name: "mode"; type: "string" }
        }
    }
    Component {
        name: "VolumeControl"
        prototype: "QObject"
        exports: ["org.nemomobile.lipstick/VolumeControl 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MediaState"
            values: {
                "MediaStateUnknown": 0,
                "MediaStateInactive": 1,
                "MediaStateForeground": 2,
                "MediaStateBackground": 3,
                "MediaStateActive": 4
            }
        }
        Property { name: "volume"; type: "int" }
        Property { name: "maximumVolume"; type: "int"; isReadonly: true }
        Property { name: "safeVolume"; type: "int"; isReadonly: true }
        Property { name: "restrictedVolume"; type: "int"; isReadonly: true }
        Property { name: "windowVisible"; type: "bool" }
        Property { name: "callActive"; type: "bool"; isReadonly: true }
        Property { name: "mediaState"; type: "int"; isReadonly: true }
        Signal {
            name: "volumeKeyPressed"
            Parameter { name: "key"; type: "int" }
        }
        Signal {
            name: "volumeKeyReleased"
            Parameter { name: "key"; type: "int" }
        }
        Signal {
            name: "showAudioWarning"
            Parameter { name: "initial"; type: "bool" }
        }
        Method {
            name: "setWarningAcknowledged"
            Parameter { name: "acknowledged"; type: "bool" }
        }
    }
    Component {
        name: "WindowModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.lipstick/WindowModel 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "itemCount"; type: "int"; isReadonly: true }
        Signal {
            name: "itemAdded"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "launchProcess"
            Parameter { name: "binaryName"; type: "string" }
        }
        Method {
            name: "windowId"
            type: "int"
            Parameter { type: "int" }
        }
    }
    Component {
        name: "WindowPixmapItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["org.nemomobile.lipstick/WindowPixmapItem 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "windowId"; type: "int" }
        Property { name: "hasPixmap"; type: "bool"; isReadonly: true }
        Property { name: "opaque"; type: "bool" }
        Property { name: "radius"; type: "float" }
        Property { name: "windowSize"; type: "QSize" }
        Property { name: "xOffset"; type: "float" }
        Property { name: "yOffset"; type: "float" }
        Property { name: "xScale"; type: "float" }
        Property { name: "yScale"; type: "float" }
    }
    Component {
        name: "WindowProperty"
        prototype: "QObject"
        exports: ["org.nemomobile.lipstick/WindowProperty 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "windowId"; type: "int" }
        Property { name: "property"; type: "string" }
        Property { name: "value"; type: "QVariant"; isReadonly: true }
    }
}
