import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate org.nemomobile.social 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "ContentItemInterface"
        prototype: "QObject"
        exports: ["org.nemomobile.social/ContentItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "socialNetwork"; type: "SocialNetworkInterface"; isPointer: true }
        Property { name: "type"; type: "int"; isReadonly: true }
        Property { name: "data"; type: "QVariantMap"; isReadonly: true }
        Property { name: "identifiable"; type: "bool"; isReadonly: true }
        Method { name: "asIdentifiable"; type: "IdentifiableContentItemInterface*" }
    }
    Component {
        name: "ContentItemTypeFilterInterface"
        prototype: "FilterInterface"
        exports: ["org.nemomobile.social/ContentItemTypeFilter 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "type"; type: "int" }
        Property { name: "whichFields"; type: "QStringList" }
        Property { name: "limit"; type: "int" }
    }
    Component {
        name: "FacebookAlbumInterface"
        prototype: "IdentifiableContentItemInterface"
        exports: ["org.nemomobile.social/FacebookAlbum 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AlbumType"
            values: {
                "Album": 0,
                "Normal": 1,
                "Wall": 2,
                "Profile": 3,
                "Mobile": 4
            }
        }
        Property {
            name: "from"
            type: "FacebookObjectReferenceInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "link"; type: "QUrl"; isReadonly: true }
        Property { name: "coverPhoto"; type: "QUrl"; isReadonly: true }
        Property { name: "privacy"; type: "string"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "albumType"; type: "FacebookAlbumInterface::AlbumType"; isReadonly: true }
        Property { name: "createdTime"; type: "string"; isReadonly: true }
        Property { name: "updatedTime"; type: "string"; isReadonly: true }
        Property { name: "canUpload"; type: "bool"; isReadonly: true }
        Property { name: "liked"; type: "bool"; isReadonly: true }
        Property { name: "likesCount"; type: "int"; isReadonly: true }
        Property { name: "commentsCount"; type: "int"; isReadonly: true }
        Method { name: "remove"; type: "bool" }
        Method {
            name: "reload"
            type: "bool"
            Parameter { name: "whichFields"; type: "QStringList" }
        }
        Method { name: "reload"; type: "bool" }
        Method { name: "like"; type: "bool" }
        Method { name: "unlike"; type: "bool" }
        Method {
            name: "uploadComment"
            type: "bool"
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "removeComment"
            type: "bool"
            Parameter { name: "commentIdentifier"; type: "string" }
        }
        Method {
            name: "uploadPhoto"
            type: "bool"
            Parameter { name: "source"; type: "QUrl" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "uploadPhoto"
            type: "bool"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "removePhoto"
            type: "bool"
            Parameter { name: "photoIdentifier"; type: "string" }
        }
    }
    Component {
        name: "FacebookCommentFilterInterface"
        prototype: "FilterInterface"
        exports: ["org.nemomobile.social/FacebookCommentFilter 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "RetrieveMode"
            values: {
                "RetrieveOffset": 0,
                "RetrieveFirst": 1,
                "RetrieveLatest": 2
            }
        }
        Property { name: "limit"; type: "int" }
        Property { name: "offset"; type: "int" }
        Property { name: "retrieveMode"; type: "RetrieveMode" }
    }
    Component {
        name: "FacebookCommentInterface"
        prototype: "IdentifiableContentItemInterface"
        exports: ["org.nemomobile.social/FacebookComment 1.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "from"
            type: "FacebookObjectReferenceInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "message"; type: "string"; isReadonly: true }
        Property { name: "createdTime"; type: "string"; isReadonly: true }
        Property { name: "likeCount"; type: "int"; isReadonly: true }
        Property { name: "parent"; type: "FacebookCommentInterface"; isReadonly: true; isPointer: true }
        Property { name: "canComment"; type: "bool"; isReadonly: true }
        Property { name: "commentCount"; type: "int"; isReadonly: true }
        Property { name: "liked"; type: "bool"; isReadonly: true }
        Method { name: "remove"; type: "bool" }
        Method {
            name: "reload"
            type: "bool"
            Parameter { name: "whichFields"; type: "QStringList" }
        }
        Method { name: "reload"; type: "bool" }
        Method { name: "like"; type: "bool" }
        Method { name: "unlike"; type: "bool" }
    }
    Component {
        name: "FacebookInterface"
        prototype: "SocialNetworkInterface"
        exports: ["org.nemomobile.social/Facebook 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContentItemType"
            values: {
                "NotInitialized": 0,
                "Unknown": 1,
                "ObjectReference": 2,
                "Album": 3,
                "Comment": 4,
                "Notification": 5,
                "Photo": 6,
                "Post": 7,
                "User": 8,
                "Application": 9,
                "Event": 10,
                "Home": 11,
                "Location": 12,
                "Like": 13,
                "NameTag": 14,
                "PhotoImage": 15,
                "PhotoTag": 16,
                "PostAction": 17,
                "PostProperty": 18,
                "UserCover": 19,
                "UserPicture": 20
            }
        }
        Property { name: "accessToken"; type: "string" }
        Property { name: "currentUserIdentifier"; type: "string"; isReadonly: true }
    }
    Component {
        name: "FacebookLikeInterface"
        prototype: "ContentItemInterface"
        exports: ["org.nemomobile.social/FacebookLike 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "userIdentifier"; type: "string"; isReadonly: true }
        Property { name: "userName"; type: "string"; isReadonly: true }
    }
    Component {
        name: "FacebookNameTagInterface"
        prototype: "ContentItemInterface"
        exports: ["org.nemomobile.social/FacebookNameTag 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "userIdentifier"; type: "string"; isReadonly: true }
        Property { name: "userName"; type: "string"; isReadonly: true }
        Property { name: "nameTagType"; type: "string"; isReadonly: true }
        Property { name: "offset"; type: "int"; isReadonly: true }
        Property { name: "length"; type: "int"; isReadonly: true }
    }
    Component {
        name: "FacebookNotificationInterface"
        prototype: "IdentifiableContentItemInterface"
        exports: ["org.nemomobile.social/FacebookNotification 1.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "from"
            type: "FacebookObjectReferenceInterface"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "to"
            type: "FacebookObjectReferenceInterface"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "application"
            type: "FacebookObjectReferenceInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "createdTime"; type: "string"; isReadonly: true }
        Property { name: "updatedTime"; type: "string"; isReadonly: true }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "link"; type: "QUrl"; isReadonly: true }
        Property { name: "unread"; type: "int"; isReadonly: true }
        Method { name: "remove"; type: "bool" }
        Method {
            name: "reload"
            type: "bool"
            Parameter { name: "whichFields"; type: "QStringList" }
        }
        Method { name: "reload"; type: "bool" }
    }
    Component {
        name: "FacebookObjectReferenceInterface"
        prototype: "ContentItemInterface"
        exports: ["org.nemomobile.social/FacebookObjectReference 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "objectIdentifier"; type: "string"; isReadonly: true }
        Property { name: "objectName"; type: "string"; isReadonly: true }
        Property { name: "objectType"; type: "FacebookInterface::ContentItemType"; isReadonly: true }
    }
    Component {
        name: "FacebookPhotoImageInterface"
        prototype: "ContentItemInterface"
        exports: ["org.nemomobile.social/FacebookPhotoImage 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "QUrl"; isReadonly: true }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
    }
    Component {
        name: "FacebookPhotoInterface"
        prototype: "IdentifiableContentItemInterface"
        exports: ["org.nemomobile.social/FacebookPhoto 1.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "from"
            type: "FacebookObjectReferenceInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "tags"; type: "FacebookPhotoTagInterface"; isList: true; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "nameTags"; type: "FacebookNameTagInterface"; isList: true; isReadonly: true }
        Property { name: "icon"; type: "QUrl"; isReadonly: true }
        Property { name: "picture"; type: "QUrl"; isReadonly: true }
        Property { name: "source"; type: "QUrl"; isReadonly: true }
        Property { name: "height"; type: "int"; isReadonly: true }
        Property { name: "width"; type: "int"; isReadonly: true }
        Property { name: "images"; type: "FacebookPhotoImageInterface"; isList: true; isReadonly: true }
        Property { name: "link"; type: "QUrl"; isReadonly: true }
        Property { name: "place"; type: "QVariantMap"; isReadonly: true }
        Property { name: "createdTime"; type: "string"; isReadonly: true }
        Property { name: "updatedTime"; type: "string"; isReadonly: true }
        Property { name: "liked"; type: "bool"; isReadonly: true }
        Property { name: "likesCount"; type: "int"; isReadonly: true }
        Property { name: "commentsCount"; type: "int"; isReadonly: true }
        Method { name: "remove"; type: "bool" }
        Method {
            name: "reload"
            type: "bool"
            Parameter { name: "whichFields"; type: "QStringList" }
        }
        Method { name: "reload"; type: "bool" }
        Method { name: "like"; type: "bool" }
        Method { name: "unlike"; type: "bool" }
        Method {
            name: "tagUser"
            type: "bool"
            Parameter { name: "userId"; type: "string" }
            Parameter { name: "xOffset"; type: "float" }
            Parameter { name: "yOffset"; type: "float" }
        }
        Method {
            name: "untagUser"
            type: "bool"
            Parameter { name: "userId"; type: "string" }
        }
        Method {
            name: "tagText"
            type: "bool"
            Parameter { name: "text"; type: "string" }
            Parameter { name: "xOffset"; type: "float" }
            Parameter { name: "yOffset"; type: "float" }
        }
        Method {
            name: "untagText"
            type: "bool"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "uploadComment"
            type: "bool"
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "removeComment"
            type: "bool"
            Parameter { name: "commentIdentifier"; type: "string" }
        }
    }
    Component {
        name: "FacebookPhotoTagInterface"
        prototype: "ContentItemInterface"
        exports: ["org.nemomobile.social/FacebookPhotoTag 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "userIdentifier"; type: "string"; isReadonly: true }
        Property { name: "userName"; type: "string"; isReadonly: true }
        Property { name: "text"; type: "string"; isReadonly: true }
        Property { name: "x"; type: "float"; isReadonly: true }
        Property { name: "y"; type: "float"; isReadonly: true }
        Property { name: "createdTime"; type: "string"; isReadonly: true }
    }
    Component {
        name: "FacebookPostActionInterface"
        prototype: "ContentItemInterface"
        exports: ["org.nemomobile.social/FacebookPostAction 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "link"; type: "string"; isReadonly: true }
    }
    Component {
        name: "FacebookPostInterface"
        prototype: "IdentifiableContentItemInterface"
        exports: ["org.nemomobile.social/FacebookPost 1.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "from"
            type: "FacebookObjectReferenceInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "to"; type: "FacebookObjectReferenceInterface"; isList: true; isReadonly: true }
        Property { name: "message"; type: "string"; isReadonly: true }
        Property { name: "messageTags"; type: "FacebookNameTagInterface"; isList: true; isReadonly: true }
        Property { name: "picture"; type: "QUrl"; isReadonly: true }
        Property { name: "link"; type: "QUrl"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "caption"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "source"; type: "QUrl"; isReadonly: true }
        Property {
            name: "properties"
            type: "FacebookPostPropertyInterface"
            isList: true
            isReadonly: true
        }
        Property { name: "icon"; type: "QUrl"; isReadonly: true }
        Property { name: "actions"; type: "FacebookPostActionInterface"; isList: true; isReadonly: true }
        Property { name: "postType"; type: "string"; isReadonly: true }
        Property { name: "story"; type: "string"; isReadonly: true }
        Property { name: "storyTags"; type: "FacebookNameTagInterface"; isList: true; isReadonly: true }
        Property {
            name: "withTags"
            type: "FacebookObjectReferenceInterface"
            isList: true
            isReadonly: true
        }
        Property { name: "objectIdentifier"; type: "string"; isReadonly: true }
        Property {
            name: "application"
            type: "FacebookObjectReferenceInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "createdTime"; type: "string"; isReadonly: true }
        Property { name: "updatedTime"; type: "string"; isReadonly: true }
        Property { name: "shares"; type: "int"; isReadonly: true }
        Property { name: "hidden"; type: "bool"; isReadonly: true }
        Property { name: "statusType"; type: "string"; isReadonly: true }
        Property { name: "liked"; type: "bool"; isReadonly: true }
        Property { name: "likesCount"; type: "int"; isReadonly: true }
        Property { name: "commentsCount"; type: "int"; isReadonly: true }
        Method { name: "remove"; type: "bool" }
        Method {
            name: "reload"
            type: "bool"
            Parameter { name: "whichFields"; type: "QStringList" }
        }
        Method { name: "reload"; type: "bool" }
        Method { name: "like"; type: "bool" }
        Method { name: "unlike"; type: "bool" }
        Method {
            name: "uploadComment"
            type: "bool"
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "removeComment"
            type: "bool"
            Parameter { name: "commentIdentifier"; type: "string" }
        }
    }
    Component {
        name: "FacebookPostPropertyInterface"
        prototype: "ContentItemInterface"
        exports: ["org.nemomobile.social/FacebookPostProperty 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "text"; type: "string"; isReadonly: true }
    }
    Component {
        name: "FacebookUserCoverInterface"
        prototype: "ContentItemInterface"
        exports: ["org.nemomobile.social/FacebookUserCover 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "photoIdentifier"; type: "string"; isReadonly: true }
        Property { name: "source"; type: "string"; isReadonly: true }
        Property { name: "offsetY"; type: "int"; isReadonly: true }
    }
    Component {
        name: "FacebookUserInterface"
        prototype: "IdentifiableContentItemInterface"
        exports: ["org.nemomobile.social/FacebookUser 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "RelationshipStatus"
            values: {
                "UnknownRelationshipStatus": 0,
                "Single": 1,
                "InARelationship": 2,
                "Engaged": 3,
                "Married": 4,
                "ItsComplicated": 5,
                "InAnOpenRelationship": 6,
                "Widowed": 7,
                "Separated": 8,
                "Divorced": 9,
                "InACivilUnion": 10,
                "InADomesticPartnership": 11
            }
        }
        Enum {
            name: "Gender"
            values: {
                "UnknownGender": 0,
                "Male": 1,
                "Female": 2
            }
        }
        Enum {
            name: "Genders"
            values: {
                "UnknownGender": 0,
                "Male": 1,
                "Female": 2
            }
        }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "firstName"; type: "string"; isReadonly: true }
        Property { name: "middleName"; type: "string"; isReadonly: true }
        Property { name: "lastName"; type: "string"; isReadonly: true }
        Property { name: "gender"; type: "FacebookUserInterface::Gender"; isReadonly: true }
        Property { name: "locale"; type: "string"; isReadonly: true }
        Property { name: "link"; type: "QUrl"; isReadonly: true }
        Property { name: "username"; type: "string"; isReadonly: true }
        Property { name: "thirdPartyIdentifier"; type: "string"; isReadonly: true }
        Property { name: "installed"; type: "bool"; isReadonly: true }
        Property { name: "timezone"; type: "float"; isReadonly: true }
        Property { name: "updatedTime"; type: "string"; isReadonly: true }
        Property { name: "verified"; type: "bool"; isReadonly: true }
        Property { name: "bio"; type: "string"; isReadonly: true }
        Property { name: "birthday"; type: "string"; isReadonly: true }
        Property { name: "cover"; type: "FacebookUserCoverInterface"; isReadonly: true; isPointer: true }
        Property { name: "email"; type: "string"; isReadonly: true }
        Property {
            name: "hometown"
            type: "FacebookObjectReferenceInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "interestedIn"; type: "FacebookUserInterface::Genders"; isReadonly: true }
        Property {
            name: "location"
            type: "FacebookObjectReferenceInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "political"; type: "string"; isReadonly: true }
        Property {
            name: "picture"
            type: "FacebookUserPictureInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "quotes"; type: "string"; isReadonly: true }
        Property {
            name: "relationshipStatus"
            type: "FacebookUserInterface::RelationshipStatus"
            isReadonly: true
        }
        Property { name: "religion"; type: "string"; isReadonly: true }
        Property {
            name: "significantOther"
            type: "FacebookObjectReferenceInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "website"; type: "QUrl"; isReadonly: true }
        Method { name: "remove"; type: "bool" }
        Method {
            name: "reload"
            type: "bool"
            Parameter { name: "whichFields"; type: "QStringList" }
        }
        Method { name: "reload"; type: "bool" }
        Method {
            name: "uploadPhoto"
            type: "bool"
            Parameter { name: "source"; type: "QUrl" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "uploadPhoto"
            type: "bool"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "removePhoto"
            type: "bool"
            Parameter { name: "photoIdentifier"; type: "string" }
        }
        Method {
            name: "uploadAlbum"
            type: "bool"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "message"; type: "string" }
            Parameter { name: "privacy"; type: "QVariantMap" }
        }
        Method {
            name: "uploadAlbum"
            type: "bool"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "uploadAlbum"
            type: "bool"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "removeAlbum"
            type: "bool"
            Parameter { name: "albumIdentifier"; type: "string" }
        }
    }
    Component {
        name: "FacebookUserPictureInterface"
        prototype: "ContentItemInterface"
        exports: ["org.nemomobile.social/FacebookUserPicture 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "url"; type: "QUrl"; isReadonly: true }
        Property { name: "isSilhouette"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "FilterInterface"
        prototype: "QObject"
        exports: ["org.nemomobile.social/Filter 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "IdentifiableContentItemInterface"
        prototype: "ContentItemInterface"
        exports: ["org.nemomobile.social/IdentifiableContentItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "identifier"; type: "string" }
        Property { name: "status"; type: "SocialNetworkInterface::Status"; isReadonly: true }
        Property { name: "error"; type: "SocialNetworkInterface::ErrorType"; isReadonly: true }
        Property { name: "errorMessage"; type: "string"; isReadonly: true }
        Signal {
            name: "responseReceived"
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Method { name: "remove"; type: "bool" }
        Method {
            name: "reload"
            type: "bool"
            Parameter { name: "whichFields"; type: "QStringList" }
        }
        Method { name: "reload"; type: "bool" }
    }
    Component {
        name: "SocialNetworkInterface"
        prototype: "QObject"
        exports: ["org.nemomobile.social/SocialNetwork 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Initializing": 0,
                "Idle": 1,
                "Busy": 2,
                "Error": 3,
                "Invalid": 4
            }
        }
        Enum {
            name: "ErrorType"
            values: {
                "NoError": 0,
                "AccountError": 1,
                "SignOnError": 2,
                "BusyError": 3,
                "RequestError": 4,
                "DataUpdateError": 5,
                "OtherError": 6,
                "LastError": 255
            }
        }
        Enum {
            name: "ContentType"
            values: {
                "NotInitialized": 0,
                "Unknown": 1
            }
        }
        Enum {
            name: "RequestType"
            values: {
                "GetRequest": 0,
                "PostRequest": 1,
                "DeleteRequest": 2
            }
        }
        Property { name: "initialized"; type: "bool"; isReadonly: true }
        Signal {
            name: "arbitraryRequestResponseReceived"
            Parameter { name: "success"; type: "bool" }
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Method {
            name: "arbitraryRequest"
            type: "bool"
            Parameter { name: "requestType"; type: "RequestType" }
            Parameter { name: "requestUri"; type: "string" }
            Parameter { name: "queryItems"; type: "QVariantMap" }
            Parameter { name: "postData"; type: "string" }
        }
        Method {
            name: "arbitraryRequest"
            type: "bool"
            Parameter { name: "requestType"; type: "RequestType" }
            Parameter { name: "requestUri"; type: "string" }
            Parameter { name: "queryItems"; type: "QVariantMap" }
        }
        Method {
            name: "arbitraryRequest"
            type: "bool"
            Parameter { name: "requestType"; type: "RequestType" }
            Parameter { name: "requestUri"; type: "string" }
        }
    }
    Component {
        name: "SocialNetworkModelInterface"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.social/SocialNetworkModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "status"; type: "SocialNetworkInterface::Status"; isReadonly: true }
        Property { name: "error"; type: "SocialNetworkInterface::ErrorType"; isReadonly: true }
        Property { name: "errorMessage"; type: "string"; isReadonly: true }
        Property { name: "socialNetwork"; type: "SocialNetworkInterface"; isPointer: true }
        Property { name: "nodeIdentifier"; type: "string" }
        Property { name: "nodeType"; type: "int" }
        Property {
            name: "node"
            type: "IdentifiableContentItemInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "hasPrevious"; type: "bool"; isReadonly: true }
        Property { name: "hasNext"; type: "bool"; isReadonly: true }
        Property { name: "filters"; type: "FilterInterface"; isList: true; isReadonly: true }
        Property { name: "sorters"; type: "SorterInterface"; isList: true; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method { name: "populate" }
        Method { name: "repopulate" }
        Method { name: "loadNext" }
        Method { name: "loadPrevious" }
        Method { name: "clean" }
        Method {
            name: "relatedItem"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "SorterInterface"
        prototype: "QObject"
        exports: ["org.nemomobile.social/Sorter 1.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "TwitterConversationFilterInterface"
        prototype: "FilterInterface"
        exports: ["org.nemomobile.social/TwitterConversationFilter 1.0"]
        exportMetaObjectRevisions: [0]
        Signal { name: "streamChanged" }
    }
    Component {
        name: "TwitterInterface"
        prototype: "SocialNetworkInterface"
        exports: ["org.nemomobile.social/Twitter 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ContentItemType"
            values: {
                "NotInitialized": 0,
                "Unknown": 1,
                "User": 2,
                "Tweet": 3,
                "Place": 4,
                "Home": 128,
                "Friends": 256,
                "Followers": 257
            }
        }
        Property { name: "oauthToken"; type: "string" }
        Property { name: "oauthTokenSecret"; type: "string" }
        Property { name: "consumerKey"; type: "string" }
        Property { name: "consumerSecret"; type: "string" }
        Property { name: "currentUserIdentifier"; type: "string" }
    }
    Component {
        name: "TwitterTweetInterface"
        prototype: "IdentifiableContentItemInterface"
        exports: ["org.nemomobile.social/TwitterTweet 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "createdAt"; type: "QDateTime"; isReadonly: true }
        Property { name: "favoriteCount"; type: "int"; isReadonly: true }
        Property { name: "favorited"; type: "bool"; isReadonly: true }
        Property { name: "filterLevel"; type: "string"; isReadonly: true }
        Property { name: "inReplyToScreenName"; type: "string"; isReadonly: true }
        Property { name: "inReplyToStatusIdentifier"; type: "string"; isReadonly: true }
        Property { name: "inReplyToUserIdentifier"; type: "string"; isReadonly: true }
        Property { name: "lang"; type: "string"; isReadonly: true }
        Property { name: "possiblySensitive"; type: "bool"; isReadonly: true }
        Property { name: "retweetCount"; type: "int"; isReadonly: true }
        Property { name: "retweeted"; type: "bool"; isReadonly: true }
        Property { name: "source"; type: "string"; isReadonly: true }
        Property { name: "text"; type: "string"; isReadonly: true }
        Property { name: "truncated"; type: "bool"; isReadonly: true }
        Property { name: "user"; type: "TwitterUserInterface"; isReadonly: true; isPointer: true }
        Property { name: "withheldCopyright"; type: "bool"; isReadonly: true }
        Property { name: "withheldScope"; type: "string"; isReadonly: true }
        Method { name: "remove"; type: "bool" }
        Method {
            name: "reload"
            type: "bool"
            Parameter { name: "whichFields"; type: "QStringList" }
        }
        Method { name: "reload"; type: "bool" }
        Method { name: "uploadRetweet"; type: "bool" }
        Method { name: "removeRetweet"; type: "bool" }
        Method { name: "favorite"; type: "bool" }
        Method { name: "unfavorite"; type: "bool" }
        Method {
            name: "uploadReply"
            type: "bool"
            Parameter { name: "message"; type: "string" }
            Parameter { name: "pathToMedias"; type: "QStringList" }
        }
        Method {
            name: "uploadReply"
            type: "bool"
            Parameter { name: "message"; type: "string" }
        }
    }
    Component {
        name: "TwitterUserInterface"
        prototype: "IdentifiableContentItemInterface"
        exports: ["org.nemomobile.social/TwitterUser 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "contributorsEnabled"; type: "bool"; isReadonly: true }
        Property { name: "createdAt"; type: "string"; isReadonly: true }
        Property { name: "defaultProfile"; type: "bool"; isReadonly: true }
        Property { name: "defaultProfileImage"; type: "bool"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "favouritesCount"; type: "int"; isReadonly: true }
        Property { name: "followRequestSent"; type: "bool"; isReadonly: true }
        Property { name: "followersCount"; type: "int"; isReadonly: true }
        Property { name: "friendsCount"; type: "int"; isReadonly: true }
        Property { name: "geoEnabled"; type: "bool"; isReadonly: true }
        Property { name: "isTranslator"; type: "bool"; isReadonly: true }
        Property { name: "lang"; type: "string"; isReadonly: true }
        Property { name: "listedCount"; type: "int"; isReadonly: true }
        Property { name: "location"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "profileBackgroundColor"; type: "QColor"; isReadonly: true }
        Property { name: "profileBackgroundImageUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "profileBackgroundImageUrlHttps"; type: "QUrl"; isReadonly: true }
        Property { name: "profileBackgroundTile"; type: "bool"; isReadonly: true }
        Property { name: "profileBannerUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "profileImageUrl"; type: "QUrl"; isReadonly: true }
        Property { name: "profileImageUrlHttps"; type: "QUrl"; isReadonly: true }
        Property { name: "profileLinkColor"; type: "QColor"; isReadonly: true }
        Property { name: "profileSidebarBorderColor"; type: "QColor"; isReadonly: true }
        Property { name: "profileSidebarFillColor"; type: "QColor"; isReadonly: true }
        Property { name: "profileTextColor"; type: "QColor"; isReadonly: true }
        Property { name: "profileUseBackgroundImage"; type: "bool"; isReadonly: true }
        Property { name: "isProtected"; type: "bool"; isReadonly: true }
        Property { name: "screenName"; type: "string"; isReadonly: true }
        Property { name: "showAllInlineMedia"; type: "bool"; isReadonly: true }
        Property { name: "statusesCount"; type: "int"; isReadonly: true }
        Property { name: "timeZone"; type: "string"; isReadonly: true }
        Property { name: "url"; type: "QUrl"; isReadonly: true }
        Property { name: "utcOffset"; type: "int"; isReadonly: true }
        Property { name: "verified"; type: "bool"; isReadonly: true }
        Property { name: "withheldInCountries"; type: "string"; isReadonly: true }
        Property { name: "withheldScope"; type: "string"; isReadonly: true }
        Method { name: "remove"; type: "bool" }
        Method {
            name: "reload"
            type: "bool"
            Parameter { name: "whichFields"; type: "QStringList" }
        }
        Method { name: "reload"; type: "bool" }
        Method {
            name: "uploadTweet"
            type: "bool"
            Parameter { name: "message"; type: "string" }
            Parameter { name: "pathToMedias"; type: "QStringList" }
        }
        Method {
            name: "uploadTweet"
            type: "bool"
            Parameter { name: "message"; type: "string" }
        }
    }
}
