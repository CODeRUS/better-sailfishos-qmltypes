import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies /home/nemo/qmlexport/empty.json org.nemomobile.systemsettings 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "AboutSettings"
        prototype: "QObject"
        exports: ["org.nemomobile.systemsettings/AboutSettings 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "wlanMacAddress"; type: "string"; isReadonly: true }
        Property { name: "imei"; type: "string"; isReadonly: true }
        Property { name: "serial"; type: "string"; isReadonly: true }
        Property { name: "localizedOperatingSystemName"; type: "string"; isReadonly: true }
        Property { name: "baseOperatingSystemName"; type: "string"; isReadonly: true }
        Property { name: "operatingSystemName"; type: "string"; isReadonly: true }
        Property { name: "localizedSoftwareVersion"; type: "string"; isReadonly: true }
        Property { name: "softwareVersion"; type: "string"; isReadonly: true }
        Property { name: "softwareVersionId"; type: "string"; isReadonly: true }
        Property { name: "adaptationVersion"; type: "string"; isReadonly: true }
        Property { name: "vendorName"; type: "string"; isReadonly: true }
        Property { name: "vendorVersion"; type: "string"; isReadonly: true }
        Signal { name: "storageChanged" }
        Method { name: "totalDiskSpace"; type: "qlonglong" }
        Method { name: "availableDiskSpace"; type: "qlonglong" }
        Method { name: "diskUsageModel"; type: "QVariant" }
        Method { name: "refreshStorageModels" }
    }
    Component {
        name: "AlarmToneModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.systemsettings/AlarmToneModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "selectedFileChanged" }
        Signal { name: "currentIndexChanged" }
        Method {
            name: "get"
            type: "QJSValue"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "BatteryStatus"
        prototype: "QObject"
        exports: ["org.nemomobile.systemsettings/BatteryStatus 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ChargerStatus"
            values: {
                "ChargerStatusUnknown": -1,
                "Disconnected": 0,
                "Connected": 1
            }
        }
        Enum {
            name: "Status"
            values: {
                "BatteryStatusUnknown": -1,
                "Full": 0,
                "Normal": 1,
                "Low": 2,
                "Empty": 3
            }
        }
        Property { name: "chargerStatus"; type: "ChargerStatus"; isReadonly: true }
        Property { name: "chargePercentage"; type: "int"; isReadonly: true }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Signal {
            name: "chargerStatusChanged"
            Parameter { name: "status"; type: "ChargerStatus" }
        }
        Signal {
            name: "chargePercentageChanged"
            Parameter { name: "percentage"; type: "int" }
        }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "Status" }
        }
    }
    Component {
        name: "CertificateModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.systemsettings/CertificateModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "BundleType"
            values: {
                "NoBundle": 0,
                "TLSBundle": 1,
                "EmailBundle": 2,
                "ObjectSigningBundle": 3,
                "UserSpecifiedBundle": 4
            }
        }
        Property { name: "bundleType"; type: "BundleType" }
        Property { name: "bundlePath"; type: "string" }
    }
    Component {
        name: "DateTimeSettings"
        prototype: "QObject"
        exports: ["org.nemomobile.systemsettings/DateTimeSettings 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "HourMode"
            values: {
                "TwentyFourHours": 0,
                "TwelveHours": 1
            }
        }
        Property { name: "ready"; type: "bool"; isReadonly: true }
        Property { name: "automaticTimeUpdate"; type: "bool" }
        Property { name: "automaticTimezoneUpdate"; type: "bool" }
        Property { name: "timezone"; type: "string" }
        Signal { name: "timeChanged" }
        Method {
            name: "setTime"
            Parameter { name: "hour"; type: "int" }
            Parameter { name: "minute"; type: "int" }
        }
        Method {
            name: "setDate"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "setHourMode"
            Parameter { name: "mode"; type: "HourMode" }
        }
    }
    Component {
        name: "DeveloperModeSettings"
        prototype: "QObject"
        exports: ["org.nemomobile.systemsettings/DeveloperModeSettings 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Idle": 0,
                "Preparing": 1,
                "DownloadingPackages": 2,
                "InstallingPackages": 3,
                "RemovingPackages": 4
            }
        }
        Property { name: "wlanIpAddress"; type: "string"; isReadonly: true }
        Property { name: "usbIpAddress"; type: "string"; isReadonly: true }
        Property { name: "username"; type: "string"; isReadonly: true }
        Property { name: "developerModeEnabled"; type: "bool"; isReadonly: true }
        Property { name: "workStatus"; type: "DeveloperModeSettings::Status"; isReadonly: true }
        Property { name: "workProgress"; type: "int"; isReadonly: true }
        Property { name: "repositoryAccessRequired"; type: "bool"; isReadonly: true }
        Method {
            name: "setDeveloperMode"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setUsbIpAddress"
            Parameter { name: "usbIpAddress"; type: "string" }
        }
        Method { name: "refresh" }
    }
    Component {
        name: "DeviceInfo"
        prototype: "QObject"
        exports: ["org.nemomobile.systemsettings/DeviceInfo 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Feature"
            values: {
                "FeatureInvalid": 0,
                "FeatureMicrophone1": 1,
                "FeatureMicrophone2": 2,
                "FeatureBackCamera": 3,
                "FeatureBackCameraFlashlight": 4,
                "FeatureDisplayBacklight": 5,
                "FeatureBattery": 6,
                "FeatureBluetooth": 7,
                "FeatureCellularData": 8,
                "FeatureCellularVoice": 9,
                "FeatureCompassSensor": 10,
                "FeatureFMRadioReceiver": 11,
                "FeatureFrontCamera": 12,
                "FeatureFrontCameraFlashlight": 13,
                "FeatureGPS": 14,
                "FeatureCellInfo": 15,
                "FeatureAccelerationSensor": 16,
                "FeatureGyroSensor": 17,
                "FeatureCoverSensor": 18,
                "FeatureFingerprintSensor": 19,
                "FeatureHeadset": 20,
                "FeatureHardwareKeys": 21,
                "FeatureDisplay": 22,
                "FeatureNotificationLED": 23,
                "FeatureButtonBacklight": 24,
                "FeatureLightSensor": 25,
                "FeatureLoudspeaker": 26,
                "FeatureTheOtherHalf": 27,
                "FeatureProximitySensor": 28,
                "FeatureAudioPlayback": 29,
                "FeatureMemoryCardSlot": 30,
                "FeatureSIMCardSlot": 31,
                "FeatureStereoLoudspeaker": 32,
                "FeatureTouchScreen": 33,
                "FeatureTouchScreenSelfTest": 34,
                "FeatureUSBCharging": 35,
                "FeatureUSBOTG": 36,
                "FeatureVibrator": 37,
                "FeatureWLAN": 38,
                "FeatureNFC": 39,
                "FeatureVideoPlayback": 40,
                "FeatureSuspend": 41,
                "FeatureReboot": 42
            }
        }
        Property { name: "model"; type: "string"; isReadonly: true }
        Property { name: "baseModel"; type: "string"; isReadonly: true }
        Property { name: "designation"; type: "string"; isReadonly: true }
        Property { name: "manufacturer"; type: "string"; isReadonly: true }
        Property { name: "prettyName"; type: "string"; isReadonly: true }
        Method {
            name: "hasFeature"
            type: "bool"
            Parameter { name: "feature"; type: "DeviceInfo::Feature" }
        }
        Method {
            name: "hasHardwareKey"
            type: "bool"
            Parameter { name: "key"; type: "Qt::Key" }
        }
    }
    Component {
        name: "DiskUsage"
        prototype: "QObject"
        exports: ["org.nemomobile.systemsettings/DiskUsage 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "working"; type: "bool"; isReadonly: true }
        Property { name: "result"; type: "QVariantMap"; isReadonly: true }
        Signal {
            name: "submit"
            Parameter { name: "paths"; type: "QStringList" }
            Parameter { name: "callback"; type: "QJSValue"; isPointer: true }
        }
        Method {
            name: "calculate"
            Parameter { name: "paths"; type: "QStringList" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
    }
    Component {
        name: "DisplaySettings"
        prototype: "QObject"
        exports: ["org.nemomobile.systemsettings/DisplaySettings 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DoubleTapMode"
            values: {
                "DoubleTapWakeupNever": 0,
                "DoubleTapWakeupAlways": 1,
                "DoubleTapWakeupNoProximity": 2
            }
        }
        Enum {
            name: "InhibitMode"
            values: {
                "InhibitInvalid": -1,
                "InhibitOff": 0,
                "InhibitStayOnWithCharger": 1,
                "InhibitStayDimWithCharger": 2,
                "InhibitStayOn": 3,
                "InhibitStayDim": 4
            }
        }
        Property { name: "brightness"; type: "int" }
        Property { name: "maximumBrightness"; type: "int"; isReadonly: true }
        Property { name: "dimTimeout"; type: "int" }
        Property { name: "blankTimeout"; type: "int" }
        Property { name: "inhibitMode"; type: "InhibitMode" }
        Property { name: "adaptiveDimmingEnabled"; type: "bool" }
        Property { name: "lowPowerModeEnabled"; type: "bool" }
        Property { name: "ambientLightSensorEnabled"; type: "bool" }
        Property { name: "autoBrightnessEnabled"; type: "bool" }
        Property { name: "doubleTapMode"; type: "int" }
        Property { name: "orientationLock"; type: "QVariant" }
        Property { name: "lidSensorEnabled"; type: "bool" }
        Property { name: "lidSensorFilteringEnabled"; type: "bool" }
        Property { name: "flipoverGestureEnabled"; type: "bool" }
        Property { name: "powerSaveModeForced"; type: "bool" }
        Property { name: "powerSaveModeEnabled"; type: "bool" }
        Property { name: "powerSaveModeThreshold"; type: "int" }
        Property { name: "populated"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "LanguageModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.systemsettings/LanguageModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "LocaleUpdateMode"
            values: {
                "UpdateAndReboot": 0,
                "UpdateWithoutReboot": 1
            }
        }
        Property { name: "currentIndex"; type: "int"; isReadonly: true }
        Method {
            name: "languageName"
            type: "string"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "locale"
            type: "string"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setSystemLocale"
            Parameter { name: "localeCode"; type: "string" }
            Parameter { name: "updateMode"; type: "LocaleUpdateMode" }
        }
    }
    Component {
        name: "LocationSettings"
        prototype: "QObject"
        exports: ["org.nemomobile.systemsettings/LocationSettings 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "OnlineAGpsState"
            values: {
                "OnlineAGpsAgreementNotAccepted": 0,
                "OnlineAGpsDisabled": 1,
                "OnlineAGpsEnabled": 2
            }
        }
        Enum {
            name: "LocationMode"
            values: {
                "HighAccuracyMode": 0,
                "BatterySavingMode": 1,
                "DeviceOnlyMode": 2,
                "CustomMode": 3
            }
        }
        Enum {
            name: "DataSources"
            values: {
                "NoDataSources": 0,
                "OnlineDataSources": 1,
                "DeviceSensorsData": 32,
                "BluetoothData": 1024,
                "WlanData": 32768,
                "CellTowerData": 1048576,
                "GpsData": 33554432,
                "GlonassData": 67108864,
                "BeidouData": 134217728,
                "GalileoData": 268435456,
                "QzssData": 536870912,
                "SbasData": 1073741824,
                "LastDataSource": -2147483648
            }
        }
        Property { name: "locationEnabled"; type: "bool" }
        Property { name: "locationMode"; type: "LocationMode" }
        Property { name: "pendingAgreements"; type: "QStringList"; isReadonly: true }
        Property { name: "allowedDataSources"; type: "DataSources" }
        Property { name: "gpsAvailable"; type: "bool"; isReadonly: true }
        Property { name: "gpsEnabled"; type: "bool" }
        Property { name: "gpsFlightMode"; type: "bool" }
        Property { name: "locationProviders"; type: "QStringList"; isReadonly: true }
        Property { name: "hereAvailable"; type: "bool"; isReadonly: true }
        Property { name: "hereState"; type: "OnlineAGpsState" }
        Property { name: "mlsAvailable"; type: "bool"; isReadonly: true }
        Property { name: "mlsEnabled"; type: "bool" }
        Property { name: "mlsOnlineState"; type: "OnlineAGpsState" }
        Property { name: "yandexAvailable"; type: "bool"; isReadonly: true }
        Property { name: "yandexOnlineState"; type: "OnlineAGpsState" }
    }
    Component {
        name: "NfcSettings"
        prototype: "QObject"
        exports: ["org.nemomobile.systemsettings/NfcSettings 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property { name: "enabled"; type: "bool" }
    }
    Component {
        name: "PartitionModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.systemsettings/PartitionModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Unmounted": 0,
                "Mounting": 1,
                "Mounted": 2,
                "Unmounting": 3,
                "Formatting": 4,
                "Formatted": 5,
                "Unlocking": 6,
                "Unlocked": 7,
                "Locking": 8,
                "Locked": 9
            }
        }
        Enum {
            name: "StorageType"
            values: {
                "Invalid": 0,
                "System": 1,
                "User": 2,
                "Mass": 4,
                "External": 8,
                "ExcludeParents": 4096,
                "Internal": 7,
                "Any": 15
            }
        }
        Enum {
            name: "StorageTypes"
            values: {
                "Invalid": 0,
                "System": 1,
                "User": 2,
                "Mass": 4,
                "External": 8,
                "ExcludeParents": 4096,
                "Internal": 7,
                "Any": 15
            }
        }
        Enum {
            name: "ConnectionBus"
            values: {
                "SDIO": 0,
                "USB": 1,
                "IEEE1394": 2,
                "UnknownBus": 3
            }
        }
        Enum {
            name: "Error"
            values: {
                "ErrorFailed": 0,
                "ErrorCancelled": 1,
                "ErrorAlreadyCancelled": 2,
                "ErrorNotAuthorized": 3,
                "ErrorNotAuthorizedCanObtain": 4,
                "ErrorNotAuthorizedDismissed": 5,
                "ErrorAlreadyMounted": 6,
                "ErrorNotMounted": 7,
                "ErrorOptionNotPermitted": 8,
                "ErrorMountedByOtherUser": 9,
                "ErrorAlreadyUnmounting": 10,
                "ErrorNotSupported": 11,
                "ErrorTimedout": 12,
                "ErrorWouldWakeup": 13,
                "ErrorDeviceBusy": 14
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "storageTypes"; type: "StorageTypes" }
        Property { name: "supportedFormatTypes"; type: "QStringList"; isReadonly: true }
        Property { name: "externalStoragesPopulated"; type: "bool"; isReadonly: true }
        Signal {
            name: "errorMessage"
            Parameter { name: "objectPath"; type: "string" }
            Parameter { name: "errorName"; type: "string" }
        }
        Signal {
            name: "lockError"
            Parameter { name: "error"; type: "Error" }
        }
        Signal {
            name: "unlockError"
            Parameter { name: "error"; type: "Error" }
        }
        Signal {
            name: "mountError"
            Parameter { name: "error"; type: "Error" }
        }
        Signal {
            name: "unmountError"
            Parameter { name: "error"; type: "Error" }
        }
        Signal {
            name: "formatError"
            Parameter { name: "error"; type: "Error" }
        }
        Method { name: "refresh" }
        Method {
            name: "refresh"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "lock"
            Parameter { name: "devicePath"; type: "string" }
        }
        Method {
            name: "unlock"
            Parameter { name: "devicePath"; type: "string" }
            Parameter { name: "passphrase"; type: "string" }
        }
        Method {
            name: "mount"
            Parameter { name: "devicePath"; type: "string" }
        }
        Method {
            name: "unmount"
            Parameter { name: "devicePath"; type: "string" }
        }
        Method {
            name: "format"
            Parameter { name: "devicePath"; type: "string" }
            Parameter { name: "arguments"; type: "QVariantMap" }
        }
        Method {
            name: "objectPath"
            type: "string"
            Parameter { name: "devicePath"; type: "string" }
        }
    }
    Component {
        name: "ProfileControl"
        prototype: "QObject"
        exports: ["org.nemomobile.systemsettings/ProfileControl 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "VibraMode"
            values: {
                "VibraAlways": 0,
                "VibraSilent": 1,
                "VibraNormal": 2,
                "VibraNever": 3
            }
        }
        Property { name: "profile"; type: "string" }
        Property { name: "ringerVolume"; type: "int" }
        Property { name: "vibraMode"; type: "int" }
        Property { name: "systemSoundLevel"; type: "int" }
        Property { name: "touchscreenToneLevel"; type: "int" }
        Property { name: "touchscreenVibrationLevel"; type: "int" }
        Property { name: "ringerToneFile"; type: "string" }
        Property { name: "messageToneFile"; type: "string" }
        Property { name: "chatToneFile"; type: "string" }
        Property { name: "mailToneFile"; type: "string" }
        Property { name: "internetCallToneFile"; type: "string" }
        Property { name: "calendarToneFile"; type: "string" }
        Property { name: "clockAlarmToneFile"; type: "string" }
        Property { name: "ringerToneEnabled"; type: "bool" }
        Property { name: "messageToneEnabled"; type: "bool" }
        Property { name: "chatToneEnabled"; type: "bool" }
        Property { name: "mailToneEnabled"; type: "bool" }
        Property { name: "internetCallToneEnabled"; type: "bool" }
        Property { name: "calendarToneEnabled"; type: "bool" }
        Property { name: "clockAlarmToneEnabled"; type: "bool" }
        Signal {
            name: "profileChanged"
            Parameter { name: "profile"; type: "string" }
        }
        Signal { name: "messageToneVolumeChanged" }
    }
    Component {
        name: "QUsbMode"
        prototype: "QObject"
        Property { name: "USB_CONNECTED"; type: "string"; isReadonly: true }
        Property { name: "DATA_IN_USE"; type: "string"; isReadonly: true }
        Property { name: "USB_DISCONNECTED"; type: "string"; isReadonly: true }
        Property { name: "USB_CONNECTED_DIALOG_SHOW"; type: "string"; isReadonly: true }
        Property { name: "USB_PRE_UNMOUNT"; type: "string"; isReadonly: true }
        Property { name: "RE_MOUNT_FAILED"; type: "string"; isReadonly: true }
        Property { name: "MODE_SETTING_FAILED"; type: "string"; isReadonly: true }
        Property { name: "CHARGER_CONNECTED"; type: "string"; isReadonly: true }
        Property { name: "CHARGER_DISCONNECTED"; type: "string"; isReadonly: true }
        Property { name: "MODE_UNDEFINED"; type: "string"; isReadonly: true }
        Property { name: "MODE_ASK"; type: "string"; isReadonly: true }
        Property { name: "MODE_MASS_STORAGE"; type: "string"; isReadonly: true }
        Property { name: "MODE_DEVELOPER"; type: "string"; isReadonly: true }
        Property { name: "MODE_MTP"; type: "string"; isReadonly: true }
        Property { name: "MODE_HOST"; type: "string"; isReadonly: true }
        Property { name: "MODE_CONNECTION_SHARING"; type: "string"; isReadonly: true }
        Property { name: "MODE_DIAG"; type: "string"; isReadonly: true }
        Property { name: "MODE_ADB"; type: "string"; isReadonly: true }
        Property { name: "MODE_PC_SUITE"; type: "string"; isReadonly: true }
        Property { name: "MODE_CHARGING"; type: "string"; isReadonly: true }
        Property { name: "MODE_CHARGER"; type: "string"; isReadonly: true }
        Property { name: "MODE_CHARGING_FALLBACK"; type: "string"; isReadonly: true }
        Property { name: "MODE_BUSY"; type: "string"; isReadonly: true }
        Method {
            name: "isEvent"
            type: "bool"
            Parameter { name: "modeName"; type: "string" }
        }
        Method {
            name: "isState"
            type: "bool"
            Parameter { name: "modeName"; type: "string" }
        }
        Method {
            name: "isWaitingState"
            type: "bool"
            Parameter { name: "modeName"; type: "string" }
        }
        Method {
            name: "isFinalState"
            type: "bool"
            Parameter { name: "modeName"; type: "string" }
        }
        Method {
            name: "isConnected"
            type: "bool"
            Parameter { name: "modeName"; type: "string" }
        }
        Method {
            name: "isDisconnected"
            type: "bool"
            Parameter { name: "modeName"; type: "string" }
        }
    }
    Component {
        name: "QUsbModed"
        prototype: "QUsbMode"
        exports: ["org.nemomobile.systemsettings/USBSettings 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property { name: "supportedModes"; type: "QStringList"; isReadonly: true }
        Property { name: "availableModes"; type: "QStringList"; isReadonly: true }
        Property { name: "hiddenModes"; type: "QStringList"; isReadonly: true }
        Property { name: "currentMode"; type: "string" }
        Property { name: "targetMode"; type: "string"; isReadonly: true }
        Property { name: "configMode"; type: "string" }
        Signal {
            name: "eventReceived"
            Parameter { name: "event"; type: "string" }
        }
        Signal {
            name: "usbStateError"
            Parameter { name: "error"; type: "string" }
        }
        Signal {
            name: "hideModeFailed"
            Parameter { name: "mode"; type: "string" }
        }
        Signal {
            name: "unhideModeFailed"
            Parameter { name: "mode"; type: "string" }
        }
        Method {
            name: "hideMode"
            type: "bool"
            Parameter { name: "mode"; type: "string" }
        }
        Method {
            name: "unhideMode"
            type: "bool"
            Parameter { name: "mode"; type: "string" }
        }
    }
    Component {
        name: "SettingsVpnModel"
        prototype: "VpnModel"
        exports: ["org.nemomobile.systemsettings/SettingsVpnModel 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "bestState"; type: "VpnConnection::ConnectionState"; isReadonly: true }
        Property { name: "autoConnect"; type: "bool"; isReadonly: true }
        Property { name: "orderByConnected"; type: "bool" }
        Signal {
            name: "connectionStateChanged"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "state"; type: "VpnConnection::ConnectionState" }
        }
        Method {
            name: "isDefaultDomain"
            type: "bool"
            Parameter { name: "domain"; type: "string" }
        }
        Method {
            name: "createConnection"
            Parameter { name: "properties"; type: "QVariantMap" }
        }
        Method {
            name: "modifyConnection"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "properties"; type: "QVariantMap" }
        }
        Method {
            name: "deleteConnection"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "activateConnection"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "deactivateConnection"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "connectionCredentials"
            type: "QVariantMap"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "setConnectionCredentials"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "credentials"; type: "QVariantMap" }
        }
        Method {
            name: "connectionCredentialsEnabled"
            type: "bool"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "disableConnectionCredentials"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "connectionSettings"
            type: "QVariantMap"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "processProvisioningFile"
            type: "QVariantMap"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "type"; type: "string" }
        }
        Method {
            name: "get"
            type: "VpnConnection*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "VpnModel"
        prototype: "QAbstractListModel"
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "vpnManager"; type: "VpnManager"; isReadonly: true; isPointer: true }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Signal {
            name: "connectedChanged"
            Parameter { name: "connected"; type: "bool" }
        }
        Method {
            name: "connectionSettings"
            type: "QVariantMap"
            Parameter { name: "path"; type: "string" }
        }
    }
}
