import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies /home/nemo/qmlexport/empty.json org.nemomobile.accounts 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "AccountInterface"
        prototype: "QObject"
        exports: ["org.nemomobile.accounts/Account 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Initialized": 0,
                "Initializing": 1,
                "Synced": 2,
                "SyncInProgress": 3,
                "Modified": 4,
                "Error": 5,
                "Invalid": 6
            }
        }
        Enum {
            name: "ErrorType"
            values: {
                "NoError": 0,
                "UnknownError": 1,
                "DatabaseError": 2,
                "DeletedError": 3,
                "DatabaseLockedError": 4,
                "AccountNotFoundError": 5,
                "ConflictingProviderError": 6,
                "InitializationFailedError": 7
            }
        }
        Property { name: "enabled"; type: "bool" }
        Property { name: "identifier"; type: "int" }
        Property { name: "identityIdentifiers"; type: "QVariantMap"; isReadonly: true }
        Property { name: "providerName"; type: "string" }
        Property { name: "displayName"; type: "string" }
        Property { name: "supportedServiceNames"; type: "QStringList"; isReadonly: true }
        Property { name: "enabledServiceNames"; type: "QStringList"; isReadonly: true }
        Property { name: "configurationValues"; type: "QVariantMap" }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "error"; type: "ErrorType"; isReadonly: true }
        Property { name: "errorMessage"; type: "string"; isReadonly: true }
        Method { name: "sync" }
        Method { name: "remove" }
        Method {
            name: "setConfigurationValue"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "setConfigurationValue"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "removeConfigurationValue"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "removeConfigurationValue"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "serviceConfigurationValues"
            type: "QVariantMap"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "setConfigurationValues"
            Parameter { name: "values"; type: "QVariantMap" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "encodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
            Parameter { name: "scheme"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "encodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
            Parameter { name: "scheme"; type: "string" }
        }
        Method {
            name: "encodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "decodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
            Parameter { name: "scheme"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "decodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
            Parameter { name: "scheme"; type: "string" }
        }
        Method {
            name: "decodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "supportsServiceType"
            type: "bool"
            Parameter { name: "serviceType"; type: "string" }
        }
        Method {
            name: "enableWithService"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "disableWithService"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "identityIdentifier"
            type: "int"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method { name: "identityIdentifier"; type: "int" }
        Method {
            name: "setIdentityIdentifier"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "setIdentityIdentifier"
            Parameter { name: "id"; type: "int" }
        }
    }
    Component {
        name: "AccountManagerInterface"
        prototype: "QObject"
        exports: ["org.nemomobile.accounts/AccountManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "timeout"; type: "int" }
        Property { name: "serviceTypeFilter"; type: "string" }
        Property { name: "serviceTypeNames"; type: "QStringList"; isReadonly: true }
        Property { name: "providerNames"; type: "QStringList"; isReadonly: true }
        Property { name: "serviceNames"; type: "QStringList"; isReadonly: true }
        Property { name: "accountIdentifiers"; type: "QStringList"; isReadonly: true }
        Method {
            name: "createAccount"
            type: "AccountInterface*"
            Parameter { name: "providerName"; type: "string" }
        }
        Method {
            name: "removeAccount"
            Parameter { name: "account"; type: "AccountInterface"; isPointer: true }
        }
        Method {
            name: "serviceType"
            type: "ServiceTypeInterface*"
            Parameter { name: "serviceTypeName"; type: "string" }
        }
        Method {
            name: "service"
            type: "ServiceInterface*"
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "provider"
            type: "ProviderInterface*"
            Parameter { name: "providerName"; type: "string" }
        }
        Method {
            name: "account"
            type: "AccountInterface*"
            Parameter { name: "accountIdentifier"; type: "string" }
        }
        Method {
            name: "account"
            type: "AccountInterface*"
            Parameter { name: "accountIdentifier"; type: "int" }
        }
        Method {
            name: "serviceAccount"
            type: "ServiceAccountInterface*"
            Parameter { name: "accountIdentifier"; type: "string" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "serviceAccount"
            type: "ServiceAccountInterface*"
            Parameter { name: "accountIdentifier"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "serviceAccountFromProvider"
            type: "ServiceAccountInterface*"
            Parameter { name: "providerName"; type: "string" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "serviceAccountFromProvider"
            type: "ServiceAccountInterface*"
            Parameter { name: "providerName"; type: "string" }
        }
    }
    Component {
        name: "AccountModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.accounts/AccountModel 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "serviceAccount"
            type: "ServiceAccountInterface*"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "serviceAccount"
            type: "ServiceAccountInterface*"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "serviceName"; type: "string" }
        }
        Method {
            name: "provider"
            type: "ProviderInterface*"
            Parameter { name: "providerName"; type: "string" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "provider"
            type: "ProviderInterface*"
            Parameter { name: "providerName"; type: "string" }
        }
        Method {
            name: "provider"
            type: "ProviderInterface*"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "provider"
            type: "ProviderInterface*"
            Parameter { name: "accountId"; type: "int" }
        }
    }
    Component {
        name: "AccountProviderModel"
        prototype: "QAbstractTableModel"
        exports: ["org.nemomobile.accounts/AccountProviderModel 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "provider"
            type: "ProviderInterface*"
            Parameter { name: "providerName"; type: "string" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "provider"
            type: "ProviderInterface*"
            Parameter { name: "providerName"; type: "string" }
        }
    }
    Component {
        name: "AuthDataInterface"
        prototype: "QObject"
        exports: ["org.nemomobile.accounts/AuthData 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "identityIdentifier"; type: "int"; isReadonly: true }
        Property { name: "method"; type: "string"; isReadonly: true }
        Property { name: "mechanism"; type: "string"; isReadonly: true }
        Property { name: "parameters"; type: "QVariantMap"; isReadonly: true }
    }
    Component {
        name: "ProviderInterface"
        prototype: "QObject"
        exports: ["org.nemomobile.accounts/Provider 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "iconName"; type: "string"; isReadonly: true }
        Property { name: "serviceNames"; type: "QStringList"; isReadonly: true }
    }
    Component { name: "QAbstractTableModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "ServiceAccountInterface"
        prototype: "QObject"
        exports: ["org.nemomobile.accounts/ServiceAccount 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "enabled"; type: "bool"; isReadonly: true }
        Property { name: "identifier"; type: "int"; isReadonly: true }
        Property { name: "authData"; type: "AuthDataInterface"; isReadonly: true; isPointer: true }
        Property { name: "service"; type: "ServiceInterface"; isReadonly: true; isPointer: true }
        Property { name: "provider"; type: "ProviderInterface"; isReadonly: true; isPointer: true }
        Property { name: "configurationValues"; type: "QVariantMap"; isReadonly: true }
        Method {
            name: "setConfigurationValue"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "removeConfigurationValue"
            Parameter { name: "key"; type: "string" }
        }
        Method { name: "unrelatedValues"; type: "QVariantMap" }
        Method {
            name: "encodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
            Parameter { name: "scheme"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "encodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
            Parameter { name: "scheme"; type: "string" }
        }
        Method {
            name: "encodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "decodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
            Parameter { name: "scheme"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "decodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
            Parameter { name: "scheme"; type: "string" }
        }
        Method {
            name: "decodeConfigurationValue"
            type: "string"
            Parameter { name: "value"; type: "string" }
        }
    }
    Component {
        name: "ServiceAccountModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.accounts/ServiceAccountModel 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "provider"
            type: "ProviderInterface*"
            Parameter { name: "providerName"; type: "string" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "provider"
            type: "ProviderInterface*"
            Parameter { name: "providerName"; type: "string" }
        }
        Method {
            name: "provider"
            type: "ProviderInterface*"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "parent"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "provider"
            type: "ProviderInterface*"
            Parameter { name: "accountId"; type: "int" }
        }
    }
    Component {
        name: "ServiceInterface"
        prototype: "QObject"
        exports: ["org.nemomobile.accounts/Service 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "serviceType"; type: "string"; isReadonly: true }
        Property { name: "providerName"; type: "string"; isReadonly: true }
        Property { name: "iconName"; type: "string"; isReadonly: true }
        Property { name: "tags"; type: "QStringList"; isReadonly: true }
    }
}
