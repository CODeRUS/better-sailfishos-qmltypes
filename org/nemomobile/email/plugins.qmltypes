import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies /home/nemo/qmlexport/empty.json org.nemomobile.email 0.1'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "AttachmentListModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.email/AttachmentListModel 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AttachmentType"
            values: {
                "Email": 0,
                "Other": 1
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "messageId"; type: "int" }
        Method {
            name: "displayName"
            type: "string"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "isDownloaded"
            type: "bool"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "mimeType"
            type: "string"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "title"
            type: "string"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "type"
            type: "AttachmentType"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "url"
            type: "string"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "location"
            type: "string"
            Parameter { name: "idx"; type: "int" }
        }
    }
    Component {
        name: "EmailAccount"
        prototype: "QObject"
        exports: ["org.nemomobile.email/EmailAccount 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Error"
            values: {
                "ConnectionError": 0,
                "DiskFull": 1,
                "ExternalComunicationError": 2,
                "InvalidAccount": 3,
                "InvalidConfiguration": 4,
                "InternalError": 5,
                "LoginFailed": 6,
                "Timeout": 7,
                "UntrustedCertificates": 8
            }
        }
        Enum {
            name: "ServerType"
            values: {
                "IncomingServer": 0,
                "OutgoingServer": 1
            }
        }
        Property { name: "accountId"; type: "int" }
        Property { name: "description"; type: "string" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "name"; type: "string" }
        Property { name: "address"; type: "string" }
        Property { name: "username"; type: "string"; isReadonly: true }
        Property { name: "server"; type: "string"; isReadonly: true }
        Property { name: "password"; type: "string" }
        Property { name: "recvType"; type: "string" }
        Property { name: "recvServer"; type: "string" }
        Property { name: "recvPort"; type: "string" }
        Property { name: "recvSecurity"; type: "string" }
        Property { name: "recvUsername"; type: "string" }
        Property { name: "recvPassword"; type: "string" }
        Property { name: "pushCapable"; type: "bool"; isReadonly: true }
        Property { name: "sendServer"; type: "string" }
        Property { name: "sendPort"; type: "string" }
        Property { name: "sendAuth"; type: "string" }
        Property { name: "sendSecurity"; type: "string" }
        Property { name: "sendUsername"; type: "string" }
        Property { name: "sendPassword"; type: "string" }
        Property { name: "errorMessage"; type: "string"; isReadonly: true }
        Property { name: "errorCode"; type: "int"; isReadonly: true }
        Signal { name: "settingsRetrieved" }
        Signal { name: "settingsRetrievalFailed" }
        Signal { name: "testSucceeded" }
        Signal { name: "testSkipped" }
        Signal {
            name: "testFailed"
            Parameter { name: "serverType"; type: "ServerType" }
            Parameter { name: "error"; type: "Error" }
        }
        Method { name: "save"; type: "bool" }
        Method { name: "remove"; type: "bool" }
        Method {
            name: "test"
            Parameter { name: "timeout"; type: "int" }
        }
        Method { name: "test" }
        Method { name: "cancelTest" }
        Method {
            name: "retrieveSettings"
            Parameter { name: "emailAdress"; type: "string" }
        }
        Method { name: "clear" }
    }
    Component {
        name: "EmailAccountListModel"
        prototype: "QMailAccountListModel"
        exports: ["org.nemomobile.email/EmailAccountListModel 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "numberOfAccounts"; type: "int"; isReadonly: true }
        Property { name: "numberOfTransmitAccounts"; type: "int"; isReadonly: true }
        Property { name: "lastUpdateTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "onlyTransmitAccounts"; type: "bool" }
        Property { name: "persistentConnectionActive"; type: "bool"; isReadonly: true }
        Signal { name: "accountsAdded" }
        Signal { name: "accountsRemoved" }
        Signal { name: "accountsUpdated" }
        Signal { name: "modelReset" }
        Method {
            name: "accountId"
            type: "int"
            Parameter { name: "idx"; type: "int" }
        }
        Method { name: "allDisplayNames"; type: "QStringList" }
        Method { name: "allEmailAddresses"; type: "QStringList" }
        Method {
            name: "customField"
            type: "string"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "customFieldFromAccountId"
            type: "string"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "displayName"
            type: "string"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "displayNameFromAccountId"
            type: "string"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "emailAddress"
            type: "string"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "emailAddressFromAccountId"
            type: "string"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "indexFromAccountId"
            type: "int"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "standardFoldersRetrieved"
            type: "bool"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "appendSignature"
            type: "bool"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "signature"
            type: "string"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "useCryptoSignatureByDefault"
            type: "bool"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "cryptoSignatureType"
            type: "string"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "cryptoSignatureIds"
            type: "QStringList"
            Parameter { name: "accountId"; type: "int" }
        }
    }
    Component {
        name: "EmailAccountSettingsModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.email/EmailAccountSettingsModel 0.1"]
        exportMetaObjectRevisions: [0]
        Method { name: "saveChanges" }
        Method {
            name: "deleteRow"
            Parameter { name: "row"; type: "int" }
        }
        Method { name: "reload" }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "dataWrapper"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setDataWrapper"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method { name: "updateInterval"; type: "int" }
        Method {
            name: "setUpdateInterval"
            Parameter { name: "interval"; type: "int" }
        }
        Method { name: "signature"; type: "string" }
        Method {
            name: "setSignature"
            Parameter { name: "signature"; type: "string" }
        }
        Method { name: "newMailNotifications"; type: "bool" }
        Method {
            name: "setNewMailNotifications"
            Parameter { name: "val"; type: "bool" }
        }
        Method { name: "confirmDeleteMail"; type: "bool" }
        Method {
            name: "setConfirmDeleteMail"
            Parameter { name: "val"; type: "bool" }
        }
    }
    Component {
        name: "EmailAgent"
        prototype: "QObject"
        exports: ["org.nemomobile.email/EmailAgent 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AttachmentStatus"
            values: {
                "Unknown": 0,
                "Queued": 1,
                "Downloading": 2,
                "NotDownloaded": 3,
                "Downloaded": 4,
                "Failed": 5,
                "FailedToSave": 6,
                "Canceled": 7
            }
        }
        Enum {
            name: "SyncErrors"
            values: {
                "SyncFailed": 0,
                "LoginFailed": 1,
                "DiskFull": 2,
                "InvalidConfiguration": 3,
                "UntrustedCertificates": 4,
                "InternalError": 5,
                "SendFailed": 6,
                "Timeout": 7,
                "ServerError": 8,
                "NotConnected": 9
            }
        }
        Enum {
            name: "SearchStatus"
            values: {
                "SearchDone": 0,
                "SearchCanceled": 1,
                "SearchFailed": 2
            }
        }
        Enum {
            name: "CalendarInvitationResponse"
            values: {
                "InvitationResponseUnspecified": 0,
                "InvitationResponseAccept": 1,
                "InvitationResponseTentative": 2,
                "InvitationResponseDecline": 3
            }
        }
        Enum {
            name: "OnlineFolderAction"
            values: {
                "ActionOnlineCreateFolder": 0,
                "ActionOnlineDeleteFolder": 1,
                "ActionOnlineRenameFolder": 2,
                "ActionOnlineMoveFolder": 3
            }
        }
        Property { name: "synchronizing"; type: "bool"; isReadonly: true }
        Property { name: "currentSynchronizingAccountId"; type: "int"; isReadonly: true }
        Signal {
            name: "attachmentDownloadProgressChanged"
            Parameter { name: "attachmentLocation"; type: "string" }
            Parameter { name: "progress"; type: "double" }
        }
        Signal {
            name: "attachmentDownloadStatusChanged"
            Parameter { name: "attachmentLocation"; type: "string" }
            Parameter { name: "status"; type: "EmailAgent::AttachmentStatus" }
        }
        Signal {
            name: "attachmentUrlChanged"
            Parameter { name: "attachmentLocation"; type: "string" }
            Parameter { name: "url"; type: "string" }
        }
        Signal {
            name: "error"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "syncError"; type: "EmailAgent::SyncErrors" }
        }
        Signal {
            name: "folderRetrievalCompleted"
            Parameter { name: "accountId"; type: "QMailAccountId" }
        }
        Signal { name: "ipcConnectionEstablished" }
        Signal {
            name: "messagesDownloaded"
            Parameter { name: "messageIds"; type: "QMailMessageIdList" }
            Parameter { name: "success"; type: "bool" }
        }
        Signal {
            name: "messagePartDownloaded"
            Parameter { name: "messageId"; type: "QMailMessageId" }
            Parameter { name: "partLocation"; type: "string" }
            Parameter { name: "success"; type: "bool" }
        }
        Signal {
            name: "sendCompleted"
            Parameter { name: "success"; type: "bool" }
        }
        Signal {
            name: "standardFoldersCreated"
            Parameter { name: "accountId"; type: "QMailAccountId" }
        }
        Signal { name: "networkConnectionRequested" }
        Signal {
            name: "searchMessageIdsMatched"
            Parameter { name: "ids"; type: "QMailMessageIdList" }
        }
        Signal {
            name: "searchCompleted"
            Parameter { name: "search"; type: "string" }
            Parameter { name: "matchedIds"; type: "QMailMessageIdList" }
            Parameter { name: "isRemote"; type: "bool" }
            Parameter { name: "remainingMessagesOnRemote"; type: "int" }
            Parameter { name: "status"; type: "EmailAgent::SearchStatus" }
        }
        Signal {
            name: "calendarInvitationResponded"
            Parameter { name: "response"; type: "CalendarInvitationResponse" }
            Parameter { name: "success"; type: "bool" }
        }
        Signal {
            name: "onlineFolderActionCompleted"
            Parameter { name: "action"; type: "OnlineFolderAction" }
            Parameter { name: "success"; type: "bool" }
        }
        Method { name: "isOnline"; type: "bool" }
        Method {
            name: "accountsSync"
            Parameter { name: "syncOnlyInbox"; type: "bool" }
            Parameter { name: "minimum"; type: "uint" }
        }
        Method {
            name: "accountsSync"
            Parameter { name: "syncOnlyInbox"; type: "bool" }
        }
        Method { name: "accountsSync" }
        Method {
            name: "createFolder"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "mailAccountId"; type: "int" }
            Parameter { name: "parentFolderId"; type: "int" }
        }
        Method {
            name: "deleteFolder"
            Parameter { name: "folderId"; type: "int" }
        }
        Method {
            name: "deleteMessage"
            Parameter { name: "messageId"; type: "int" }
        }
        Method {
            name: "deleteMessagesFromVariantList"
            Parameter { name: "ids"; type: "QVariantList" }
        }
        Method {
            name: "expungeMessages"
            Parameter { name: "ids"; type: "QMailMessageIdList" }
        }
        Method {
            name: "downloadAttachment"
            type: "bool"
            Parameter { name: "messageId"; type: "int" }
            Parameter { name: "attachmentLocation"; type: "string" }
        }
        Method {
            name: "cancelAttachmentDownload"
            Parameter { name: "attachmentLocation"; type: "string" }
        }
        Method {
            name: "exportUpdates"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "getMoreMessages"
            Parameter { name: "folderId"; type: "int" }
            Parameter { name: "minimum"; type: "uint" }
        }
        Method {
            name: "getMoreMessages"
            Parameter { name: "folderId"; type: "int" }
        }
        Method {
            name: "signatureForAccount"
            type: "string"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "inboxFolderId"
            type: "int"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "outboxFolderId"
            type: "int"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "draftsFolderId"
            type: "int"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "sentFolderId"
            type: "int"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "trashFolderId"
            type: "int"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "junkFolderId"
            type: "int"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "isAccountValid"
            type: "bool"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "isMessageValid"
            type: "bool"
            Parameter { name: "messageId"; type: "int" }
        }
        Method {
            name: "markMessageAsRead"
            Parameter { name: "messageId"; type: "int" }
        }
        Method {
            name: "markMessageAsUnread"
            Parameter { name: "messageId"; type: "int" }
        }
        Method {
            name: "moveFolder"
            Parameter { name: "folderId"; type: "int" }
            Parameter { name: "parentFolderId"; type: "int" }
        }
        Method {
            name: "moveMessage"
            Parameter { name: "messageId"; type: "int" }
            Parameter { name: "destinationId"; type: "int" }
        }
        Method {
            name: "renameFolder"
            Parameter { name: "folderId"; type: "int" }
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "retrieveFolderList"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "folderId"; type: "int" }
            Parameter { name: "descending"; type: "bool" }
        }
        Method {
            name: "retrieveFolderList"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "folderId"; type: "int" }
        }
        Method {
            name: "retrieveFolderList"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "retrieveMessageList"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "folderId"; type: "int" }
            Parameter { name: "minimum"; type: "uint" }
        }
        Method {
            name: "retrieveMessageList"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "folderId"; type: "int" }
        }
        Method {
            name: "retrieveMessageRange"
            Parameter { name: "messageId"; type: "int" }
            Parameter { name: "minimum"; type: "uint" }
        }
        Method {
            name: "processSendingQueue"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "synchronize"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "minimum"; type: "uint" }
        }
        Method {
            name: "synchronize"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "synchronizeInbox"
            Parameter { name: "accountId"; type: "int" }
            Parameter { name: "minimum"; type: "uint" }
        }
        Method {
            name: "synchronizeInbox"
            Parameter { name: "accountId"; type: "int" }
        }
        Method {
            name: "respondToCalendarInvitation"
            Parameter { name: "messageId"; type: "int" }
            Parameter { name: "response"; type: "CalendarInvitationResponse" }
            Parameter { name: "responseSubject"; type: "string" }
        }
        Method {
            name: "accountIdForMessage"
            type: "int"
            Parameter { name: "messageId"; type: "int" }
        }
        Method {
            name: "folderIdForMessage"
            type: "int"
            Parameter { name: "messageId"; type: "int" }
        }
        Method {
            name: "accessorFromFolderId"
            type: "FolderAccessor*"
            Parameter { name: "folderId"; type: "int" }
        }
        Method {
            name: "accountWideSearchAccessor"
            type: "FolderAccessor*"
            Parameter { name: "accountId"; type: "int" }
        }
        Method { name: "combinedInboxAccessor"; type: "FolderAccessor*" }
    }
    Component {
        name: "EmailFolder"
        prototype: "QObject"
        exports: ["org.nemomobile.email/EmailFolder 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FolderType"
            values: {
                "InvalidFolder": 0,
                "NormalFolder": 1,
                "InboxFolder": 2,
                "OutboxFolder": 3,
                "SentFolder": 4,
                "DraftsFolder": 5,
                "TrashFolder": 6,
                "JunkFolder": 7
            }
        }
        Property { name: "folderAccessor"; type: "FolderAccessor"; isPointer: true }
        Property { name: "displayName"; type: "string"; isReadonly: true }
        Property { name: "folderId"; type: "int"; isReadonly: true }
        Property { name: "parentAccountId"; type: "int"; isReadonly: true }
        Property { name: "parentFolderId"; type: "int"; isReadonly: true }
        Property { name: "folderType"; type: "FolderType"; isReadonly: true }
        Property { name: "isOutgoingFolder"; type: "bool"; isReadonly: true }
        Property { name: "folderUnreadCount"; type: "int"; isReadonly: true }
    }
    Component {
        name: "EmailMessage"
        prototype: "QObject"
        exports: ["org.nemomobile.email/EmailMessage 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Priority"
            values: {
                "LowPriority": 0,
                "NormalPriority": 1,
                "HighPriority": 2
            }
        }
        Enum {
            name: "ContentType"
            values: {
                "Plain": 0,
                "HTML": 1
            }
        }
        Enum {
            name: "ResponseType"
            values: {
                "NoResponse": 0,
                "Reply": 1,
                "ReplyToAll": 2,
                "Forward": 3,
                "ForwardPart": 4,
                "Redirect": 5,
                "UnspecifiedResponse": 6
            }
        }
        Enum {
            name: "AttachedDataStatus"
            values: {
                "Unknown": 0,
                "Downloaded": 1,
                "Downloading": 2,
                "Failed": 3,
                "FailedToSave": 4,
                "Saved": 5
            }
        }
        Enum {
            name: "SignatureStatus"
            values: {
                "NoDigitalSignature": 0,
                "SignatureDownloading": 1,
                "SignatureMissing": 2,
                "SignatureChecking": 3,
                "SignedValid": 4,
                "SignedInvalid": 5,
                "SignedExpired": 6,
                "SignedMissing": 7,
                "SignedUnchecked": 8,
                "SignedFailure": 9
            }
        }
        Enum {
            name: "CryptoProtocol"
            values: {
                "UnknownProtocol": 0,
                "OpenPGP": 1,
                "SecureMIME": 2
            }
        }
        Property { name: "accountId"; type: "int"; isReadonly: true }
        Property { name: "accountAddress"; type: "string"; isReadonly: true }
        Property { name: "folderId"; type: "int"; isReadonly: true }
        Property { name: "attachments"; type: "QStringList" }
        Property { name: "bcc"; type: "QStringList" }
        Property { name: "body"; type: "string" }
        Property { name: "calendarInvitationUrl"; type: "string"; isReadonly: true }
        Property { name: "hasCalendarInvitation"; type: "bool"; isReadonly: true }
        Property { name: "calendarInvitationStatus"; type: "AttachedDataStatus"; isReadonly: true }
        Property { name: "calendarInvitationBody"; type: "string"; isReadonly: true }
        Property { name: "calendarInvitationSupportsEmailResponses"; type: "bool"; isReadonly: true }
        Property { name: "cc"; type: "QStringList" }
        Property { name: "contentType"; type: "ContentType"; isReadonly: true }
        Property { name: "autoVerifySignature"; type: "bool" }
        Property { name: "cryptoProtocol"; type: "CryptoProtocol"; isReadonly: true }
        Property { name: "signatureStatus"; type: "SignatureStatus"; isReadonly: true }
        Property { name: "date"; type: "QDateTime"; isReadonly: true }
        Property { name: "from"; type: "string" }
        Property { name: "fromAddress"; type: "string"; isReadonly: true }
        Property { name: "fromDisplayName"; type: "string"; isReadonly: true }
        Property { name: "htmlBody"; type: "string"; isReadonly: true }
        Property { name: "inReplyTo"; type: "string" }
        Property { name: "signingPlugin"; type: "string" }
        Property { name: "signingKeys"; type: "QStringList" }
        Property { name: "messageId"; type: "int" }
        Property { name: "multipleRecipients"; type: "bool"; isReadonly: true }
        Property { name: "numberOfAttachments"; type: "int"; isReadonly: true }
        Property { name: "originalMessageId"; type: "int" }
        Property { name: "preview"; type: "string"; isReadonly: true }
        Property { name: "priority"; type: "Priority" }
        Property { name: "quotedBody"; type: "string"; isReadonly: true }
        Property { name: "recipients"; type: "QStringList"; isReadonly: true }
        Property { name: "recipientsDisplayName"; type: "QStringList"; isReadonly: true }
        Property { name: "read"; type: "bool" }
        Property { name: "replyTo"; type: "string" }
        Property { name: "responseType"; type: "ResponseType" }
        Property { name: "requestReadReceipt"; type: "bool" }
        Property { name: "size"; type: "int"; isReadonly: true }
        Property { name: "subject"; type: "string" }
        Property { name: "to"; type: "QStringList" }
        Signal {
            name: "sendEnqueued"
            Parameter { name: "success"; type: "bool" }
        }
        Signal {
            name: "sendCompleted"
            Parameter { name: "success"; type: "bool" }
        }
        Signal { name: "calendarInvitationSupportsEmailResponsesChanged"; type: "bool" }
        Signal { name: "messageDownloaded" }
        Signal { name: "messageDownloadFailed" }
        Signal { name: "storedMessageChanged" }
        Signal { name: "inlinePartsDownloaded" }
        Method { name: "cancelMessageDownload" }
        Method { name: "downloadMessage" }
        Method { name: "getCalendarInvitation" }
        Method {
            name: "loadFromFile"
            Parameter { name: "path"; type: "string" }
        }
        Method { name: "send" }
        Method {
            name: "sendReadReceipt"
            type: "bool"
            Parameter { name: "subjectPrefix"; type: "string" }
            Parameter { name: "readReceiptBodyText"; type: "string" }
        }
        Method { name: "saveDraft" }
        Method { name: "verifySignature" }
        Method {
            name: "getSignatureStatusForKey"
            type: "SignatureStatus"
            Parameter { name: "keyIdentifier"; type: "string" }
        }
        Method {
            name: "cryptoProtocolForKey"
            type: "CryptoProtocol"
            Parameter { name: "pluginName"; type: "string" }
            Parameter { name: "keyIdentifier"; type: "string" }
        }
    }
    Component {
        name: "EmailMessageListModel"
        prototype: "QMailMessageListModel"
        exports: ["org.nemomobile.email/EmailMessageListModel 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Priority"
            values: {
                "LowPriority": 0,
                "NormalPriority": 1,
                "HighPriority": 2
            }
        }
        Enum {
            name: "Sort"
            values: {
                "Time": 0,
                "Sender": 1,
                "Size": 2,
                "ReadStatus": 3,
                "Priority": 4,
                "Attachments": 5,
                "Subject": 6,
                "Recipients": 7
            }
        }
        Enum {
            name: "SearchOn"
            values: {
                "LocalAndRemote": 0,
                "Local": 1,
                "Remote": 2
            }
        }
        Property { name: "folderAccessor"; type: "FolderAccessor"; isPointer: true }
        Property { name: "canFetchMore"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "selectedMessageCount"; type: "int"; isReadonly: true }
        Property { name: "limit"; type: "uint" }
        Property { name: "searchLimit"; type: "uint" }
        Property { name: "searchOn"; type: "EmailMessageListModel::SearchOn" }
        Property { name: "searchFrom"; type: "bool" }
        Property { name: "searchRecipients"; type: "bool" }
        Property { name: "searchSubject"; type: "bool" }
        Property { name: "searchBody"; type: "bool" }
        Property { name: "searchRemainingOnRemote"; type: "int"; isReadonly: true }
        Property { name: "sortBy"; type: "EmailMessageListModel::Sort" }
        Property { name: "unreadMailsSelected"; type: "bool"; isReadonly: true }
        Property { name: "currentDate"; type: "QDate" }
        Method { name: "notifyDateChanged" }
        Method {
            name: "setSearch"
            Parameter { name: "search"; type: "string" }
        }
        Method { name: "cancelSearch" }
        Method {
            name: "indexFromMessageId"
            type: "int"
            Parameter { name: "messageId"; type: "int" }
        }
        Method { name: "selectAllMessages" }
        Method { name: "deselectAllMessages" }
        Method {
            name: "selectMessage"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "deselectMessage"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "moveSelectedMessages"
            Parameter { name: "folderId"; type: "int" }
        }
        Method { name: "deleteSelectedMessages" }
        Method { name: "markAsReadSelectedMessages" }
        Method { name: "markAsUnReadSelectedMessages" }
        Method { name: "markAllMessagesAsRead" }
    }
    Component {
        name: "FolderAccessor"
        prototype: "QObject"
        exports: ["org.nemomobile.email/FolderAccessor 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "FolderListModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.email/FolderListModel 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "accountKey"; type: "int" }
        Property { name: "canCreateTopLevelFolders"; type: "bool"; isReadonly: true }
        Property { name: "supportsFolderActions"; type: "bool"; isReadonly: true }
        Signal { name: "resyncNeeded" }
        Method {
            name: "folderId"
            type: "int"
            Parameter { name: "idx"; type: "int" }
        }
        Method {
            name: "folderAccessor"
            type: "FolderAccessor*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexFromFolderId"
            type: "int"
            Parameter { name: "folderId"; type: "int" }
        }
        Method {
            name: "standardFolderIndex"
            type: "int"
            Parameter { name: "folderType"; type: "EmailFolder::FolderType" }
        }
        Method {
            name: "isFolderAncestorOf"
            type: "bool"
            Parameter { name: "folderId"; type: "int" }
            Parameter { name: "ancestorFolderId"; type: "int" }
        }
    }
    Component {
        name: "FolderListProxyModel"
        prototype: "QAbstractProxyModel"
        exports: ["org.nemomobile.email/FolderListProxyModel 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "includeRoot"; type: "bool" }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component { name: "QMailAccountListModel"; prototype: "QAbstractListModel" }
    Component { name: "QMailMessageListModel"; prototype: "QMailMessageModelBase" }
    Component {
        name: "QMailMessageModelBase"
        prototype: "QAbstractItemModel"
        Signal { name: "modelChanged" }
    }
}
