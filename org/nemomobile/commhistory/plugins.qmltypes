import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable org.nemomobile.commhistory 1.0'

Module {
    Component {
        name: "CallProxyModel"
        prototype: "QSortFilterProxyModel"
        exports: ["org.nemomobile.commhistory/CommCallModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "EventRole"
            values: {
                "EventIdRole": 1256,
                "EventTypeRole": 1257,
                "StartTimeRole": 1258,
                "EndTimeRole": 1259,
                "DirectionRole": 1260,
                "IsDraftRole": 1261,
                "IsReadRole": 1262,
                "IsMissedCallRole": 1263,
                "StatusRole": 1264,
                "BytesReceivedRole": 1265,
                "LocalUidRole": 1266,
                "RemoteUidRole": 1267,
                "ContactsRole": 1268,
                "FreeTextRole": 1269,
                "GroupIdRole": 1270,
                "MessageTokenRole": 1271,
                "LastModifiedRole": 1272,
                "EventCountRole": 1273,
                "FromVCardFileNameRole": 1274,
                "FromVCardLabelRole": 1275
            }
        }
        Enum {
            name: "EventType"
            values: {
                "UnknownType": 0,
                "IMEvent": 1,
                "SMSEvent": 2,
                "CallEvent": 3,
                "VoicemailEvent": 4,
                "StatusMessageEvent": 5,
                "MMSEvent": 6,
                "ClassZeroSMSEvent": 7
            }
        }
        Enum {
            name: "EventDirection"
            values: {
                "UnknownDirection": 0,
                "Inbound": 1,
                "Outbound": 2
            }
        }
        Enum {
            name: "EventStatus"
            values: {
                "UnknownStatus": 0,
                "SendingStatus": 1,
                "SentStatus": 2,
                "DeliveredStatus": 3,
                "FailedStatus": 4,
                "TemporarilyFailedStatus": 4,
                "PermanentlyFailedStatus": 5,
                "TemporarilyFailedOfflineStatus": 6
            }
        }
        Enum {
            name: "EventReadStatus"
            values: {
                "UnknownReadStatus": 0,
                "ReadStatusRead": 1,
                "ReadStatusDeleted": 2
            }
        }
        Enum {
            name: "GroupBy"
            values: {
                "GroupByNone": 1,
                "GroupByContact": 0,
                "GroupByContactAndType": 4
            }
        }
        Property { name: "groupBy"; type: "GroupBy" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "resolveContacts"; type: "bool" }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Property { name: "_limit"; type: "int" }
        Signal { name: "limitChanged" }
        Method {
            name: "setSortRole"
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setFilterRole"
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "deleteAt"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "markAllRead"; type: "bool" }
    }
    Component {
        name: "CommHistory::ContactGroup"
        prototype: "QObject"
        Property { name: "contactIds"; type: "QList<int>"; isReadonly: true }
        Property { name: "contactNames"; type: "QStringList"; isReadonly: true }
        Property { name: "startTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "endTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "unreadMessages"; type: "int"; isReadonly: true }
        Property { name: "lastEventId"; type: "int"; isReadonly: true }
        Property {
            name: "lastEventGroup"
            type: "CommHistory::GroupObject"
            isReadonly: true
            isPointer: true
        }
        Property { name: "lastMessageText"; type: "string"; isReadonly: true }
        Property { name: "lastVCardFileName"; type: "string"; isReadonly: true }
        Property { name: "lastVCardLabel"; type: "string"; isReadonly: true }
        Property { name: "lastEventType"; type: "int"; isReadonly: true }
        Property { name: "lastEventStatus"; type: "int"; isReadonly: true }
        Property { name: "lastEventIsDraft"; type: "bool"; isReadonly: true }
        Property { name: "lastModified"; type: "QDateTime"; isReadonly: true }
        Property { name: "groups"; type: "QList<QObject*>"; isReadonly: true }
        Signal { name: "contactsChanged" }
        Signal { name: "lastEventChanged" }
        Method {
            name: "addGroup"
            Parameter { name: "group"; type: "CommHistory::GroupObject"; isPointer: true }
        }
        Method {
            name: "removeGroup"
            type: "bool"
            Parameter { name: "group"; type: "CommHistory::GroupObject"; isPointer: true }
        }
        Method {
            name: "updateGroup"
            Parameter { name: "group"; type: "CommHistory::GroupObject"; isPointer: true }
        }
        Method { name: "markAsRead"; type: "bool" }
        Method { name: "deleteGroups"; type: "bool" }
        Method {
            name: "findGroup"
            type: "CommHistory::GroupObject*"
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUid"; type: "string" }
        }
        Method {
            name: "findGroup"
            type: "CommHistory::GroupObject*"
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUids"; type: "QStringList" }
        }
    }
    Component {
        name: "CommHistory::ContactGroupModel"
        prototype: "QAbstractTableModel"
        exports: ["org.nemomobile.commhistory/CommContactGroupModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ColumnId"
            values: {
                "ContactIds": 0,
                "ContactNames": 1,
                "EndTime": 2,
                "UnreadMessages": 3,
                "LastEventGroup": 4,
                "LastEventId": 5,
                "LastMessageText": 6,
                "LastVCardFileName": 7,
                "LastVCardLabel": 8,
                "LastEventType": 9,
                "LastEventStatus": 10,
                "LastEventIsDraft": 11,
                "LastModified": 12,
                "StartTime": 13,
                "Groups": 14,
                "NumberOfColumns": 15
            }
        }
        Property { name: "manager"; type: "QObject"; isPointer: true }
        Property { name: "contactGroups"; type: "QList<QObject*>"; isReadonly: true }
        Signal {
            name: "modelReady"
            Parameter { name: "successful"; type: "bool" }
        }
        Signal {
            name: "contactGroupCreated"
            Parameter { name: "group"; type: "CommHistory::ContactGroup"; isPointer: true }
        }
        Signal {
            name: "contactGroupChanged"
            Parameter { name: "group"; type: "CommHistory::ContactGroup"; isPointer: true }
        }
        Signal {
            name: "contactGroupRemoved"
            Parameter { name: "group"; type: "CommHistory::ContactGroup"; isPointer: true }
        }
        Method {
            name: "at"
            type: "QObject*"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component { name: "CommHistory::ConversationModel"; prototype: "CommHistory::EventModel" }
    Component {
        name: "CommHistory::DraftsModel"
        prototype: "CommHistory::EventModel"
        exports: ["org.nemomobile.commhistory/DraftsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "filterGroups"; type: "QList<int>" }
        Method { name: "getEvents"; type: "bool" }
    }
    Component {
        name: "CommHistory::EventModel"
        prototype: "QAbstractItemModel"
        exports: ["org.nemomobile.commhistory/CommEventModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "QueryMode"
            values: {
                "AsyncQuery": 0,
                "StreamedAsyncQuery": 1,
                "SyncQuery": 2
            }
        }
        Property { name: "treeMode"; type: "bool" }
        Property { name: "queryMode"; type: "QueryMode" }
        Property { name: "chunkSize"; type: "uint" }
        Property { name: "firstChunkSize"; type: "uint" }
        Property { name: "limit"; type: "int" }
        Property { name: "offset"; type: "int" }
        Property { name: "ready"; type: "bool"; isReadonly: true }
        Signal {
            name: "modelReady"
            Parameter { name: "successful"; type: "bool" }
        }
        Signal {
            name: "eventsCommitted"
            Parameter { name: "events"; type: "QList<CommHistory::Event>" }
            Parameter { name: "successful"; type: "bool" }
        }
        Method {
            name: "event"
            type: "CommHistory::Event"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "deleteEvent"
            type: "bool"
            Parameter { name: "id"; type: "int" }
        }
    }
    Component {
        name: "CommHistory::GroupManager"
        prototype: "QObject"
        Property { name: "queryMode"; type: "CommHistory::EventModel::QueryMode" }
        Property { name: "chunkSize"; type: "int" }
        Property { name: "firstChunkSize"; type: "int" }
        Property { name: "limit"; type: "int" }
        Property { name: "offset"; type: "int" }
        Property { name: "isReady"; type: "bool"; isReadonly: true }
        Signal {
            name: "modelReady"
            Parameter { name: "successful"; type: "bool" }
        }
        Signal {
            name: "groupsCommitted"
            Parameter { name: "groupIds"; type: "QList<int>" }
            Parameter { name: "successful"; type: "bool" }
        }
        Signal {
            name: "groupAdded"
            Parameter { name: "group"; type: "GroupObject"; isPointer: true }
        }
        Signal {
            name: "groupUpdated"
            Parameter { name: "group"; type: "GroupObject"; isPointer: true }
        }
        Signal {
            name: "groupDeleted"
            Parameter { name: "group"; type: "GroupObject"; isPointer: true }
        }
        Method {
            name: "group"
            type: "CommHistory::GroupObject*"
            Parameter { name: "groupId"; type: "int" }
        }
        Method {
            name: "findGroup"
            type: "CommHistory::GroupObject*"
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUid"; type: "string" }
        }
        Method {
            name: "findGroup"
            type: "CommHistory::GroupObject*"
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUids"; type: "QStringList" }
        }
    }
    Component {
        name: "CommHistory::GroupModel"
        prototype: "QAbstractTableModel"
        exports: ["org.nemomobile.commhistory/CommGroupModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ColumnId"
            values: {
                "GroupId": 0,
                "LocalUid": 1,
                "RemoteUids": 2,
                "ChatName": 3,
                "EndTime": 4,
                "UnreadMessages": 5,
                "LastEventId": 6,
                "Contacts": 7,
                "LastMessageText": 8,
                "LastVCardFileName": 9,
                "LastVCardLabel": 10,
                "LastEventType": 11,
                "LastEventStatus": 12,
                "IsPermanent": 13,
                "LastModified": 14,
                "StartTime": 15,
                "NumberOfColumns": 16
            }
        }
        Property { name: "manager"; type: "QObject"; isPointer: true }
        Signal {
            name: "modelReady"
            Parameter { name: "successful"; type: "bool" }
        }
        Signal {
            name: "groupsCommitted"
            Parameter { name: "groupIds"; type: "QList<int>" }
            Parameter { name: "successful"; type: "bool" }
        }
        Method {
            name: "at"
            type: "CommHistory::GroupObject*"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "CommHistory::GroupObject"
        prototype: "QObject"
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Property { name: "id"; type: "int"; isReadonly: true }
        Property { name: "localUid"; type: "string"; isReadonly: true }
        Property { name: "remoteUids"; type: "QStringList"; isReadonly: true }
        Property { name: "chatType"; type: "int"; isReadonly: true }
        Property { name: "chatName"; type: "string"; isReadonly: true }
        Property { name: "startTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "endTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "unreadMessages"; type: "int"; isReadonly: true }
        Property { name: "contactId"; type: "int"; isReadonly: true }
        Property { name: "contactIds"; type: "QList<int>"; isReadonly: true }
        Property { name: "contactName"; type: "string"; isReadonly: true }
        Property { name: "contactNames"; type: "QStringList"; isReadonly: true }
        Property { name: "lastEventId"; type: "int"; isReadonly: true }
        Property { name: "lastMessageText"; type: "string"; isReadonly: true }
        Property { name: "lastVCardFileName"; type: "string"; isReadonly: true }
        Property { name: "lastVCardLabel"; type: "string"; isReadonly: true }
        Property { name: "lastEventType"; type: "int"; isReadonly: true }
        Property { name: "lastEventStatus"; type: "int"; isReadonly: true }
        Property { name: "lastEventIsDraft"; type: "bool"; isReadonly: true }
        Property { name: "lastModified"; type: "QDateTime"; isReadonly: true }
        Signal { name: "contactsChanged" }
        Signal { name: "groupDeleted" }
        Method { name: "markAsRead"; type: "bool" }
        Method { name: "deleteGroup"; type: "bool" }
    }
    Component {
        name: "CommHistory::RecentContactsModel"
        prototype: "CommHistory::EventModel"
        exports: ["org.nemomobile.commhistory/CommRecentContactsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "RequiredPropertyType"
            values: {
                "NoPropertyRequired": 0,
                "AccountUriRequired": 1,
                "PhoneNumberRequired": 2,
                "EmailAddressRequired": 4
            }
        }
        Property { name: "requiredProperty"; type: "int" }
        Property { name: "resolving"; type: "bool"; isReadonly: true }
        Method { name: "getEvents"; type: "bool" }
    }
    Component {
        name: "CommHistoryConstants"
        prototype: "QObject"
        exports: ["org.nemomobile.commhistory/CommHistory 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "EventType"
            values: {
                "UnknownType": 0,
                "IMEvent": 1,
                "SMSEvent": 2,
                "CallEvent": 3,
                "VoicemailEvent": 4,
                "StatusMessageEvent": 5,
                "MMSEvent": 6,
                "ClassZeroSMSEvent": 7
            }
        }
        Enum {
            name: "EventDirection"
            values: {
                "UnknownDirection": 0,
                "Inbound": 1,
                "Outbound": 2
            }
        }
        Enum {
            name: "EventStatus"
            values: {
                "ManualNotificationStatus": -4,
                "WaitingStatus": -3,
                "DownloadingStatus": -2,
                "ReceivedStatus": -1,
                "UnknownStatus": 0,
                "SendingStatus": 1,
                "SentStatus": 2,
                "DeliveredStatus": 3,
                "FailedStatus": 4,
                "TemporarilyFailedStatus": 4,
                "PermanentlyFailedStatus": 5
            }
        }
        Enum {
            name: "EventReadStatus"
            values: {
                "UnknownReadStatus": 0,
                "ReadStatusRead": 1,
                "ReadStatusDeleted": 2
            }
        }
        Enum {
            name: "ChatType"
            values: {
                "ChatTypeP2P": 0,
                "ChatTypeUnnamed": 1,
                "ChatTypeRoom": 2
            }
        }
    }
    Component {
        name: "ContactAddressLookup"
        prototype: "QObject"
        exports: ["org.nemomobile.commhistory/ContactAddressLookup 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localUid"; type: "string" }
        Property { name: "remoteUid"; type: "string" }
        Property { name: "contactId"; type: "int"; isReadonly: true }
        Signal {
            name: "contactUpdated"
            Parameter { name: "contactId"; type: "int" }
        }
        Signal {
            name: "contactRemoved"
            Parameter { name: "contactId"; type: "int" }
        }
    }
    Component {
        name: "ConversationProxyModel"
        prototype: "CommHistory::ConversationModel"
        exports: ["org.nemomobile.commhistory/CommConversationModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "contactGroup"; type: "QObject"; isPointer: true }
        Property { name: "useBackgroundThread"; type: "bool" }
        Property { name: "groupId"; type: "int" }
        Property { name: "resolveContacts"; type: "bool" }
        Signal { name: "backgroundThreadChanged" }
        Method { name: "reload" }
    }
    Component {
        name: "DeclarativeGroupManager"
        prototype: "CommHistory::GroupManager"
        exports: ["org.nemomobile.commhistory/CommGroupManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "useBackgroundThread"; type: "bool" }
        Signal { name: "backgroundThreadChanged" }
        Method { name: "reload" }
        Method {
            name: "createOutgoingMessageEvent"
            type: "int"
            Parameter { name: "groupId"; type: "int" }
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUid"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "createOutgoingMessageEvent"
            type: "int"
            Parameter { name: "groupId"; type: "int" }
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUids"; type: "QStringList" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setEventStatus"
            type: "bool"
            Parameter { name: "eventId"; type: "int" }
            Parameter { name: "status"; type: "int" }
        }
        Method {
            name: "ensureGroupExists"
            type: "int"
            Parameter { name: "localUid"; type: "string" }
            Parameter { name: "remoteUids"; type: "QStringList" }
        }
    }
    Component {
        name: "DraftEvent"
        prototype: "QObject"
        exports: ["org.nemomobile.commhistory/DraftEvent 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "event"; type: "CommHistory::Event" }
        Property { name: "eventId"; type: "int" }
        Property { name: "groupId"; type: "int" }
        Property { name: "localUid"; type: "string" }
        Property { name: "remoteUids"; type: "QStringList" }
        Property { name: "freeText"; type: "string" }
        Property { name: "isModified"; type: "bool"; isReadonly: true }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Method { name: "save" }
        Method { name: "reset" }
        Method { name: "deleteEvent" }
    }
    Component {
        name: "MmsHelper"
        prototype: "QObject"
        exports: ["org.nemomobile.commhistory/MmsHelper 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "receiveMessage"
            type: "bool"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "cancel"
            type: "bool"
            Parameter { name: "id"; type: "int" }
        }
        Method {
            name: "sendMessage"
            type: "bool"
            Parameter { name: "to"; type: "QStringList" }
            Parameter { name: "cc"; type: "QStringList" }
            Parameter { name: "bcc"; type: "QStringList" }
            Parameter { name: "subject"; type: "string" }
            Parameter { name: "parts"; type: "QVariantList" }
        }
        Method {
            name: "retrySendMessage"
            type: "bool"
            Parameter { name: "id"; type: "int" }
        }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
    }
    Component { name: "QAbstractTableModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
}
