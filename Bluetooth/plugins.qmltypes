import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate Bluetooth 0.0'

Module {
    Component {
        name: "BluetoothDevice"
        prototype: "QObject"
        exports: ["Bluetooth/BluetoothDevice 0.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AudioConnectionState"
            values: {
                "AudioStateUnknown": 0,
                "AudioConnecting": 1,
                "AudioConnected": 2,
                "AudioDisconnecting": 3,
                "AudioDisconnected": 4
            }
        }
        Property { name: "ready"; type: "bool"; isReadonly: true }
        Property { name: "path"; type: "string" }
        Property { name: "audioConnectionState"; type: "AudioConnectionState"; isReadonly: true }
        Property { name: "inputConnected"; type: "bool"; isReadonly: true }
        Property { name: "address"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "icon"; type: "string"; isReadonly: true }
        Property { name: "classOfDevice"; type: "uint"; isReadonly: true }
        Property { name: "profiles"; type: "QStringList"; isReadonly: true }
        Property { name: "paired"; type: "bool"; isReadonly: true }
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Property { name: "trusted"; type: "bool" }
        Property { name: "alias"; type: "string" }
        Property { name: "legacyPairing"; type: "bool"; isReadonly: true }
        Signal { name: "devicePropertiesChanged" }
        Signal {
            name: "propertyChanged"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "variant"; type: "QVariant" }
        }
        Signal {
            name: "audioPlayingStateChanged"
            Parameter { name: "playing"; type: "bool" }
        }
        Signal {
            name: "connectInputError"
            Parameter { name: "error"; type: "string" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Signal {
            name: "disconnectInputError"
            Parameter { name: "error"; type: "string" }
            Parameter { name: "errorMessage"; type: "string" }
        }
        Method { name: "connectAudio" }
        Method { name: "disconnectAudio" }
        Method { name: "connectInput" }
        Method { name: "disconnectInput" }
        Method { name: "disconnect" }
    }
    Component {
        name: "BluetoothDevicesModel"
        prototype: "QAbstractListModel"
        exports: ["Bluetooth/BluetoothDevicesModel 0.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "powered"; type: "bool" }
        Property { name: "discoverable"; type: "bool" }
        Property { name: "discoverableTimeout"; type: "int" }
        Property { name: "adapterPresent"; type: "bool"; isReadonly: true }
        Property { name: "connected"; type: "bool"; isReadonly: true }
        Signal {
            name: "poweredChanged"
            Parameter { name: "powered"; type: "bool" }
        }
        Signal {
            name: "discoverableTimeoutChanged"
            Parameter { name: "timeout"; type: "int" }
        }
        Signal {
            name: "devicePaired"
            Parameter { name: "device"; type: "BluetoothDevice"; isPointer: true }
        }
        Signal {
            name: "discoverableChanged"
            Parameter { name: "discoverable"; type: "bool" }
        }
        Signal {
            name: "adapterChanged"
            Parameter { name: "adapterPresent"; type: "bool" }
        }
        Signal {
            name: "connectedChanged"
            Parameter { name: "isConnected"; type: "bool" }
        }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "devicePath"
            type: "string"
            Parameter { name: "name"; type: "string" }
        }
        Method { name: "devices"; type: "QList<BluetoothDevice*>" }
        Method { name: "connected"; type: "bool" }
        Method {
            name: "device"
            type: "BluetoothDevice*"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "deviceByHwAddress"
            type: "BluetoothDevice*"
            Parameter { name: "addy"; type: "string" }
        }
        Method {
            name: "makePowered"
            Parameter { name: "poweredValue"; type: "bool" }
        }
        Method { name: "powered"; type: "bool" }
        Method {
            name: "makeDiscoverable"
            Parameter { name: "discoverableValue"; type: "bool" }
        }
        Method { name: "discoverable"; type: "bool" }
        Method { name: "discoverableTimeout"; type: "int" }
        Method {
            name: "setDiscoverableTimeout"
            Parameter { name: "timeout"; type: "int" }
        }
    }
    Component {
        name: "NearbyDevicesModel"
        prototype: "QAbstractListModel"
        exports: ["Bluetooth/NearbyDevicesModel 0.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "pairingDevice"; type: "BluetoothDevice"; isReadonly: true; isPointer: true }
        Signal {
            name: "requestConfirmation"
            Parameter { name: "device"; type: "string" }
            Parameter { name: "code"; type: "uint" }
        }
        Signal {
            name: "requestPasskey"
            Parameter { name: "device"; type: "string" }
        }
        Signal {
            name: "requestPidCode"
            Parameter { name: "device"; type: "string" }
        }
        Signal { name: "release" }
        Signal {
            name: "nearbyDeviceFound"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "nearbyDeviceRemoved"
            Parameter { name: "index"; type: "int" }
        }
        Signal {
            name: "adapterPropertiesChanged"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "hwAddress"
            type: "string"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "alias"
            type: "string"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "pair"
            Parameter { name: "hwaddy"; type: "string" }
        }
        Method {
            name: "discover"
            Parameter { name: "start"; type: "bool" }
        }
        Method {
            name: "removeAll"
            Parameter { type: "bool" }
        }
        Method {
            name: "replyRequestConfirmation"
            Parameter { name: "confirmed"; type: "bool" }
        }
        Method {
            name: "replyPasskey"
            Parameter { name: "passkey"; type: "uint" }
        }
        Method {
            name: "replyRequestPidCode"
            Parameter { name: "pidCode"; type: "string" }
        }
        Method {
            name: "setAdapterProperty"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
}
