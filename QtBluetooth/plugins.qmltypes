import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated with the command 'qmlplugindump -notrelocatable QtBluetooth 5.0'.

Module {
    Component {
        name: "QDeclarativeBluetoothDiscoveryModel"
        prototype: "QAbstractListModel"
        exports: ["QtBluetooth/BluetoothDiscoveryModel 5.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "error"; type: "string"; isReadonly: true }
        Property { name: "minimalDiscovery"; type: "bool" }
        Property { name: "discovery"; type: "bool" }
        Property { name: "uuidFilter"; type: "string" }
        Signal {
            name: "newServiceDiscovered"
            Parameter { name: "service"; type: "QDeclarativeBluetoothService"; isPointer: true }
        }
        Method {
            name: "setDiscovery"
            Parameter { name: "discovery_"; type: "bool" }
        }
    }
    Component {
        name: "QDeclarativeBluetoothService"
        prototype: "QObject"
        exports: ["QtBluetooth/BluetoothService 5.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "deviceName"; type: "string"; isReadonly: true }
        Property { name: "deviceAddress"; type: "string" }
        Property { name: "serviceName"; type: "string" }
        Property { name: "serviceDescription"; type: "string" }
        Property { name: "serviceUuid"; type: "string" }
        Property { name: "serviceProtocol"; type: "string" }
        Property { name: "servicePort"; type: "int" }
        Property { name: "registered"; type: "bool" }
        Signal { name: "detailsChanged" }
        Signal { name: "newClient" }
        Method {
            name: "setServiceName"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "setDeviceAddress"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "setServiceDescription"
            Parameter { name: "description"; type: "string" }
        }
        Method {
            name: "setServiceUuid"
            Parameter { name: "uuid"; type: "string" }
        }
        Method {
            name: "setServiceProtocol"
            Parameter { name: "protocol"; type: "string" }
        }
        Method {
            name: "setServicePort"
            Parameter { name: "port"; type: "int" }
        }
        Method {
            name: "setRegistered"
            Parameter { name: "registered"; type: "bool" }
        }
        Method { name: "nextClient"; type: "QDeclarativeBluetoothSocket*" }
        Method {
            name: "assignNextClient"
            Parameter { name: "dbs"; type: "QDeclarativeBluetoothSocket"; isPointer: true }
        }
    }
    Component {
        name: "QDeclarativeBluetoothSocket"
        prototype: "QObject"
        exports: ["QtBluetooth/BluetoothSocket 5.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "service"; type: "QDeclarativeBluetoothService"; isPointer: true }
        Property { name: "connected"; type: "bool" }
        Property { name: "error"; type: "string"; isReadonly: true }
        Property { name: "state"; type: "string"; isReadonly: true }
        Property { name: "stringData"; type: "string" }
        Signal { name: "dataAvailable" }
        Method {
            name: "setService"
            Parameter { name: "service"; type: "QDeclarativeBluetoothService"; isPointer: true }
        }
        Method {
            name: "setConnected"
            Parameter { name: "connected"; type: "bool" }
        }
        Method {
            name: "sendStringData"
            Parameter { name: "data"; type: "string" }
        }
    }
}
