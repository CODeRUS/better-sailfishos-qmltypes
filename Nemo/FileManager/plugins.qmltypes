import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -noinstantiate -dependencies dependencies/empty.json Nemo.FileManager 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "DiskUsage"
        prototype: "QObject"
        exports: ["Nemo.FileManager/DiskUsage 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Idle": 0,
                "Calculating": 1,
                "Counting": 2
            }
        }
        Enum {
            name: "Filter"
            values: {
                "Files": 2,
                "Dirs": 1,
                "AllEntries": 7
            }
        }
        Property { name: "working"; type: "bool"; isReadonly: true }
        Property { name: "result"; type: "QVariantMap"; isReadonly: true }
        Property { name: "status"; type: "Status" }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "Status" }
        }
        Signal {
            name: "submit"
            Parameter { name: "paths"; type: "QStringList" }
            Parameter { name: "callback"; type: "QJSValue"; isPointer: true }
        }
        Signal {
            name: "startCounting"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue"; isPointer: true }
            Parameter { name: "filter"; type: "DiskUsage::Filter" }
            Parameter { name: "recursive"; type: "bool" }
        }
        Method {
            name: "calculate"
            Parameter { name: "paths"; type: "QStringList" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "fileCount"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "filter"; type: "DiskUsage::Filter" }
            Parameter { name: "recursive"; type: "bool" }
        }
        Method {
            name: "fileCount"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "filter"; type: "DiskUsage::Filter" }
        }
    }
    Component {
        name: "FileEngine"
        prototype: "QObject"
        exports: ["Nemo.FileManager/FileEngine 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Error"
            values: {
                "NoError": 0,
                "ErrorInvalidRequest": 1,
                "ErrorOperationCancelled": 2,
                "ErrorOperationInProgress": 3,
                "ErrorCopyFailed": 4,
                "ErrorDeleteFailed": 5,
                "ErrorMoveFailed": 6,
                "ErrorRenameFailed": 7,
                "ErrorCannotCopyIntoItself": 8,
                "ErrorFolderCopyFailed": 9,
                "ErrorFolderCreationFailed": 10,
                "ErrorChmodFailed": 11
            }
        }
        Enum {
            name: "Mode"
            values: {
                "IdleMode": 0,
                "DeleteMode": 1,
                "CopyMode": 2,
                "MoveMode": 3
            }
        }
        Property { name: "clipboardCount"; type: "int"; isReadonly: true }
        Property { name: "clipboardFiles"; type: "QStringList"; isReadonly: true }
        Property { name: "clipboardContainsCopy"; type: "bool"; isReadonly: true }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Property { name: "mode"; type: "Mode"; isReadonly: true }
        Signal { name: "workerDone" }
        Signal {
            name: "error"
            Parameter { name: "error"; type: "Error" }
            Parameter { name: "fileName"; type: "string" }
        }
        Signal {
            name: "fileDeleted"
            Parameter { name: "fullname"; type: "string" }
        }
        Signal { name: "cancelled" }
        Method {
            name: "deleteFiles"
            Parameter { name: "fileNames"; type: "QStringList" }
            Parameter { name: "nonprivileged"; type: "bool" }
        }
        Method {
            name: "deleteFiles"
            Parameter { name: "fileNames"; type: "QStringList" }
        }
        Method {
            name: "cutFiles"
            Parameter { name: "fileNames"; type: "QStringList" }
        }
        Method {
            name: "copyFiles"
            Parameter { name: "fileNames"; type: "QStringList" }
        }
        Method {
            name: "pasteFiles"
            Parameter { name: "destDirectory"; type: "string" }
            Parameter { name: "nonprivileged"; type: "bool" }
        }
        Method {
            name: "pasteFiles"
            Parameter { name: "destDirectory"; type: "string" }
        }
        Method { name: "cancel" }
        Method {
            name: "exists"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "mkdir"
            type: "bool"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "name"; type: "string" }
            Parameter { name: "nonprivileged"; type: "bool" }
        }
        Method {
            name: "mkdir"
            type: "bool"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "rename"
            type: "bool"
            Parameter { name: "fullOldFileName"; type: "string" }
            Parameter { name: "newName"; type: "string" }
            Parameter { name: "nonprivileged"; type: "bool" }
        }
        Method {
            name: "rename"
            type: "bool"
            Parameter { name: "fullOldFileName"; type: "string" }
            Parameter { name: "newName"; type: "string" }
        }
        Method {
            name: "chmod"
            type: "bool"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "ownerRead"; type: "bool" }
            Parameter { name: "ownerWrite"; type: "bool" }
            Parameter { name: "ownerExecute"; type: "bool" }
            Parameter { name: "groupRead"; type: "bool" }
            Parameter { name: "groupWrite"; type: "bool" }
            Parameter { name: "groupExecute"; type: "bool" }
            Parameter { name: "othersRead"; type: "bool" }
            Parameter { name: "othersWrite"; type: "bool" }
            Parameter { name: "othersExecute"; type: "bool" }
            Parameter { name: "nonprivileged"; type: "bool" }
        }
        Method {
            name: "chmod"
            type: "bool"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "ownerRead"; type: "bool" }
            Parameter { name: "ownerWrite"; type: "bool" }
            Parameter { name: "ownerExecute"; type: "bool" }
            Parameter { name: "groupRead"; type: "bool" }
            Parameter { name: "groupWrite"; type: "bool" }
            Parameter { name: "groupExecute"; type: "bool" }
            Parameter { name: "othersRead"; type: "bool" }
            Parameter { name: "othersWrite"; type: "bool" }
            Parameter { name: "othersExecute"; type: "bool" }
        }
        Method {
            name: "extensionForFileName"
            type: "string"
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "FileInfo"
        prototype: "QObject"
        exports: ["Nemo.FileManager/FileInfo 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "file"; type: "string" }
        Property { name: "fileName"; type: "string"; isReadonly: true }
        Property { name: "mimeType"; type: "string"; isReadonly: true }
        Property { name: "size"; type: "qlonglong"; isReadonly: true }
        Property { name: "lastModified"; type: "QDateTime"; isReadonly: true }
        Property { name: "isDir"; type: "bool"; isReadonly: true }
        Property { name: "isArchive"; type: "bool"; isReadonly: true }
        Property { name: "isLink"; type: "bool"; isReadonly: true }
        Property { name: "symLinkTarget"; type: "string"; isReadonly: true }
        Property { name: "extension"; type: "string"; isReadonly: true }
        Property { name: "absolutePath"; type: "string"; isReadonly: true }
        Property { name: "accessed"; type: "QDateTime"; isReadonly: true }
        Property { name: "baseName"; type: "string"; isReadonly: true }
        Property { name: "directoryPath"; type: "string"; isReadonly: true }
        Method { name: "refresh" }
    }
    Component {
        name: "FileModel"
        prototype: "QAbstractListModel"
        exports: ["Nemo.FileManager/FileModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Error"
            values: {
                "NoError": 0,
                "ErrorReadNoPermissions": 1
            }
        }
        Enum {
            name: "Sort"
            values: {
                "SortByName": 0,
                "SortByModified": 1,
                "SortBySize": 2,
                "SortByExtension": 3
            }
        }
        Enum {
            name: "DirectorySort"
            values: {
                "SortDirectoriesWithFiles": 0,
                "SortDirectoriesBeforeFiles": 1,
                "SortDirectoriesAfterFiles": 2
            }
        }
        Property { name: "path"; type: "string" }
        Property { name: "absolutePath"; type: "string"; isReadonly: true }
        Property { name: "directoryName"; type: "string"; isReadonly: true }
        Property { name: "parentDirectoryName"; type: "string"; isReadonly: true }
        Property { name: "sortBy"; type: "Sort" }
        Property { name: "sortOrder"; type: "Qt::SortOrder" }
        Property { name: "caseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "includeFiles"; type: "bool" }
        Property { name: "includeDirectories"; type: "bool" }
        Property { name: "includeParentDirectory"; type: "bool" }
        Property { name: "includeHiddenFiles"; type: "bool" }
        Property { name: "includeSystemFiles"; type: "bool" }
        Property { name: "directorySort"; type: "DirectorySort" }
        Property { name: "nameFilters"; type: "QStringList" }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "active"; type: "bool" }
        Property { name: "selectedCount"; type: "int"; isReadonly: true }
        Signal {
            name: "error"
            Parameter { name: "error"; type: "Error" }
            Parameter { name: "fileName"; type: "string" }
        }
        Method { name: "refresh" }
        Method { name: "refreshFull" }
        Method {
            name: "appendPath"
            type: "string"
            Parameter { name: "pathName"; type: "string" }
        }
        Method { name: "parentPath"; type: "string" }
        Method {
            name: "fileNameAt"
            type: "string"
            Parameter { name: "fileIndex"; type: "int" }
        }
        Method {
            name: "toggleSelectedFile"
            Parameter { name: "fileIndex"; type: "int" }
        }
        Method { name: "clearSelectedFiles" }
        Method { name: "selectAllFiles" }
        Method { name: "selectedFiles"; type: "QStringList" }
    }
    Component {
        name: "FileWatcher"
        prototype: "QObject"
        exports: ["Nemo.FileManager/FileWatcher 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "fileName"; type: "string" }
        Property { name: "exists"; type: "bool"; isReadonly: true }
        Method {
            name: "testFileExists"
            type: "bool"
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "Sailfish::ArchiveModel"
        prototype: "QAbstractListModel"
        exports: ["Nemo.FileManager/ArchiveModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Null": 0,
                "Loading": 1,
                "Ready": 2,
                "Extracting": 3,
                "Error": 4
            }
        }
        Enum {
            name: "ErrorState"
            values: {
                "NoError": 0,
                "ErrorArchiveFileNoSet": 1,
                "ErrorArchiveNotFound": 2,
                "ErrorArchiveOpenFailed": 3,
                "ErrorArchiveExtractFailed": 4,
                "ErrorInvalidArchivePath": 5,
                "ErrorInvalidArchiveEntry": 6,
                "ErrorExtractingInProgress": 7,
                "ErrorUnsupportedArchiveFormat": 8
            }
        }
        Property { name: "path"; type: "string" }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "errorState"; type: "ErrorState"; isReadonly: true }
        Property { name: "populated"; type: "bool"; isReadonly: true }
        Property { name: "extracting"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "active"; type: "bool" }
        Property { name: "autoRename"; type: "bool" }
        Property { name: "archiveFile"; type: "string" }
        Property { name: "fileName"; type: "string"; isReadonly: true }
        Property { name: "baseName"; type: "string"; isReadonly: true }
        Property { name: "completeSuffix"; type: "string"; isReadonly: true }
        Property { name: "requiredSpace"; type: "qlonglong"; isReadonly: true }
        Signal {
            name: "filesExtracted"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "isDir"; type: "bool" }
            Parameter { name: "entryName"; type: "string" }
            Parameter { name: "entries"; type: "QStringList" }
        }
        Method {
            name: "appendPath"
            type: "string"
            Parameter { name: "pathName"; type: "string" }
        }
        Method { name: "errorString"; type: "string" }
        Method {
            name: "extractAllFiles"
            type: "bool"
            Parameter { name: "targetPath"; type: "string" }
        }
        Method {
            name: "extractFile"
            type: "bool"
            Parameter { name: "entryName"; type: "string" }
            Parameter { name: "targetPath"; type: "string" }
        }
        Method {
            name: "cleanExtractedEntry"
            type: "bool"
            Parameter { name: "entry"; type: "string" }
        }
    }
}
